{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#pytechnicalindicators","title":"PyTechnicalIndicators","text":"<p>Fast, configurable technical indicators for Python \u2014 powered by Rust.</p> <p>PyTechnicalIndicators is a Python library delivering technical analysis with the speed and safety of Rust. Built for quants, traders, and developers who demand robust, high-performance financial analytics.</p>"},{"location":"#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Fast: Rust-powered core for microsecond-level performance.</li> <li>Comprehensive: 60+ indicators, from classics (RSI, MACD, SMA) to advanced (McGinley, Ulcer).</li> <li>Configurable: Most indicators offer multiple calculation models, rolling/bulk or single/scalar outputs.</li> <li>Research-Ready: Designed for backtesting, data science, and live analytics.</li> <li>Easy to use: Consistent API, pandas-friendly, works in Jupyter.</li> </ul>"},{"location":"#quickstart","title":"\u26a1 Quickstart","text":"<p>Install:</p> <pre><code>pip install pytechnicalindicators\n</code></pre> <p>First indicator:</p> <pre><code>import pytechnicalindicators as pti\nprices = [100.2, 100.46, 100.53, 100.38, 100.19]\nma = pti.moving_average(prices, \"simple\")\nprint(f\"Simple Moving Average: {ma}\")\n</code></pre>"},{"location":"#indicator-coverage","title":"\ud83d\udcda Indicator Coverage","text":"<p>PyTechnicalIndicators covers:</p> <ul> <li>Standard: SMA, EMA, Bollinger Bands, MACD, RSI</li> <li>Candle: Ichimoku Cloud, Moving Constant Bands, Donchian, Keltner, Supertrend</li> <li>Momentum: Chaikin Oscillator, CCI, MFI, OBV, ROC, Williams %R</li> <li>Moving Average: McGinley Dynamic, classic MA types</li> <li>Trend: Aroon, Parabolic, TSI, Volume-Price Trend</li> <li>Correlation: Asset price correlations</li> <li>Strength: Accumulation/Distribution, PVI, NVI, RVI</li> <li>Volatility: Ulcer Index, Volatility System</li> <li>Other: ROI, ATR, True Range, IBS</li> </ul> <p>See full API Reference</p>"},{"location":"#documentation","title":"\ud83d\udcd6 Documentation","text":"<ul> <li>Tutorials \u2014 Start-to-finish workflows for real-world analysis</li> <li>How-To Guides \u2014 Task-focused, practical recipes</li> <li>API Reference \u2014 Full indicator and function docs</li> <li>Benchmarks \u2014 Performance tables by indicator and dataset size</li> <li>Source code \u2014 Where the magic happens</li> </ul>"},{"location":"#source-code","title":"\ud83d\uddc2\ufe0f Source Code","text":"<p>Find PyTechnicalIndicators source code on GitHub.</p>"},{"location":"#community-contributing","title":"\ud83e\udd1d Community &amp; Contributing","text":"<ul> <li>GitHub Discussions</li> <li>Open an Issue</li> <li>Contributing Guide</li> </ul>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>MIT License</p>"},{"location":"api/","title":"API Reference","text":"<p>Comprehensive documentation for all modules, classes, and functions available in PyTechnicalIndicators, as well as a full indicator list.</p>"},{"location":"api/#quick-navigation","title":"Quick Navigation","text":"<ul> <li>Candle Indicators - Moving constant bands, envelopes, Ichimoku Cloud...</li> <li>Chart Trends - Peaks, valleys, overall trends, break down trends...</li> <li>Correlation Indicators - Correlate asset prices</li> <li>Momentum Indicators - RSI, MACD, stochastic oscillators, rate of change...</li> <li>Moving Average - Moving average, McGinley Dynamic</li> <li>Other Indicators - True Range, internal bar strength, return on investment...</li> <li>Standard Indicators - Simple, smoother, exponential moving average, RSI, MACD, Bollinger bands</li> <li>Strength Indicators - Relative vigor index, +ve/-ve volumw inswz, accumulation distribution</li> <li>Trend Indicators - Aroon up/down, oscillator, and indicator, volume price trend...</li> <li>Volatility Indicators - Ulcer index, volatiltiy sytem</li> </ul>"},{"location":"api/#shared-types-conventions","title":"Shared Types &amp; Conventions","text":"<p>Many indicator functions use shared model types and enums as string arguments.</p>"},{"location":"api/#constant-model-types","title":"Constant Model Types","text":"<p>Accepted strings:</p> <ul> <li><code>\"simple\"</code>, <code>\"ma\"</code>, <code>\"simple_moving_average\"</code></li> <li><code>\"smoothed\"</code>, <code>\"sma\"</code>, <code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential\"</code>, <code>\"ema\"</code>, <code>\"exponential_moving_average\"</code></li> <li><code>\"median\"</code>, <code>\"smm\"</code>, <code>\"simple_moving_median\"</code></li> <li><code>\"mode\"</code>, <code>\"simple_moving_mode\"</code></li> </ul>"},{"location":"api/#deviation-models","title":"Deviation Models","text":"<p>Accepted strings:</p> <ul> <li><code>\"standard\"</code>, <code>\"std\"</code>, <code>\"standard_deviation\"</code></li> <li><code>\"mean\"</code>, <code>\"mean_absolute_deviation\"</code></li> <li><code>\"median\"</code>, <code>\"median_absolute_deviation\"</code></li> <li><code>\"mode\"</code>, <code>\"mode_absolute_deviation\"</code></li> <li><code>\"ulcer\"</code>, <code>\"ulcer_index\"</code></li> </ul>"},{"location":"api/#moving-average-types","title":"Moving Average Types","text":"<p>Accepted strings:</p> <ul> <li><code>\"simple\"</code></li> <li><code>\"smoothed\"</code></li> <li><code>\"exponential\"</code></li> </ul>"},{"location":"api/#position-types","title":"Position Types","text":"<p>Accepted strings:</p> <ul> <li><code>\"long\"</code></li> <li><code>\"short\"</code></li> </ul> <p>Error Handling: If you pass an invalid string, the API raises a Python <code>ValueError</code> with a list of valid options.</p>"},{"location":"api/#package-structure","title":"Package Structure","text":"<p>PyTechnicalIndicators is organized into indicator categories and modules:</p> <pre><code>import pytechnicalindicators\n\npytechnicalindicators.candle_indicators\npytechnicalindicators.chart_trends\npytechnicalindicators.correlation_indicators\npytechnicalindicators.momentum_indicators\npytechnicalindicators.moving_average\npytechnicalindicators.other_indicators\npytechnicalindicators.standard_indicators\npytechnicalindicators.strength_indicators\npytechnicalindicators.trend_indicators\npytechnicalindicators.volatility_indicators\n</code></pre> <p>Each submodule contains indicator functions, often organized into: - <code>single</code> (single value for latest data slice) - <code>bulk</code> (vectorized/moving window results)</p> <p>Example usage:</p> <pre><code>from pytechnicalindicators.candle_indicators.bulk import supertrend\nresult = supertrend(high, low, close, \"simple_moving_average\", 3.0, 14)\n</code></pre>"},{"location":"api/#complete-indicators-list","title":"Complete Indicators List","text":"<p>Welcome to the comprehensive catalog of PyTechnicalIndicators! This page lists all 60+ technical indicators available in the library, organized by category for easy navigation.</p>"},{"location":"api/#candle-indicators","title":"Candle Indicators","text":"<p>Candle indicators analyze price patterns and chart formations from OHLC charts.</p> Indicator Function Name Description Input Data Parameters Moving Constant Envelopes <code>moving_constant_envelopes()</code> Price channels Prices <code>difference</code>, <code>constant_model_type</code>, <code>period</code> (bulk only) Mcginley Dynamic Envelopes <code>mcginley_dynamic_envelopes()</code> Price channels using the McGinley Dynamic Prices <code>difference</code>, <code>previous_mcginley_dynamic</code>, <code>period</code> (bulk only) Moving Constant Bands <code>moving_constant_bands()</code> Price channels with deviation Prices <code>constant_model_type</code>, <code>deviation_model</code>, <code>deviation_multiplier</code>, <code>period</code> (bulk only) Mcginley Dynamic Bands <code>mcginley_dynamic_bands()</code> Price channels using the McGinley Dynamic and deviation Prices <code>deviation_model</code>, <code>deviation_multiplier</code>, <code>previous_mcginley_dynamic</code>, <code>period</code> (bulk only) Ichimoku Cloud <code>ichimoku_cloud()</code> Complete Ichimoku system High, Low, Close <code>conversion_period</code>, <code>base_period</code>, <code>span_b_period</code> Donchian Channels <code>donchian_channels()</code> Highest high, lowest low channels High, Low prices <code>period</code> (bulk only) Keltner Channels <code>keltner_channels()</code> ATR-based price channels High, Low, Close <code>constant_model_type</code>, <code>atr_constant_model_type</code>, <code>multiplier</code>, <code>period</code> (bulk only) Supertrend <code>supertrend()</code> Trend-following indicator High, Low, Close <code>constant_model_type</code>, <code>multiplier</code>, <code>period</code> (bulk only)"},{"location":"api/#example-usage","title":"Example Usage","text":"<pre><code>import pytechnicalindicators as pti\n\n# Simple Moving Average with Standard Deviation Bands\nbb = pti.candle_indicators.bulk.moving_constant_bands(close, period=20, constant_model_type=\"simple_moving_average\", deviation_model=\"standard_deviation\", deviation_multiplier=2)\n\n# Ichimoku Cloud\nichimoku = pti.candle_indicators.bulk.ichimoku_cloud(highs, lows, closes, conversion_period=9, conversion_period=26, span_b_period=52)\n\n# Donchian Channels\ndonchian = pti.candle_indicators.bulk.donchian_channels(highs, lows, period=20)\n\n# Keltner Channels\nkeltner = pti.candle_indicators.single.keltner_channels(highs, lows, closes, multiplier=2i, constant_model_type=\"simple_moving_average\", atr_constant_model_type=\"simple_moving_average\")\n\n# Supertrend\nsupertrend = pti.candle_indicators.single.supertrend(highs, lows, closes, constant_model_type=\"simple_moving_average\", multiplier=3)\n</code></pre>"},{"location":"api/#chart-trends","title":"Chart Trends","text":"<p>Chart trends detect trend in price charts</p> Indicator Function Name Description Input Data Parameters Peaks <code>peaks()</code> Get all peaks for a period Prices <code>period</code>, <code>closest_neighbor</code> Valleys <code>valleys()</code> Get all valleys for a period Prices <code>period</code>, <code>closest_neighbor</code> Peak Trends <code>peak_trend()</code> Calculate the trend of the peaks Prices <code>period</code> Valley Trends <code>valley_trend()</code> Calculate the trend of the valleys Prices <code>period</code> Overall Trend <code>overall_trend()</code> Calculates the overall trend of prices Prices Breakdown Trends <code>break_down_trends()</code> Splits the price trends into differrent parts Prices <code>max_outliers</code>, <code>soft_r_squared_minimum</code>, <code>soft_r_squared_maximum</code>, <code>hard_r_squared_minimum</code>, <code>hard_r_squared_maximum</code>, <code>soft_standard_error_multiplier</code>, <code>hard_standard_error_multiplier</code>, <code>soft_reduced_chi_squared_multiplier</code>, <code>hard_reduced_chi_squared_multiplier</code>"},{"location":"api/#example-usage_1","title":"Example Usage","text":"<pre><code># Get all peaks within 5 periods of each other within a 10 period window\npeaks = pti.chart_trends.peaks(prices, period=10, closest_neighbor=5)\n\n# Get the trend of valleys over a 5 period window\nvalley_trend = valley_trend(prices, period=5)\n</code></pre>"},{"location":"api/#correlation-indicators","title":"Correlation Indicators","text":"<p>Correlation indicators determine the correlation between two assets</p> Indicator Function Name Description Input Data Parameters Correlate Asset Prices <code>correlate_asset_prices()</code> Calculate the correlation between two assests Prices of both assets <code>constant_model_type</code>, <code>deviation_model</code>, <code>period</code> (bulk only)"},{"location":"api/#example-usage_2","title":"Example Usage","text":"<pre><code># Correlation between a and b over the past 5 periods\ncorr = pti.correlation_indicators.bulk(prices_asset_a, prices_asset_b, constant_model_type=\"simple_moving_average\", deviation_model=\"standard_deviation\", period=5)\n</code></pre>"},{"location":"api/#momentum-indicators","title":"Momentum Indicators","text":"<p>Momentum indicators measure the speed and strength of price movements.</p> Indicator Function Name Description Input Data Parameters RSI <code>relative_strength_index()</code> Relative Strength Index Prices <code>constant_model_type</code>, <code>period</code> (bulk only) Stochastic Oscillator <code>stochastic_oscillator()</code> Stochastic oscillator Prices <code>period</code> (bulk only) Slow Stochastic Oscillator <code>slow_stochastic()</code> Slow stochastic oscillator Stochastics <code>constant_model_type</code>, <code>period</code> (bulk only) Slowest Stochastic Oscillator <code>slowest_stochastic()</code> Slowest stochastic oscillator Slow stochastics <code>constant_model_type</code>, <code>period</code> (bulk only) MACD <code>macd_line()</code> Moving Average Convergence Divergence Prices <code>short_period</code>, <code>short_period_model</code>, <code>long_period_model</code>, <code>long_period</code> (bulk only) Signal Line <code>signal_line()</code> Signal line for the MACD MACDs <code>constant_model_type</code>, <code>period</code> (bulk only) McGinley Dynamic MACD <code>macd_line()</code> MACD using McGinley Dynamic Prices <code>short_period</code>, <code>previous_short_mcginley</code>, <code>previous_long_mcginley</code>, <code>long_period</code> (bulk only) Williams %R <code>williams_percent_r()</code> Williams Percent Range High, Low, Close <code>period</code> (bulk only) RoC <code>rate_of_change()</code> Rate of change Prices MFI <code>money_flow_index()</code> Money Flow Index Prices, Volume <code>period</code> (bulk only) Commodity Channel Index <code>commodity_channel_index()</code> CCI oscillator Prices <code>constant_model_type</code>, <code>deviation_model</code>, <code>constant_multiplier</code>, <code>period</code> (bulk only) McGinley Dynamic CCI <code>mcginley_dynamic_commodity_channel_index()</code> CCI oscillator using the McGinley Dynamic Prices <code>previous_mcginley_dynamic</code>, <code>deviation_model</code>, <code>constant_multiplier</code>, <code>period</code> (bulk only) OBV <code>on_balance_volume()</code> On Balance Volume Prices, Volume <code>previous_on_balance_volume</code> Chaikin Oscillator <code>chaikin_oscillator()</code> Chaikin Oscillator (CO) High, Low, Close, Volume <code>short_period</code>, <code>previous_accumulation_distribution</code>, <code>short_period_model</code>, <code>long_period_model</code>, <code>long_period</code> (bulk only) PPO <code>percentage_price_oscillator()</code> Percentage Price Oscillator Prices <code>short_period</code>, <code>constant_model_type</code>, <code>long_period</code> (bulk only) CMO <code>chande_momentum_oscillator()</code> Chande Momentum Oscillator Prices <code>period</code> (bulk only)"},{"location":"api/#example-usage_3","title":"Example Usage","text":"<pre><code># RSI\nrsi = pti.momentum_indicators.bulk.relative_strength_index(close, constant_model_type=\"simple_moving_average\", period=14)\n\n# MACD\nmacd = pti.momentum_indicators.bulk.macd_line(close, short_period=12, long_period=26, short_period_model=\"simple_moving_average\", long_period_model=\"simple_moving_average\")\nsignal = pti.momentum_indicators.bulk.signal_line(macd, period=9)\n\n# Stochastic\nstoch = pti.momentum_indicators.bulk.stochastic_oscillator(close, period=14)\n\n# Williams %R\nwilliams = pti.momentum_indicators.single.williams_r(highs, lows, close)\n\n# Money Flow Index\nmfi = pti.momentum_indicators.single.money_flow_index(close, volumes)\n</code></pre>"},{"location":"api/#moving-average","title":"Moving Average","text":"<p>Calculate various moving averages and the McGinley dynamic.</p> Indicator Function Name Description Input Data Parameters Moving Average <code>moving_average()</code> Generic Moving Average Prices <code>moving_average_type</code>, <code>period</code> (bulk only) McGinley Dynamic <code>mcginley_dynamic()</code> McGinley Dynamic Prices <code>previous_mcginley_dynamic</code>, <code>period</code>"},{"location":"api/#example-usage_4","title":"Example Usage","text":"<pre><code># Different MAs for the past 5 periods\nsimple_ma = pti.moving_average.bulk.moving_average(prices, moving_average_type=\"simple\", period=5)\nsmoothed_ma = pti.moving_average.bulk.moving_average(prices, moving_average_type=\"smoothed\", period=5)\nexponential_ma = pti.moving_average.bulk.moving_average(prices, moving_average_type=\"exponential\", period=5)\n\n# McGinley Dynamic\nbulk_mcginley = pti.moving_average.bulk.mcginley_dynamic(prices, previous_mcginley_dynamic=0.0, period=5)\nnext_mcginley = pti.moving_average.single.mcginley_dynamic(next_price, previous_mcginley_dynamic=bulk_mcginley[-1], period=5\n</code></pre>"},{"location":"api/#other-indicators","title":"Other Indicators","text":"<p>Indicators that don't fall into a specific category.</p> Indicator Function Name Description Input Data Parameters Return on Investment <code>return_on_investment()</code> ROI Prices <code>investment</code> True Range <code>true_range()</code> True Range (TR) High, Low, Close Average True Range <code>average_true_range()</code> Average True Range (ATR) High, Low, Close <code>constant_model_type</code>, <code>period</code> (bulk only) Internal Bar Strength <code>internal_bar_strength()</code> Internal Bar Strength (IBS) High, Low, Close Positivity Indicator <code>positivity_indicator()</code> Positivity Indicator Open, Close <code>signal_period</code>, <code>constant_model_type</code>"},{"location":"api/#example-usage_5","title":"Example Usage","text":"<pre><code># Calculate the Return on an 1000 investment\nroi = pti.other_indicators.bulk.return_on_investment(prices, investment=1000)\n\n# Calculate the internal bar strengrh for the last bar\nibs = pti.other_indicators.single.internal_bar_strength(high[-1], low[-1], close[-1]\n</code></pre>"},{"location":"api/#standard-indicators","title":"Standard Indicators","text":"<p>Indicators with the defaults pre set to match they traditionally are.</p> Indicator Function Name Description Input Data Parameters Simple Moving Average <code>simple_moving_average()</code> Simple Moving Average Prices <code>period</code> (bulk only) Smoothed Moving Average <code>smoothed_moving_average()</code> Smoothed Moving Average Prices <code>period</code> (bulk only) Exponential Moving Average <code>exponential_moving_average()</code> Exponential Moving Average Prices <code>period</code> (bulk only) Bollinger Bands <code>bollinger_bands()</code> Bollinger Bands Prices MACD <code>macd()</code> MACD, signal line, and histogram Prices RSI <code>rsi()</code> Relative Strength Index Prices"},{"location":"api/#example-usage_6","title":"Example Usage","text":"<pre><code>rsi = pti.standard_indicators.bulk.rsi(prices)\n\nmacd, signal, hist = pti.standard_indicators.bulk.macd(prices)\n</code></pre>"},{"location":"api/#strength-indicators","title":"Strength Indicators","text":"<p>Strength indicators analyze market participation and buying/selling pressure.</p> Indicator Function Name Description Input Data Parameters Accumulation/Distribution <code>accumulation_distribution()</code> A/D Line High, Low, Close, Volume <code>previous_accumulation_distribution</code> Volume Index single only <code>volume_index()</code> <code>current_price</code>, <code>previous_price</code> <code>previous_volume_index</code> Positive Volume Index bulk only <code>positive_volume_index()</code> PVI volume indicator Close, Volume <code>previous_volume_index</code> Negative Volume Index bulk only <code>negative_volume_index()</code> NVI volume indicator Close, Volume <code>previous_volume_index</code> Relative Vigor Index <code>relative_vigor_index()</code> RVI strength indicator Open, High, Low, Close <code>constant_model_type</code>, <code>period</code> (bulk only)"},{"location":"api/#example-usage_7","title":"Example Usage","text":"<pre><code># Volume Index Indicators\npvi = pti.strength_indicators.bulk.positive_volume_index(close, volume, previous_volume_index=0.0)\nnvi = pti.strength_indicators.bulk.negative_volume_index(close, volume, previous_volume_index=0.0)\n\n# Relative Vigor Index\nrvi = pti.strength_indicators.single.relative_vigor_index(open, high, low, close, constant_model_type=\"simple_moving_average\")\n</code></pre>"},{"location":"api/#trend-indicators","title":"Trend Indicators","text":"<p>Trend indicators help identify the direction and strength of market trends.</p> Indicator Function Name Description Input Data Parameters Aroon Oscillator <code>aroon_oscillator()</code> Measures trend strength and direction Aroon Ups, Aroon Downs Aroon Up <code>aroon_up()</code> Uptrend strength indicator High prices <code>period</code> (bulk only) Aroon Down <code>aroon_down()</code> Downtrend strength indicator Low prices <code>period</code> (bulk only) Aroon Indicator <code>aroon_indicator()</code> Measures trend strength and direction High, Low prices <code>period</code> (bulk only) Long Parabolic Time Price System single only <code>long_parabolic_time_price_system()</code> Long Stop and Reverse trend indicator <code>previous_sar</code>, <code>extreme_point</code>, <code>af</code>, <code>low</code> Short Parabolic Time Price System single only <code>short_parabolic_time_price_system()</code> Short  Stop and Reverse trend indicator <code>previous_sar</code>, <code>extreme_point</code>, <code>af</code>, <code>high</code> Parabolic SaR bulk only <code>parabolic_time_price_system()</code> Stop and Reverse trend indicator High, Low prices <code>af_start</code>, <code>af_step</code>, <code>af_max</code>, <code>position</code>, <code>previous_sar</code> True Strength Index <code>true_strength_index()</code> Double-smoothed momentum oscillator Prices <code>first_constant_model</code>, <code>second_constant_model</code>, <code>first_period</code>, <code>second_period</code> (bulk only) Directional Movement System bulk only <code>directional_movement_system ()</code> Directional Movement System High, Low, Close <code>period</code>, <code>constant_model_type</code> Volume Price Trend <code>volume_price_trend()</code> Volume Price Trend (VPT) Prices, Volumes <code>previous_vpt</code>"},{"location":"api/#example-usage_8","title":"Example Usage","text":"<pre><code># Aroon Indicators\naroon_up = pti.trend_indicators.bulk.aroon_up(highs, period=14)\naroon_down = pti.trend_indicators.bulk.aroon_down(lows, period=14)\naroon_oscillator = pti.trend_indicators.bulk.aroon_oscillator(aroon_up, aroon_down)\n\n# Parabolic SAR\npsar = pti.trend_indicators.bulk.parabolic_time_price_system(highs, lows, af_start=0.02, af_step=0.02, af_max=0.2, position=\"long\", previous_sar=0)\n</code></pre>"},{"location":"api/#volatility-indicators","title":"Volatility Indicators","text":"<p>Volatility indicators measure market volatility and price range movements.</p> Indicator Function Name Description Input Data Parameters Ulcer Index <code>ulcer_index()</code> Downside volatility measure Prices <code>period</code> (bulk only) Volatility System bulk only <code>volatility_system()</code> Volatility-based signals High, Low, Close <code>period</code>, <code>constant_multiplier</code>, <code>constant_model_type</code>"},{"location":"api/#example-usage_9","title":"Example Usage","text":"<pre><code># Ulcer Index\nui = pti.volatility_indicators.bulk.ulcer_index(close, period=14)\n\n# Volatility System\nvs = pti.volatility_indicators.bulk.volatility_system(high, low, close, period=14, constant_multiplier=2.0, constant_model_type=\"simple_moving_average\")\n</code></pre>"},{"location":"api/#parameter-conventions","title":"Parameter Conventions","text":"Parameter Type Description Example period Number of periods for calculation <code>period=14</code> constant_model_type Type of constant model to use <code>constant_model_type=\"exponential_moving_average\"</code> constant_multiplier Multiplier for the constant model used <code>constant_multiplier=2.0</code> deviation_model Type of deviation model to use <code>deviation_model=\"median_aboslute_deviation\"</code> deviation_multiplier Multiplier for the deviation model <code>deviation_multiplier=2.0</code>"},{"location":"api/#data-requirements","title":"Data Requirements","text":""},{"location":"api/#data-format","title":"Data Format","text":"<pre><code># All data should be provided as Python lists\ncloses = [100.0, 101.5, 99.8, 102.3, 103.1]\nhighs = [101.0, 102.0, 100.5, 103.0, 104.0]\nlows = [99.5, 100.8, 99.0, 101.5, 102.0]\nvolumes = [10000, 12000, 9500, 15000, 11000]\n</code></pre> <p>\ud83c\udf89 That's all 60+ indicators available in PyTechnicalIndicators!</p>"},{"location":"api/candle-indicators/","title":"\ud83d\udd6f\ufe0f Candle Indicators API Reference","text":"<p>Module: <code>candle_indicators</code> </p> <p>Candle indicators are technical indicators designed for use with candlestick price charts. They help identify trends, volatility, and price action patterns commonly used in trading and analysis.</p>"},{"location":"api/candle-indicators/#when-to-use","title":"\ud83d\udcda When to Use","text":"<ul> <li>Analyze support/resistance, volatility bands, and price channels on candle charts.</li> <li>Suitable for both traditional and crypto assets.</li> </ul>"},{"location":"api/candle-indicators/#structure","title":"\ud83c\udfd7\ufe0f Structure","text":"<ul> <li>single: Functions that return a single value for a slice of prices.</li> <li>bulk: Functions that compute values of a slice of prices over a period and return a vector.</li> </ul>"},{"location":"api/candle-indicators/#bulk-functions","title":"\ud83d\ude80 Bulk Functions","text":"<p>Bulk functions operate over a moving window and return a list of values for the entire data series.</p>"},{"location":"api/candle-indicators/#moving_constant_envelopes","title":"<code>moving_constant_envelopes</code>","text":"<pre><code>moving_constant_envelopes(\n    prices: List[float],\n    constant_model_type: str,\n    difference: float,\n    period: int\n) -&gt; List[Tuple[float, float, float]]\n</code></pre>"},{"location":"api/candle-indicators/#arguments","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>difference: Percent band width (e.g., <code>3.0</code> for \u00b13%)</li> <li>period: Period over which to calculate the moving constant envelopes</li> </ul>"},{"location":"api/candle-indicators/#returns","title":"Returns","text":"<p>List of tuples (lower envelope, constant model result, upper envelope)</p>"},{"location":"api/candle-indicators/#example","title":"Example","text":"<pre><code>from pytechnicalindicators import candle_indicators as ci\n\nprices = [\n    100.0, 102.0, 103.0, 102.5, 102.8, 103.1, 103.8, 103.9, \n    104.4, 103.6, 103.1, 102.9, 103.3, 103.7\n]\n\nmces = ci.bulk.moving_constant_envelopes(\n    prices,\n    constant_model_type=\"simple_moving_average\",\n    difference=2.0,\n    period=5\n)\n\nprint(f\"Bulk Moving Constant Envelopes: {mces}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Moving Constant Envelopes: [\n    (100.0188, 102.06, 104.1012), (100.62639999999999, 102.67999999999999, 104.7336), \n    (100.97919999999999, 103.03999999999999, 105.10079999999999), \n    (101.15559999999999, 103.22, 105.2844), (101.52799999999999, 103.6, 105.672), \n    (101.6848, 103.75999999999999, 105.83519999999999), \n    (101.68480000000002, 103.76000000000002, 105.83520000000001), (101.5084, 103.58, 105.6516), \n    (101.3908, 103.46, 105.52919999999999), (101.2536, 103.32000000000001, 105.38640000000001)\n]\n</code></pre>"},{"location":"api/candle-indicators/#mcginley_dynamic_envelopes","title":"<code>mcginley_dynamic_envelopes</code>","text":"<pre><code>mcginley_dynamic_envelopes(\n    prices: List[float],\n    difference: float,\n    previous_mcginley_dynamic: float,\n    period: int\n) -&gt; List[Tuple[float, float, float]]\n</code></pre>"},{"location":"api/candle-indicators/#arguments_1","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>difference: Percent band width (e.g., <code>3.0</code> for \u00b13%)</li> <li>previous_mcginley_dynamic: Previous McGinley dynamic (use <code>0.0</code> if none)</li> <li>period: Period over which to calculate the McGinley dynamic envelopes</li> </ul>"},{"location":"api/candle-indicators/#returns_1","title":"Returns","text":"<p>List of McGinley dynamic envelopes tuple (lower envelope, McGinley dynamic, upper envelope)</p>"},{"location":"api/candle-indicators/#example_1","title":"Example","text":"<pre><code>from pytechnicalindicators import candle_indicators as ci\n\nprices = [\n    100.0, 102.0, 103.0, 102.5, 102.8, 103.1, 103.8, 103.9,\n    104.4, 103.6, 103.1, 102.9, 103.3, 103.7\n]\n\nmdes = ci.bulk.mcginley_dynamic_envelopes(\n    prices,\n    difference=2.0,\n    previous_mcginley_dynamic=0.0,\n    period=5\n)\n\nprint(f\"Bulk McGinley Dynamic Envelopes: {mdes}\")\n</code></pre> <p>Output</p> <pre><code>Bulk McGinley Dynamic Envelopes: [\n    (100.744, 102.8, 104.856), (100.80211859724395, 102.85930469106525, 104.91649078488655), \n    (100.9799014916942, 103.04071580785123, 105.10153012400825), \n    (101.14281840437332, 103.20695755548297, 105.27109670659263), \n    (101.36614779143355, 103.43484468513627, 105.50354157883899), \n    (101.3983123111345, 103.46766562360663, 105.53701893607877), \n    (101.32521640748107, 103.39307796681742, 105.46093952615377), \n    (101.22670738127877, 103.29255855232527, 105.35840972337178), \n    (101.22816548479628, 103.29404641305743, 105.35992734131858), \n    (101.3064937650942, 103.37397322968796, 105.44145269428172)\n]\n</code></pre>"},{"location":"api/candle-indicators/#moving_constant_bands","title":"<code>moving_constant_bands</code>","text":"<pre><code>moving_constant_bands(\n    prices: List[float],\n    constant_model_type: str,\n    deviation_model: str,\n    deviation_multiplier: float,\n    period: int\n) -&gt; List[Tuple[float, float, float]]\n</code></pre>"},{"location":"api/candle-indicators/#arguments_2","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>deviation_model: Choice of:<ul> <li><code>\"standard_deviation\"</code></li> <li><code>\"mean_absolute_deviation\"</code></li> <li><code>\"median_absolute_deviation\"</code></li> <li><code>\"mode_absolute_deviation\"</code></li> <li><code>\"ulcer_index\"</code></li> </ul> </li> <li>deviation_multiplier: Price deviation multiplier</li> <li>period: Period over which to calculate the moving constant bands</li> </ul>"},{"location":"api/candle-indicators/#returns_2","title":"Returns","text":"<p>List of Moving constant bands tuple (lower band, constant model result, upper band)</p>"},{"location":"api/candle-indicators/#example_2","title":"Example","text":"<pre><code>from pytechnicalindicators import candle_indicators as ci\n\nprices = [\n    100.0, 102.0, 103.0, 102.5, 102.8, 103.1, 103.8, 103.9,\n    104.4, 103.6, 103.1, 102.9, 103.3, 103.7\n]\n\nmcbs = ci.bulk.moving_constant_bands(\n    prices,\n    constant_model_type=\"simple_moving_average\",\n    deviation_model=\"standard_deviation\",\n    deviation_multiplier=2.0,\n    period=5\n)\n\nprint(f\"Bulk Moving Constant Bands: {mcbs}\")\n</code></pre> <p>Output</p> <pre><code>Bulk Moving Constant Bands: [\n    (99.89260525053695, 102.06, 104.22739474946306), \n    (101.88602267034882, 102.67999999999999, 103.47397732965116), \n    (102.17651867420308, 103.03999999999999, 103.9034813257969), \n    (102.12163758258032, 103.22, 104.31836241741968), \n    (102.44761117672896, 103.6, 104.75238882327103), \n    (102.91525151672226, 103.75999999999999, 104.60474848327772), \n    (102.9152515167223, 103.76000000000002, 104.60474848327775), \n    (102.49630262526847, 103.58, 104.66369737473153), \n    (102.41233593170328, 103.46, 104.5076640682967), \n    (102.72133481811618, 103.32000000000001, 103.91866518188384)\n]\n</code></pre>"},{"location":"api/candle-indicators/#mcginley_dynamic_bands","title":"<code>mcginley_dynamic_bands</code>","text":"<pre><code>mcginley_dynamic_bands(\n    prices: List[float],\n    deviation_model: str,\n    deviation_multiplier: float,\n    previous_mcginley_dynamic: float,\n    period: int\n) -&gt; List[Tuple[float, float, float]]\n</code></pre>"},{"location":"api/candle-indicators/#arguments_3","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>deviation_model: Choice of:<ul> <li><code>\"standard_deviation\"</code></li> <li><code>\"mean_absolute_deviation\"</code></li> <li><code>\"median_absolute_deviation\"</code></li> <li><code>\"mode_absolute_deviation\"</code></li> <li><code>\"ulcer_index\"</code></li> </ul> </li> <li>deviation_multiplier: Price deviation multiplier</li> <li>previous_mcginley_dynamic: Previous McGinley dynamic (<code>0.0</code> if none)</li> <li>period: Period over which to calculate the moving constant bands</li> </ul>"},{"location":"api/candle-indicators/#returns_3","title":"Returns","text":"<p>List of McGinley dynamic bands tuple (lower band, McGinley dynamic, upper band)</p>"},{"location":"api/candle-indicators/#example_3","title":"Example","text":"<pre><code>from pytechnicalindicators import candle_indicators as ci\n\nprices = [\n    100.0, 102.0, 103.0, 102.5, 102.8, 103.1, 103.8, 103.9,\n    104.4, 103.6, 103.1, 102.9, 103.3, 103.7\n]\n\nmdbs = ci.bulk.mcginley_dynamic_bands(\n    prices,\n    deviation_model=\"standard_deviation\",\n    deviation_multiplier=2.0,\n    previous_mcginley_dynamic=0.0,\n    period=5\n)\n\nprint(f\"Bulk McGinley Dynamic Bands: {mdbs}\")\n</code></pre> <p>Output</p> <pre><code>Bulk McGinley Dynamic Bands: [\n    (100.63260525053694, 102.8, 104.96739474946305), \n    (102.06532736141408, 102.85930469106525, 103.65328202071642), \n    (102.17723448205432, 103.04071580785123, 103.90419713364814), \n    (102.1085951380633, 103.20695755548297, 104.30531997290265), \n    (102.28245586186523, 103.43484468513627, 104.58723350840731), \n    (102.62291714032891, 103.46766562360663, 104.31241410688436), \n    (102.54832948353969, 103.39307796681742, 104.23782645009514), \n    (102.20886117759375, 103.29255855232527, 104.3762559270568), \n    (102.24638234476072, 103.29404641305743, 104.34171048135414), \n    (102.77530804780413, 103.37397322968796, 103.9726384115718)\n]\n</code></pre>"},{"location":"api/candle-indicators/#ichimoku_cloud","title":"<code>ichimoku_cloud</code>","text":"<pre><code>ichimoku_cloud(\n    highs: List[float],\n    lows: List[float],\n    close: List[float],\n    conversion_period: int,\n    base_period: int,\n    span_b_period: int\n) -&gt; List[Tuple[float, float, float, float, float]]\n</code></pre>"},{"location":"api/candle-indicators/#arguments_4","title":"Arguments","text":"<ul> <li>highs: List of price highs</li> <li>lows: List of price lows</li> <li>close: List of closing prices</li> <li>conversion_period: Period used to calculate the conversion line</li> <li>base_period: Period used to calculate the base line</li> <li>span_b_period: Period used to calculate the Span B line</li> </ul>"},{"location":"api/candle-indicators/#returns_4","title":"Returns","text":"<p>A list of tuples, each tuple contains (leading span a, leading span b, base line, conversion line, relevant close price)</p>"},{"location":"api/candle-indicators/#example_4","title":"Example","text":"<pre><code>from pytechnicalindicators import candle_indicators as ci\n\nhigh_prices = [\n    105.0, 103.0, 107.0, 101.0, 103.0, 100.0, 109.0, 105.0,\n    110.0, 112.0, 111.0, 105.0, 106.0, 100.0, 103.0, 102.0, 98.0\n]\nlow_prices = [\n    97.0, 99.0, 98.0, 100.0, 95.0, 98.0, 99.0, 100.0, 102.0, 106.0,\n    99.0, 101.0, 98.0, 93.0, 98.0, 91.0, 89.0\n]\nclosing_prices = [\n    100.0, 102.0, 103.0, 101.0, 99.0, 99.0, 102.0, 103.0, 106.0,\n    107.0, 105.0, 104.0, 101.0, 97.0, 100.0, 96.0, 93.0\n]\n\nicloud = ci.bulk.ichimoku_cloud(\n    high_prices,\n    low_prices,\n    closing_prices,\n    conversion_period=5,\n    base_period=10,\n    span_b_period=15\n)\n\nprint(f\"Bulk Ichimoku Cloud: {icloud}\")\n</code></pre> <p>Output</p> <pre><code>Bulk Ichimoku Cloud: [\n    (102.25, 102.5, 102.5, 102.0, 99.0), (100.0, 101.5, 101.5, 98.5, 102.0), (99.0, 100.5, 100.5, 97.5, 103.0)\n]\n</code></pre>"},{"location":"api/candle-indicators/#donchian_channels","title":"<code>donchian_channels</code>","text":"<pre><code>donchian_channels(\n    high: List[float],\n    low: List[float],\n    period: int\n) -&gt; List[Tuple[float, float, float]]\n</code></pre>"},{"location":"api/candle-indicators/#arguments_5","title":"Arguments","text":"<ul> <li>high: List of price highs</li> <li>low: List of price lows</li> <li>period: Period over which to calculate the Donchian channels</li> </ul>"},{"location":"api/candle-indicators/#returns_5","title":"Returns","text":"<p>List of Donchian channel tuples (lower, average, upper)</p>"},{"location":"api/candle-indicators/#example_5","title":"Example","text":"<pre><code>from pytechnicalindicators import candle_indicators as ci\n\nhigh_prices = [\n    105.0, 103.0, 107.0, 101.0, 103.0, 100.0, 109.0, 105.0,\n    110.0, 112.0, 111.0, 105.0, 106.0, 100.0, 103.0, 102.0, 98.0\n]\nlow_prices = [\n    97.0, 99.0, 98.0, 100.0, 95.0, 98.0, 99.0, 100.0, 102.0, 106.0,\n    99.0, 101.0, 98.0, 93.0, 98.0, 91.0, 89.0\n]\n\ndc = ci.bulk.donchian_channels(\n    high_prices,\n    low_prices,\n    period=5\n)\n\nprint(f\"Bulk Donchian Channels: {dc}\")\n</code></pre> <p>Output</p> <pre><code>Bulk Donchian Channels: [\n    (95.0, 101.0, 107.0), (95.0, 101.0, 107.0), (95.0, 102.0, 109.0), (95.0, 102.0, 109.0), \n    (95.0, 102.5, 110.0), (98.0, 105.0, 112.0), (99.0, 105.5, 112.0), (99.0, 105.5, 112.0), \n    (98.0, 105.0, 112.0), (93.0, 102.5, 112.0), (93.0, 102.0, 111.0), (91.0, 98.5, 106.0), \n    (89.0, 97.5, 106.0)\n]\n</code></pre>"},{"location":"api/candle-indicators/#keltner_channel","title":"<code>keltner_channel</code>","text":"<pre><code>keltner_channel(\n    high: List[float],\n    low: List[float],\n    close: List[float],\n    constant_model_type: str,\n    atr_constant_model_type: str,\n    multiplier: float,\n    period: int\n) -&gt; List[Tuple[float, float, float]]\n</code></pre>"},{"location":"api/candle-indicators/#arguments_6","title":"Arguments","text":"<ul> <li>highs: List of price highs</li> <li>lows: List of price lows</li> <li>close: List of closing prices</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>atr_constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>multiplier: Multiplier for the ATR</li> <li>period: Period over which to calculate the Keltner Channel</li> </ul>"},{"location":"api/candle-indicators/#returns_6","title":"Returns","text":"<p>List of Keltner channel tuples</p>"},{"location":"api/candle-indicators/#example_6","title":"Example","text":"<pre><code>from pytechnicalindicators import candle_indicators as ci\n\nhigh_prices = [\n    105.0, 103.0, 107.0, 101.0, 103.0, 100.0, 109.0, 105.0,\n    110.0, 112.0, 111.0, 105.0, 106.0, 100.0, 103.0, 102.0, 98.0\n]\nlow_prices = [\n    97.0, 99.0, 98.0, 100.0, 95.0, 98.0, 99.0, 100.0, 102.0, 106.0,\n    99.0, 101.0, 98.0, 93.0, 98.0, 91.0, 89.0\n]\nclosing_prices = [\n    100.0, 102.0, 103.0, 101.0, 99.0, 99.0, 102.0, 103.0, 106.0,\n    107.0, 105.0, 104.0, 101.0, 97.0, 100.0, 96.0, 93.0\n]\n\nkc = ci.bulk.keltner_channel(\n    high_prices,\n    low_prices,\n    closing_prices,\n    constant_model_type=\"simple_moving_average\",\n    atr_constant_model_type=\"simple_moving_average\",\n    multiplier=2.0,\n    period=10\n)\n\nprint(f\"Bulk Keltner Channel: {kc}\")\n</code></pre> <p>Output</p> <pre><code>Bulk Keltner Channel: [\n    (90.16666666666667, 102.36666666666667, 114.56666666666668),\n    (89.8, 102.8, 115.8), (90.0, 103.0, 116.0), \n    (90.10000000000002, 102.90000000000002, 115.70000000000002), \n    (88.5, 102.5, 116.5), \n    (89.23333333333332, 102.63333333333333, 116.03333333333333), \n    (87.16666666666666, 102.36666666666666, 117.56666666666666),\n    (86.36666666666667, 101.36666666666667, 116.36666666666667)\n]\n</code></pre>"},{"location":"api/candle-indicators/#supertrend","title":"<code>supertrend</code>","text":"<pre><code>supertrend(\n    high: List[float],\n    low: List[float],\n    close: List[float],\n    constant_model_type: str,\n    multiplier: float,\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/candle-indicators/#arguments_7","title":"Arguments","text":"<ul> <li>highs: List of price highs</li> <li>lows: List of price lows</li> <li>close: List of closing prices</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>multiplier: Multiplier for the ATR</li> <li>period: Period over which to calculate the Keltner Channel</li> </ul>"},{"location":"api/candle-indicators/#returns_7","title":"Returns","text":"<p>List of Super Trend indicators</p>"},{"location":"api/candle-indicators/#example_7","title":"Example","text":"<pre><code>from pytechnicalindicators import candle_indicators as ci\n\nhigh_prices = [\n    105.0, 103.0, 107.0, 101.0, 103.0, 100.0, 109.0, 105.0,\n    110.0, 112.0, 111.0, 105.0, 106.0, 100.0, 103.0, 102.0, 98.0\n]\nlow_prices = [\n    97.0, 99.0, 98.0, 100.0, 95.0, 98.0, 99.0, 100.0, 102.0, 106.0,\n    99.0, 101.0, 98.0, 93.0, 98.0, 91.0, 89.0\n]\nclosing_prices = [\n    100.0, 102.0, 103.0, 101.0, 99.0, 99.0, 102.0, 103.0, 106.0,\n    107.0, 105.0, 104.0, 101.0, 97.0, 100.0, 96.0, 93.0\n]\n\nsptrnd = ci.bulk.supertrend(\n    high_prices,\n    low_prices,\n    closing_prices,\n    constant_model_type=\"simple_moving_average\",\n    multiplier=2.0,\n    period=10\n)\n\nprint(f\"Bulk Supertend : {sptrnd}\")\n</code></pre> <p>Output</p> <pre><code>Bulk Supertend : [115.7, 116.5, 116.5, 116.3, 116.5, 115.9, 116.7, 115.5]\n</code></pre>"},{"location":"api/candle-indicators/#single-functions","title":"\ud83d\udfe2 Single Functions","text":"<p>Single functions compute a single value for the latest available data slice.</p>"},{"location":"api/candle-indicators/#moving_constant_envelopes_1","title":"<code>moving_constant_envelopes</code>","text":"<pre><code>moving_constant_envelopes(\n    prices: List[float],\n    constant_model_type: str,\n    difference: float\n) -&gt; Tuple[float, float, float]\n</code></pre>"},{"location":"api/candle-indicators/#arguments_8","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>difference: Percent band width (e.g., <code>3.0</code> for \u00b13%)</li> </ul>"},{"location":"api/candle-indicators/#returns_8","title":"Returns","text":"<p>Moving Constant Envelopes tuples (lower envelope, constant model result, upper envelope)</p>"},{"location":"api/candle-indicators/#example_8","title":"Example","text":"<pre><code>from pytechnicalindicators import candle_indicators as ci\n\nprices = [\n    100.0, 102.0, 103.0, 102.5, 102.8, 103.1, 103.8, 103.9,\n    104.4, 103.6, 103.1, 102.9, 103.3, 103.7\n]\n\nmce = ci.single.moving_constant_envelopes(\n    prices,\n    constant_model_type=\"simple_moving_average\",\n    difference=2.0,\n)\n\nprint(f\"Single Moving Constant Envelopes: {mce}\")\n</code></pre> <p>Output:</p> <pre><code>Single Moving Constant Envelopes: (100.94699999999999, 103.00714285714285, 105.06728571428572)\n</code></pre>"},{"location":"api/candle-indicators/#mcginley_dynamic_envelopes_1","title":"<code>mcginley_dynamic_envelopes</code>","text":"<pre><code>mcginley_dynamic_envelopes(\n    prices: List[float],\n    difference: float,\n    previous_mcginley_dynamic: float\n) -&gt; Tuple[float, float, float]\n</code></pre>"},{"location":"api/candle-indicators/#arguments_9","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>difference: Percent band width (e.g., <code>3.0</code> for \u00b13%)</li> <li>previous_mcginley_dynamic: Previous McGinley dynamic (use <code>0.0</code> if none)</li> </ul>"},{"location":"api/candle-indicators/#returns_9","title":"Returns","text":"<p>McGinley dynamic envelopes tuple (lower envelope, McGinley dynamic, upper envelope)</p>"},{"location":"api/candle-indicators/#example_9","title":"Example","text":"<pre><code>from pytechnicalindicators import candle_indicators as ci\n\nprices = [\n    100.0, 102.0, 103.0, 102.5, 102.8, 103.1, 103.8, 103.9,\n    104.4, 103.6, 103.1, 102.9, 103.3, 103.7\n]\n\nmde = ci.single.mcginley_dynamic_envelopes(\n    prices,\n    difference=2.0,\n    previous_mcginley_dynamic=0.0,\n)\n\nprint(f\"Single McGinley Dynamic Envelopes: {mde}\")\n</code></pre> <p>Output</p> <pre><code>Single McGinley Dynamic Envelopes: (101.626, 103.7, 105.774)\n</code></pre>"},{"location":"api/candle-indicators/#moving_constant_bands_1","title":"<code>moving_constant_bands</code>","text":"<pre><code>moving_constant_bands(\n    prices: List[float],\n    constant_model_type: str,\n    deviation_model: str,\n    deviation_multiplier: float\n) -&gt; Tuple[float, float, float]\n</code></pre>"},{"location":"api/candle-indicators/#arguments_10","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>deviation_model: Choice of:<ul> <li><code>\"standard_deviation\"</code></li> <li><code>\"mean_absolute_deviation\"</code></li> <li><code>\"median_absolute_deviation\"</code></li> <li><code>\"mode_absolute_deviation\"</code></li> <li><code>\"ulcer_index\"</code></li> </ul> </li> <li>deviation_multiplier: Price deviation multiplier</li> </ul>"},{"location":"api/candle-indicators/#returns_10","title":"Returns","text":"<p>Moving constant bands tuple (lower band, constant model result, upper band)</p>"},{"location":"api/candle-indicators/#example_10","title":"Example","text":"<pre><code>from pytechnicalindicators import candle_indicators as ci\n\nprices = [\n    100.0, 102.0, 103.0, 102.5, 102.8, 103.1, 103.8, 103.9,\n    104.4, 103.6, 103.1, 102.9, 103.3, 103.7\n]\n\nmcb = ci.single.moving_constant_bands(\n    prices,\n    constant_model_type=\"simple_moving_average\",\n    deviation_model=\"standard_deviation\",\n    deviation_multiplier=2.0,\n)\n\nprint(f\"Single Moving Constant Bands: {mcb}\")\n</code></pre> <p>Output</p> <pre><code>Single Moving Constant Bands: (100.95989482874084, 103.00714285714285, 105.05439088554486)\n</code></pre>"},{"location":"api/candle-indicators/#mcginley_dynamic_bands_1","title":"<code>mcginley_dynamic_bands</code>","text":"<pre><code>mcginley_dynamic_bands(\n    prices: List[float],\n    deviation_model: str,\n    deviation_multiplier: float,\n    previous_mcginley_dynamic: float\n) -&gt; Tuple[float, float, float]\n</code></pre>"},{"location":"api/candle-indicators/#arguments_11","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>deviation_model: Choice of:<ul> <li><code>\"standard_deviation\"</code></li> <li><code>\"mean_absolute_deviation\"</code></li> <li><code>\"median_absolute_deviation\"</code></li> <li><code>\"mode_absolute_deviation\"</code></li> <li><code>\"ulcer_index\"</code></li> </ul> </li> <li>deviation_multiplier: Price deviation multiplier</li> <li>previous_mcginley_dynamic: Previous McGinley dynamic (<code>0.0</code> if none)</li> </ul>"},{"location":"api/candle-indicators/#returns_11","title":"Returns","text":"<p>McGinley dynamic bands tuple (lower band, McGinley dynamic, upper band)</p>"},{"location":"api/candle-indicators/#example_11","title":"Example","text":"<pre><code>from pytechnicalindicators import candle_indicators as ci\n\nprices = [\n    100.0, 102.0, 103.0, 102.5, 102.8, 103.1, 103.8, 103.9,\n    104.4, 103.6, 103.1, 102.9, 103.3, 103.7\n]\n\nmdb = ci.single.mcginley_dynamic_bands(\n    prices,\n    deviation_model=\"standard_deviation\",\n    deviation_multiplier=2.0,\n    previous_mcginley_dynamic=0.0,\n)\n\nprint(f\"Single McGinley Dynamic Bands: {mdb}\")\n</code></pre> <p>Output</p> <pre><code>Single McGinley Dynamic Bands: (101.652751971598, 103.7, 105.74724802840201)\n</code></pre>"},{"location":"api/candle-indicators/#ichimoku_cloud_1","title":"<code>ichimoku_cloud</code>","text":"<pre><code>ichimoku_cloud(\n    highs: List[float],\n    lows: List[float],\n    close: List[float],\n    conversion_period: int,\n    base_period: int,\n    span_b_period: int\n) -&gt; Tuple[float, float, float, float, float]\n</code></pre>"},{"location":"api/candle-indicators/#arguments_12","title":"Arguments","text":"<ul> <li>highs: List of price highs</li> <li>lows: List of price lows</li> <li>close: List of closing prices</li> <li>conversion_period: Period used to calculate the conversion line</li> <li>base_period: Period used to calculate the base line</li> <li>span_b_period: Period used to calculate the Span B line</li> </ul>"},{"location":"api/candle-indicators/#returns_12","title":"Returns","text":"<p>(leading span a, leading span b, base line, conversion line, relevant close price)</p>"},{"location":"api/candle-indicators/#example_12","title":"Example","text":"<pre><code>from pytechnicalindicators import candle_indicators as ci\n\nhigh_prices = [\n    105.0, 103.0, 107.0, 101.0, 103.0, 100.0, 109.0, 105.0,\n    110.0, 112.0, 111.0, 105.0, 106.0, 100.0, 103.0, 102.0, 98.0\n]\nlow_prices = [\n    97.0, 99.0, 98.0, 100.0, 95.0, 98.0, 99.0, 100.0, 102.0, 106.0,\n    99.0, 101.0, 98.0, 93.0, 98.0, 91.0, 89.0\n]\nclosing_prices = [\n    100.0, 102.0, 103.0, 101.0, 99.0, 99.0, 102.0, 103.0, 106.0,\n    107.0, 105.0, 104.0, 101.0, 97.0, 100.0, 96.0, 93.0\n]\n\nicloud = ci.single.ichimoku_cloud(\n    high_prices,\n    low_prices,\n    closing_prices,\n    conversion_period=5,\n    base_period=10,\n    span_b_period=15\n)\n\nprint(f\"Single Ichimoku Cloud: {icloud}\")\n</code></pre> <p>Output</p> <pre><code>Single Ichimoku Cloud: (99.0, 100.5, 100.5, 97.5, 103.0)\n</code></pre>"},{"location":"api/candle-indicators/#donchian_channels_1","title":"<code>donchian_channels</code>","text":"<pre><code>donchian_channels(\n    high: List[float],\n    low: List[float]\n) -&gt; Tuple[float, float, float]\n</code></pre>"},{"location":"api/candle-indicators/#arguments_13","title":"Arguments","text":"<ul> <li>high: List of price highs</li> <li>low: List of price lows</li> </ul>"},{"location":"api/candle-indicators/#returns_13","title":"Returns","text":"<p>Donchian channel tuple (lower, average, upper)</p>"},{"location":"api/candle-indicators/#example_13","title":"Example","text":"<pre><code>from pytechnicalindicators import candle_indicators as ci\n\nhigh_prices = [\n    105.0, 103.0, 107.0, 101.0, 103.0, 100.0, 109.0, 105.0,\n    110.0, 112.0, 111.0, 105.0, 106.0, 100.0, 103.0, 102.0, 98.0\n]\nlow_prices = [\n    97.0, 99.0, 98.0, 100.0, 95.0, 98.0, 99.0, 100.0, 102.0, 106.0,\n    99.0, 101.0, 98.0, 93.0, 98.0, 91.0, 89.0\n]\n\ndc = ci.single.donchian_channels(\n    high_prices,\n    low_prices,\n)\n\nprint(f\"Single Donchian Channels: {dc}\")\n</code></pre> <p>Output</p> <pre><code>Single Donchian Channels: (89.0, 100.5, 112.0)\n</code></pre>"},{"location":"api/candle-indicators/#keltner_channel_1","title":"<code>keltner_channel</code>","text":"<pre><code>keltner_channel(\n    high: List[float],\n    low: List[float],\n    close: List[float],\n    constant_model_type: str,\n    atr_constant_model_type: str,\n    multiplier: float\n) -&gt; Tuple[float, float, float]\n</code></pre>"},{"location":"api/candle-indicators/#arguments_14","title":"Arguments","text":"<ul> <li>highs: List of price highs</li> <li>lows: List of price lows</li> <li>close: List of closing prices</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>atr_constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>multiplier: Multiplier for the ATR</li> </ul>"},{"location":"api/candle-indicators/#returns_14","title":"Returns","text":"<p>Keltner channel tuple</p>"},{"location":"api/candle-indicators/#example_14","title":"Example","text":"<pre><code>from pytechnicalindicators import candle_indicators as ci\n\nhigh_prices = [\n    105.0, 103.0, 107.0, 101.0, 103.0, 100.0, 109.0, 105.0,\n    110.0, 112.0, 111.0, 105.0, 106.0, 100.0, 103.0, 102.0, 98.0\n]\nlow_prices = [\n    97.0, 99.0, 98.0, 100.0, 95.0, 98.0, 99.0, 100.0, 102.0, 106.0,\n    99.0, 101.0, 98.0, 93.0, 98.0, 91.0, 89.0\n]\nclosing_prices = [\n    100.0, 102.0, 103.0, 101.0, 99.0, 99.0, 102.0, 103.0, 106.0,\n    107.0, 105.0, 104.0, 101.0, 97.0, 100.0, 96.0, 93.0\n]\n\nkc = ci.single.keltner_channel(\n    high_prices,\n    low_prices,\n    closing_prices,\n    constant_model_type=\"simple_moving_average\",\n    atr_constant_model_type=\"simple_moving_average\",\n    multiplier=2.0,\n)\n\nprint(f\"Single Keltner Channel: {kc}\")\n</code></pre> <p>Output</p> <pre><code>Single Keltner Channel: (87.4313725490196, 101.19607843137254, 114.96078431372548)\n</code></pre>"},{"location":"api/candle-indicators/#supertrend_1","title":"<code>supertrend</code>","text":"<pre><code>supertrend(\n    high: List[float],\n    low: List[float],\n    close: List[float],\n    constant_model_type: str,\n    multiplier: float\n) -&gt; float\n</code></pre>"},{"location":"api/candle-indicators/#arguments_15","title":"Arguments","text":"<ul> <li>highs: List of price highs</li> <li>lows: List of price lows</li> <li>close: List of closing prices</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>multiplier: Multiplier for the ATR</li> </ul>"},{"location":"api/candle-indicators/#returns_15","title":"Returns","text":"<p>List of Super Trend indicators</p>"},{"location":"api/candle-indicators/#example_15","title":"Example","text":"<pre><code>from pytechnicalindicators import candle_indicators as ci\n\nhigh_prices = [\n    105.0, 103.0, 107.0, 101.0, 103.0, 100.0, 109.0, 105.0,\n    110.0, 112.0, 111.0, 105.0, 106.0, 100.0, 103.0, 102.0, 98.0\n]\nlow_prices = [\n    97.0, 99.0, 98.0, 100.0, 95.0, 98.0, 99.0, 100.0, 102.0, 106.0,\n    99.0, 101.0, 98.0, 93.0, 98.0, 91.0, 89.0\n]\nclosing_prices = [\n    100.0, 102.0, 103.0, 101.0, 99.0, 99.0, 102.0, 103.0, 106.0,\n    107.0, 105.0, 104.0, 101.0, 97.0, 100.0, 96.0, 93.0\n]\n\nsptrnd = ci.single.supertrend(\n    high_prices,\n    low_prices,\n    closing_prices,\n    constant_model_type=\"simple_moving_average\",\n    multiplier=2.0,\n)\n\nprint(f\"Single Supertend : {sptrnd}\")\n</code></pre> <p>Output</p> <pre><code>Single Supertend : 114.26470588235294\n</code></pre>"},{"location":"api/candle-indicators/#model-type-choices","title":"\ud83e\udde9 Model Type Choices","text":"<p>Many functions accept model types as string arguments. constant_model_type: - <code>\"simple_moving_average\"</code> - <code>\"smoothed_moving_average\"</code> - <code>\"exponential_moving_average\"</code> - <code>\"simple_moving_median\"</code> - <code>\"simple_moving_mode\"</code></p> <p>deviation_model: - <code>\"standard_deviation\"</code> - <code>\"mean_absolute_deviation\"</code> - <code>\"median_absolute_deviation\"</code> - <code>\"mode_absolute_deviation\"</code> - <code>\"ulcer_index\"</code></p>"},{"location":"api/candle-indicators/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>All input lists must be of type <code>List[float]</code> (Python list of floats).</li> <li>Bulk functions require a <code>period</code> argument for window size.</li> <li>Some functions require previous values (<code>previous_mcginley_dynamic</code>).</li> </ul>"},{"location":"api/candle-indicators/#see-also","title":"\ud83d\udd17 See Also","text":"<ul> <li>API Reference</li> </ul>"},{"location":"api/chart-trends/","title":"\ud83d\udcc8 Chart Trends API Reference","text":"<p>Module: <code>chart_trends</code> </p> <p>The <code>chart_trends</code> module provides utilities for detecting, analyzing, and breaking down trends in price charts. These functions help identify overall direction, peaks, valleys, and trend segments in a time series.</p>"},{"location":"api/chart-trends/#when-to-use","title":"\ud83d\udcda When to Use","text":"<p>Use chart trend indicators to: - Decompose a price series into upward/downward trends - Find peaks and valleys for support/resistance analysis - Quantify the overall or local trend direction of an asset</p>"},{"location":"api/chart-trends/#structure","title":"\ud83c\udfd7\ufe0f Structure","text":"<p>Unlike other modules, <code>chart_trends</code> contains standalone functions that operate directly on price data without bulk/single subdivisions.</p>"},{"location":"api/chart-trends/#peaks","title":"<code>peaks</code>","text":"<pre><code>peaks(\n    prices: List[float],\n    period: int,\n    closest_neighbor: int\n) -&gt; List[Tuple[float, int]]\n</code></pre>"},{"location":"api/chart-trends/#arguments","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>period: Period over which to find peaks</li> <li>closest_neighbor: Minimum distance between peaks</li> </ul>"},{"location":"api/chart-trends/#returns","title":"Returns","text":"<p>List of tuples containing (peak value, peak index)</p>"},{"location":"api/chart-trends/#example","title":"Example","text":"<pre><code>from pytechnicalindicators import chart_trends as ct\n\nprices = [\n    100.0, 102.0, 108.0, 106.0, 104.0, 107.0, 112.0, 110.0,\n    109.0, 111.0, 115.0, 113.0, 108.0, 105.0, 102.0\n]\n\npeaks_result = ct.peaks(\n    prices,\n    period=3,\n    closest_neighbor=2\n)\n\nprint(f\"Peaks: {peaks_result}\")\n</code></pre> <p>Output:</p> <pre><code>Peaks: [(108.0, 2), (112.0, 6), (115.0, 10)]\n</code></pre>"},{"location":"api/chart-trends/#valleys","title":"<code>valleys</code>","text":"<pre><code>valleys(\n    prices: List[float],\n    period: int,\n    closest_neighbor: int\n) -&gt; List[Tuple[float, int]]\n</code></pre>"},{"location":"api/chart-trends/#arguments_1","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>period: Period over which to find valleys</li> <li>closest_neighbor: Minimum distance between valleys</li> </ul>"},{"location":"api/chart-trends/#returns_1","title":"Returns","text":"<p>List of tuples containing (valley value, valley index)</p>"},{"location":"api/chart-trends/#example_1","title":"Example","text":"<pre><code>from pytechnicalindicators import chart_trends as ct\n\nprices = [\n    100.0, 102.0, 108.0, 106.0, 104.0, 107.0, 112.0, 110.0,\n    109.0, 111.0, 115.0, 113.0, 108.0, 105.0, 102.0\n]\n\nvalleys_result = ct.valleys(\n    prices,\n    period=3,\n    closest_neighbor=2\n)\n\nprint(f\"Valleys: {valleys_result}\")\n</code></pre> <p>Output:</p> <pre><code>Valleys: [(100.0, 0), (102.0, 1), (104.0, 4), (109.0, 8), (102.0, 14)]\n</code></pre>"},{"location":"api/chart-trends/#peak_trend","title":"<code>peak_trend</code>","text":"<pre><code>peak_trend(\n    prices: List[float],\n    period: int\n) -&gt; Tuple[float, float]\n</code></pre>"},{"location":"api/chart-trends/#arguments_2","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>period: Period over which to calculate the peaks</li> </ul>"},{"location":"api/chart-trends/#returns_2","title":"Returns","text":"<p>Tuple containing (slope, intercept) of the peak trend line</p>"},{"location":"api/chart-trends/#example_2","title":"Example","text":"<pre><code>from pytechnicalindicators import chart_trends as ct\n\nprices = [\n    100.0, 102.0, 108.0, 106.0, 104.0, 107.0, 112.0, 110.0,\n    109.0, 111.0, 115.0, 113.0, 108.0, 105.0, 102.0\n]\n\npeak_trend_result = ct.peak_trend(\n    prices,\n    period=3\n)\n\nprint(f\"Peak Trend (slope, intercept): {peak_trend_result}\")\n</code></pre> <p>Output:</p> <pre><code>Peak Trend (slope, intercept): (0.875, 106.41666666666667)\n</code></pre>"},{"location":"api/chart-trends/#valley_trend","title":"<code>valley_trend</code>","text":"<pre><code>valley_trend(\n    prices: List[float],\n    period: int\n) -&gt; Tuple[float, float]\n</code></pre>"},{"location":"api/chart-trends/#arguments_3","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>period: Period over which to calculate the valleys</li> </ul>"},{"location":"api/chart-trends/#returns_3","title":"Returns","text":"<p>Tuple containing (slope, intercept) of the valley trend line</p>"},{"location":"api/chart-trends/#example_3","title":"Example","text":"<pre><code>from pytechnicalindicators import chart_trends as ct\n\nprices = [\n    100.0, 102.0, 108.0, 106.0, 104.0, 107.0, 112.0, 110.0,\n    109.0, 111.0, 115.0, 113.0, 108.0, 105.0, 102.0\n]\n\nvalley_trend_result = ct.valley_trend(\n    prices,\n    period=3\n)\n\nprint(f\"Valley Trend (slope, intercept): {valley_trend_result}\")\n</code></pre> <p>Output:</p> <pre><code>Valley Trend (slope, intercept): (0.1996951219512195, 102.32164634146342)\n</code></pre>"},{"location":"api/chart-trends/#overall_trend","title":"<code>overall_trend</code>","text":"<pre><code>overall_trend(\n    prices: List[float]\n) -&gt; Tuple[float, float]\n</code></pre>"},{"location":"api/chart-trends/#arguments_4","title":"Arguments","text":"<ul> <li>prices: List of prices</li> </ul>"},{"location":"api/chart-trends/#returns_4","title":"Returns","text":"<p>Tuple containing (slope, intercept) of the overall trend line</p>"},{"location":"api/chart-trends/#example_4","title":"Example","text":"<pre><code>from pytechnicalindicators import chart_trends as ct\n\nprices = [\n    100.0, 102.0, 108.0, 106.0, 104.0, 107.0, 112.0, 110.0,\n    109.0, 111.0, 115.0, 113.0, 108.0, 105.0, 102.0\n]\n\noverall_trend_result = ct.overall_trend(prices)\n\nprint(f\"Overall Trend (slope, intercept): {overall_trend_result}\")\n</code></pre> <p>Output:</p> <pre><code>Overall Trend (slope, intercept): (0.35, 105.01666666666667)\n</code></pre>"},{"location":"api/chart-trends/#break_down_trends","title":"<code>break_down_trends</code>","text":"<pre><code>break_down_trends(\n    prices: List[float],\n    max_outliers: int,\n    soft_r_squared_minimum: float,\n    soft_r_squared_maximum: float,\n    hard_r_squared_minimum: float,\n    hard_r_squared_maximum: float,\n    soft_standard_error_multiplier: float,\n    hard_standard_error_multiplier: float,\n    soft_reduced_chi_squared_multiplier: float,\n    hard_reduced_chi_squared_multiplier: float\n) -&gt; List[Tuple[int, int, float, float]]\n</code></pre>"},{"location":"api/chart-trends/#arguments_5","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>max_outliers: Allowed consecutive trend-breaks before splitting</li> <li>soft_r_squared_minimum: Soft minimum value for R\u00b2</li> <li>soft_r_squared_maximum: Soft maximum value for R\u00b2</li> <li>hard_r_squared_minimum: Hard minimum value for R\u00b2</li> <li>hard_r_squared_maximum: Hard maximum value for R\u00b2</li> <li>soft_standard_error_multiplier: Soft standard error multiplier</li> <li>hard_standard_error_multiplier: Hard standard error multiplier</li> <li>soft_reduced_chi_squared_multiplier: Soft chi squared multiplier</li> <li>hard_reduced_chi_squared_multiplier: Hard chi squared multiplier</li> </ul>"},{"location":"api/chart-trends/#returns_5","title":"Returns","text":"<p>List of tuples containing (start index, end index, slope, intercept) for each trend segment</p>"},{"location":"api/chart-trends/#example_5","title":"Example","text":"<pre><code>from pytechnicalindicators import chart_trends as ct\n\nprices = [\n    100.0, 102.0, 108.0, 106.0, 104.0, 107.0, 112.0, 110.0,\n    109.0, 111.0, 115.0, 113.0, 108.0, 105.0, 102.0, 98.0,\n    95.0, 93.0, 91.0, 89.0\n]\n\ntrends = ct.break_down_trends(\n    prices,\n    max_outliers=2,\n    soft_r_squared_minimum=0.7,\n    soft_r_squared_maximum=0.95,\n    hard_r_squared_minimum=0.5,\n    hard_r_squared_maximum=0.99,\n    soft_standard_error_multiplier=1.5,\n    hard_standard_error_multiplier=2.0,\n    soft_reduced_chi_squared_multiplier=1.2,\n    hard_reduced_chi_squared_multiplier=2.5\n)\n\nprint(f\"Trend Segments: {trends}\")\n</code></pre> <p>Output:</p> <pre><code>Trend Segments: [\n    (0, 2, 4.0, 99.33333333333333), (2, 5, -0.5, 108.0), \n    (5, 11, 0.9316770186335402, 103.70186335403727), (11, 14, -3.6, 152.0)\n]\n</code></pre>"},{"location":"api/chart-trends/#usage-tips","title":"\ud83d\udca1 Usage Tips","text":""},{"location":"api/chart-trends/#peak-and-valley-detection","title":"Peak and Valley Detection","text":"<ul> <li>period: Controls the local window for peak/valley detection. Larger values find more significant peaks/valleys.</li> <li>closest_neighbor: Prevents detecting peaks/valleys too close together. Use to filter noise.</li> </ul>"},{"location":"api/chart-trends/#trend-line-analysis","title":"Trend Line Analysis","text":"<ul> <li>Use <code>peak_trend()</code> and <code>valley_trend()</code> to identify resistance and support trend lines.</li> <li><code>overall_trend()</code> gives the general direction of the entire price series.</li> </ul>"},{"location":"api/chart-trends/#advanced-trend-decomposition","title":"Advanced Trend Decomposition","text":"<p>The <code>break_down_trends()</code> function uses sophisticated statistical criteria: - R\u00b2 values: Measure how well the trend line fits the data - Standard error multipliers: Control sensitivity to deviations from the trend - Chi-squared multipliers: Statistical tests for goodness of fit - Soft vs Hard limits: Soft limits are preferred, hard limits are absolute boundaries</p>"},{"location":"api/chart-trends/#parameter-guidelines","title":"Parameter Guidelines","text":"<pre><code># Conservative settings (fewer, more reliable trends)\nmax_outliers=3\nsoft_r_squared_minimum=0.8\nhard_r_squared_minimum=0.6\n\n# Aggressive settings (more trend segments, higher sensitivity)\nmax_outliers=1\nsoft_r_squared_minimum=0.6\nhard_r_squared_minimum=0.4\n</code></pre>"},{"location":"api/chart-trends/#interpreting-results","title":"\ud83d\udcca Interpreting Results","text":""},{"location":"api/chart-trends/#slope-interpretation","title":"Slope Interpretation","text":"<ul> <li>Positive slope: Upward trend</li> <li>Negative slope: Downward trend</li> <li>Slope magnitude: Rate of change (steeper = faster price movement)</li> </ul>"},{"location":"api/chart-trends/#index-values","title":"Index Values","text":"<ul> <li>All index values refer to positions in the original price array</li> <li>Use these to map trends back to time periods in your data</li> </ul>"},{"location":"api/chart-trends/#use-cases","title":"\ud83d\udd17 Use Cases","text":"<ol> <li>Support/Resistance Analysis: Use <code>peaks()</code> and <code>valleys()</code> to identify key price levels</li> <li>Trend Following: Use <code>overall_trend()</code> to determine market direction</li> <li>Trend Change Detection: Use <code>break_down_trends()</code> to identify trend reversals</li> <li>Technical Analysis: Combine with candle indicators for comprehensive analysis</li> </ol>"},{"location":"api/chart-trends/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>All input lists must be of type <code>List[float]</code> (Python list of floats)</li> <li>Functions return exact indices from the input array</li> <li>Peak/valley detection requires sufficient data points relative to the period</li> <li>Trend decomposition works best with longer price series (20+ data points)</li> </ul>"},{"location":"api/chart-trends/#see-also","title":"\ud83d\udd17 See Also","text":"<ul> <li>API Reference</li> </ul>"},{"location":"api/correlation-indicators/","title":"\ud83d\udd17 Correlation Indicators API Reference","text":"<p>Module: <code>correlation_indicators</code> </p> <p>The <code>correlation_indicators</code> module provides functions to measure the co-movement and statistical relationship between two different price series or assets.</p>"},{"location":"api/correlation-indicators/#when-to-use","title":"\ud83d\udcda When to Use","text":"<p>Use correlation indicators when you want to: - Quantify how closely two assets move together - Assess diversification or hedging effectiveness - Explore relationships between assets</p>"},{"location":"api/correlation-indicators/#structure","title":"\ud83c\udfd7\ufe0f Structure","text":"<ul> <li>single: Functions that return a single value for a slice of prices.</li> <li>bulk: Functions that compute values of a slice of prices over a period and return a vector.</li> </ul>"},{"location":"api/correlation-indicators/#bulk-functions","title":"\ud83d\ude80 Bulk Functions","text":"<p>Bulk functions operate over a moving window and return a list of correlation values for the entire data series.</p>"},{"location":"api/correlation-indicators/#correlate_asset_prices","title":"<code>correlate_asset_prices</code>","text":"<pre><code>correlate_asset_prices(\n    prices_asset_a: List[float],\n    prices_asset_b: List[float],\n    constant_model_type: str,\n    deviation_model: str,\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/correlation-indicators/#arguments","title":"Arguments","text":"<ul> <li>prices_asset_a: List of prices for asset A</li> <li>prices_asset_b: List of prices for asset B</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>deviation_model: Choice of:<ul> <li><code>\"standard_deviation\"</code></li> <li><code>\"mean_absolute_deviation\"</code></li> <li><code>\"median_absolute_deviation\"</code></li> <li><code>\"mode_absolute_deviation\"</code></li> <li><code>\"ulcer_index\"</code></li> </ul> </li> <li>period: Period over which to calculate the correlation</li> </ul>"},{"location":"api/correlation-indicators/#returns","title":"Returns","text":"<p>List of correlations for each period</p>"},{"location":"api/correlation-indicators/#example","title":"Example","text":"<pre><code>from pytechnicalindicators import correlation_indicators as ci\n\nprices_asset_a = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nprices_asset_b = [\n    50.0, 51.0, 52.5, 51.5, 53.0, 54.0, 53.5, 55.0,\n    56.0, 55.5, 56.5, 57.0, 58.0, 57.5, 58.5\n]\n\ncorrelations = ci.bulk.correlate_asset_prices(\n    prices_asset_a,\n    prices_asset_b,\n    constant_model_type=\"simple_moving_average\",\n    deviation_model=\"standard_deviation\",\n    period=5\n)\n\nprint(f\"Bulk Correlations: {correlations}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Correlations: [\n    1.0, 1.0, 1.0, 1.0, 1.0, 0.9025419790150205, 0.8806955667454326, 0.7999999999999998, \n    0.9299811099505544, 0.9299811099505544, 0.7999999999999998\n]\n</code></pre>"},{"location":"api/correlation-indicators/#single-functions","title":"\ud83d\udfe2 Single Functions","text":"<p>Single functions compute a single correlation value for the entire dataset.</p>"},{"location":"api/correlation-indicators/#correlate_asset_prices_1","title":"<code>correlate_asset_prices</code>","text":"<pre><code>correlate_asset_prices(\n    prices_asset_a: List[float],\n    prices_asset_b: List[float],\n    constant_model_type: str,\n    deviation_model: str\n) -&gt; float\n</code></pre>"},{"location":"api/correlation-indicators/#arguments_1","title":"Arguments","text":"<ul> <li>prices_asset_a: List of prices for asset A</li> <li>prices_asset_b: List of prices for asset B</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>deviation_model: Choice of:<ul> <li><code>\"standard_deviation\"</code></li> <li><code>\"mean_absolute_deviation\"</code></li> <li><code>\"median_absolute_deviation\"</code></li> <li><code>\"mode_absolute_deviation\"</code></li> <li><code>\"ulcer_index\"</code></li> </ul> </li> </ul>"},{"location":"api/correlation-indicators/#returns_1","title":"Returns","text":"<p>Correlation between the two asset price series</p>"},{"location":"api/correlation-indicators/#example_1","title":"Example","text":"<pre><code>from pytechnicalindicators import correlation_indicators as ci\n\nprices_asset_a = [ \n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nprices_asset_b = [ \n    50.0, 51.0, 52.5, 51.5, 53.0, 54.0, 53.5, 55.0,\n    56.0, 55.5, 56.5, 57.0, 58.0, 57.5, 58.5\n]\n\ncorrelation = ci.single.correlate_asset_prices(\n    prices_asset_a,\n    prices_asset_b,\n    constant_model_type=\"simple_moving_average\",\n    deviation_model=\"standard_deviation\"\n)\n\nprint(f\"Single Correlation: {correlation}\")\n</code></pre> <p>Output:</p> <pre><code>Single Correlation: 0.985299794588134\n</code></pre>"},{"location":"api/correlation-indicators/#understanding-correlation-values","title":"\ud83d\udca1 Understanding Correlation Values","text":""},{"location":"api/correlation-indicators/#correlation-range","title":"Correlation Range","text":"<ul> <li>+1.0: Perfect positive correlation (assets move exactly together)</li> <li>+0.7 to +1.0: Strong positive correlation</li> <li>+0.3 to +0.7: Moderate positive correlation</li> <li>-0.3 to +0.3: Weak or no correlation</li> <li>-0.7 to -0.3: Moderate negative correlation</li> <li>-1.0 to -0.7: Strong negative correlation</li> <li>-1.0: Perfect negative correlation (assets move in exact opposite directions)</li> </ul> <p>Using different deviation models can impact the range to go beyond +/-1</p>"},{"location":"api/correlation-indicators/#model-selection-guidelines","title":"\ud83d\udd27 Model Selection Guidelines","text":""},{"location":"api/correlation-indicators/#constant-model-types","title":"Constant Model Types","text":"<ul> <li>simple_moving_average: Best for stable, trending markets</li> <li>exponential_moving_average: More responsive to recent price changes</li> <li>simple_moving_median: Robust against outliers</li> <li>smoothed_moving_average: Reduces noise in volatile markets</li> <li>simple_moving_mode: Useful for identifying recurring price levels</li> </ul>"},{"location":"api/correlation-indicators/#deviation-models","title":"Deviation Models","text":"<ul> <li>standard_deviation: Most common choice for normal market conditions</li> <li>mean_absolute_deviation: Less sensitive to extreme outliers</li> <li>median_absolute_deviation: Very robust against outliers</li> <li>ulcer_index: Focuses on downside risk correlation</li> </ul>"},{"location":"api/correlation-indicators/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>Both price series must have the same length</li> <li>All input lists must be of type <code>List[float]</code> (Python list of floats)</li> <li>Bulk functions require sufficient data points relative to the period</li> <li>Consider market conditions when interpreting correlation values</li> <li>Correlation does not imply causation</li> </ul>"},{"location":"api/correlation-indicators/#important-considerations","title":"\u26a0\ufe0f Important Considerations","text":"<ol> <li>Data Length: Ensure both asset price series have the same number of data points</li> <li>Market Regimes: Correlations can change dramatically during market stress</li> <li>Time Alignment: Make sure price data is properly time-aligned between assets</li> <li>Statistical Significance: Longer time series provide more reliable correlation estimates</li> <li>Non-Linear Relationships: Correlation only measures linear relationships</li> </ol>"},{"location":"api/correlation-indicators/#see-also","title":"\ud83d\udd17 See Also","text":"<ul> <li>API Reference Index</li> </ul>"},{"location":"api/momentum-indicators/","title":"\u26a1 Momentum Indicators API Reference","text":"<p>Module: <code>momentum_indicators</code> </p> <p>The <code>momentum_indicators</code> module provides functions to measure the speed, strength, and direction of price movements in time series data.</p> <p>These indicators are commonly used to identify overbought/oversold conditions, trend continuation, or potential reversals.</p>"},{"location":"api/momentum-indicators/#when-to-use","title":"\ud83d\udcda When to Use","text":"<p>Use momentum indicators to: - Gauge the strength and velocity of price trends - Identify bullish or bearish momentum - Spot early signals for possible price reversals or continuations</p>"},{"location":"api/momentum-indicators/#structure","title":"\ud83c\udfd7\ufe0f Structure","text":"<ul> <li>single: Functions that return a single value for a slice of prices.</li> <li>bulk: Functions that compute values of a slice of prices over a period and return a vector.</li> </ul>"},{"location":"api/momentum-indicators/#bulk-functions","title":"\ud83d\ude80 Bulk Functions","text":""},{"location":"api/momentum-indicators/#relative_strength_index","title":"<code>relative_strength_index</code>","text":"<pre><code>relative_strength_index(\n    prices: List[float],\n    constant_model_type: str,\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/momentum-indicators/#arguments","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>period: Period over which to calculate the RSI</li> </ul>"},{"location":"api/momentum-indicators/#returns","title":"Returns","text":"<p>List of Relative Strength Index values</p>"},{"location":"api/momentum-indicators/#example","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nrsi = mi.bulk.relative_strength_index(\n    prices,\n    constant_model_type=\"simple_moving_average\",\n    period=5\n)\n\nprint(f\"Bulk RSI: {rsi}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk RSI: [\n    57.14285714285714, 57.14285714285714, 62.50000000000001, 72.72727272727272, \n    70.0, 55.55555555555556, 43.75, 39.99999999999999, 39.99999999999999, \n    39.99999999999999, 39.99999999999999\n]\n</code></pre>"},{"location":"api/momentum-indicators/#stochastic_oscillator","title":"<code>stochastic_oscillator</code>","text":"<pre><code>stochastic_oscillator(\n    prices: List[float],\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_1","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>period: Period over which to calculate the stochastic oscillator</li> </ul>"},{"location":"api/momentum-indicators/#returns_1","title":"Returns","text":"<p>List of Stochastic Oscillator values</p>"},{"location":"api/momentum-indicators/#example_1","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nstoch = mi.bulk.stochastic_oscillator(\n    prices,\n    period=5\n)\n\nprint(f\"Bulk Stochastic Oscillator: {stoch}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Stochastic Oscillator: [100.0, 100.0, 80.0, 100.0, 100.0, 40.0, 80.0, 100.0, 100.0, 50.0, 75.0]\n</code></pre>"},{"location":"api/momentum-indicators/#slow_stochastic","title":"<code>slow_stochastic</code>","text":"<pre><code>slow_stochastic(\n    stochastics: List[float],\n    constant_model_type: str,\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_2","title":"Arguments","text":"<ul> <li>stochastics: List of stochastic values</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>period: Period over which to calculate the slow stochastic</li> </ul>"},{"location":"api/momentum-indicators/#returns_2","title":"Returns","text":"<p>List of Slow Stochastic values</p>"},{"location":"api/momentum-indicators/#example_2","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nstochastics = [\n    80.0, 75.0, 70.0, 72.0, 68.0, 65.0, 70.0, 73.0,\n    75.0, 78.0, 80.0, 77.0, 74.0, 76.0, 79.0\n]\n\nslow_stoch = mi.bulk.slow_stochastic(\n    stochastics,\n    constant_model_type=\"simple_moving_average\",\n    period=5\n)\n\nprint(f\"Bulk Slow Stochastic: {slow_stoch}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Slow Stochastic: [73.0, 70.0, 69.0, 69.6, 70.2, 72.2, 75.2, 76.6, 76.8, 77.0, 77.2]\n</code></pre>"},{"location":"api/momentum-indicators/#slowest_stochastic","title":"<code>slowest_stochastic</code>","text":"<pre><code>slowest_stochastic(\n    slow_stochastics: List[float],\n    constant_model_type: str,\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_3","title":"Arguments","text":"<ul> <li>slow_stochastics: List of slow stochastic values</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>period: Period over which to calculate the slowest stochastic</li> </ul>"},{"location":"api/momentum-indicators/#returns_3","title":"Returns","text":"<p>List of Slowest Stochastic values</p>"},{"location":"api/momentum-indicators/#example_3","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nslow_stochastics = [\n    73.0, 70.0, 69.0, 69.6, 70.2, 72.2, 75.2, 76.6, 76.8, 77.0, 77.2\n]\n\nslowest_stoch = mi.bulk.slowest_stochastic(\n    slow_stochastics,\n    constant_model_type=\"simple_moving_average\",\n    period=5\n)\n\nprint(f\"Bulk Slowest Stochastic: {slowest_stoch}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Slowest Stochastic: [70.36, 70.2, 71.24, 72.75999999999999, 74.20000000000002, 75.56, 76.56]\n</code></pre>"},{"location":"api/momentum-indicators/#williams_percent_r","title":"<code>williams_percent_r</code>","text":"<pre><code>williams_percent_r(\n    high: List[float],\n    low: List[float],\n    close: List[float],\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_4","title":"Arguments","text":"<ul> <li>high: List of high prices</li> <li>low: List of low prices</li> <li>close: List of closing prices</li> <li>period: Period over which to calculate Williams %R</li> </ul>"},{"location":"api/momentum-indicators/#returns_4","title":"Returns","text":"<p>List of Williams %R values</p>"},{"location":"api/momentum-indicators/#example_4","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nhigh_prices = [\n    105.0, 107.0, 110.0, 108.0, 111.0, 113.0, 112.0, 115.0,\n    117.0, 114.0, 116.0, 118.0, 120.0, 117.0, 119.0\n]\nlow_prices = [\n    95.0, 97.0, 100.0, 98.0, 101.0, 103.0, 102.0, 105.0,\n    107.0, 104.0, 106.0, 108.0, 110.0, 107.0, 109.0\n]\nclose_prices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nwilliams_r = mi.bulk.williams_percent_r(\n    high_prices,\n    low_prices,\n    close_prices,\n    period=5\n)\n\nprint(f\"Bulk Williams %R: {williams_r}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Williams %R: [\n    -31.25, -31.25, -40.0, -29.411764705882355, -31.25, -53.333333333333336, -40.0, \n    -35.714285714285715, -31.25, -50.0, -42.857142857142854\n]\n</code></pre>"},{"location":"api/momentum-indicators/#money_flow_index","title":"<code>money_flow_index</code>","text":"<pre><code>money_flow_index(\n    prices: List[float],\n    volume: List[float],\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_5","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>volume: List of volumes</li> <li>period: Period over which to calculate the MFI</li> </ul>"},{"location":"api/momentum-indicators/#returns_5","title":"Returns","text":"<p>List of Money Flow Index values</p>"},{"location":"api/momentum-indicators/#example_5","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\nvolume = [\n    1000, 1200, 1500, 1100, 1300, 1400, 1250, 1600,\n    1800, 1350, 1450, 1550, 1700, 1400, 1500\n]\n\nmfi = mi.bulk.money_flow_index(\n    prices,\n    volume,\n    period=5\n)\n\nprint(f\"Bulk Money Flow Index: {mfi}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Money Flow Index: [\n    78.66290018832392, 79.76062879599857, 53.912881261076386, 77.66179540709813, \n    79.8128443136367, 57.34244495064541, 78.54017792037334, 78.51354311163028, \n    78.32044198895028, 77.22254503195816, 77.55028992769704\n]\n</code></pre>"},{"location":"api/momentum-indicators/#rate_of_change","title":"<code>rate_of_change</code>","text":"<pre><code>rate_of_change(\n    prices: List[float]\n) -&gt; List[float]\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_6","title":"Arguments","text":"<ul> <li>prices: List of prices</li> </ul>"},{"location":"api/momentum-indicators/#returns_6","title":"Returns","text":"<p>List of Rate of Change values</p>"},{"location":"api/momentum-indicators/#example_6","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nroc = mi.bulk.rate_of_change(prices)\n\nprint(f\"Bulk Rate of Change: {roc}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Rate of Change: [\n    2.0, 2.941176470588235, -1.9047619047619049, 2.912621359223301, 1.8867924528301887, \n    -0.9259259259259258, 2.803738317757009, 1.8181818181818181, -2.6785714285714284, \n    1.834862385321101, 1.8018018018018018, 1.7699115044247788, -2.608695652173913,\n    1.7857142857142856\n]\n</code></pre>"},{"location":"api/momentum-indicators/#on_balance_volume","title":"<code>on_balance_volume</code>","text":"<pre><code>on_balance_volume(\n    prices: List[float],\n    volume: List[float],\n    previous_on_balance_volume: float\n) -&gt; List[float]\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_7","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>volume: List of volumes</li> <li>previous_on_balance_volume: Previous OBV value (use 0.0 if none)</li> </ul>"},{"location":"api/momentum-indicators/#returns_7","title":"Returns","text":"<p>List of On Balance Volume values</p>"},{"location":"api/momentum-indicators/#example_7","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\nvolume = [\n    1000, 1200, 1500, 1100, 1300, 1400, 1250, 1600,\n    1800, 1350, 1450, 1550, 1700, 1400, 1500\n]\n\nobv = mi.bulk.on_balance_volume(\n    prices,\n    volume,\n    previous_on_balance_volume=0.0\n)\n\nprint(f\"Bulk On Balance Volume: {obv}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk On Balance Volume: [\n    1200.0, 2700.0, 1600.0, 2900.0, 4300.0, 3050.0, 4650.0, 6450.0, \n    5100.0, 6550.0, 8100.0, 9800.0, 8400.0, 9900.0\n]\n</code></pre>"},{"location":"api/momentum-indicators/#commodity_channel_index","title":"<code>commodity_channel_index</code>","text":"<pre><code>commodity_channel_index(\n    prices: List[float],\n    constant_model_type: str,\n    deviation_model: str,\n    constant_multiplier: float,\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_8","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>deviation_model: Choice of:<ul> <li><code>\"standard_deviation\"</code></li> <li><code>\"mean_absolute_deviation\"</code></li> <li><code>\"median_absolute_deviation\"</code></li> <li><code>\"mode_absolute_deviation\"</code></li> <li><code>\"ulcer_index\"</code></li> </ul> </li> <li>constant_multiplier: Scale factor (normally 0.015)</li> <li>period: Period over which to calculate the CCI</li> </ul>"},{"location":"api/momentum-indicators/#returns_8","title":"Returns","text":"<p>List of Commodity Channel Index values</p>"},{"location":"api/momentum-indicators/#example_8","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\ncci = mi.bulk.commodity_channel_index(\n    prices,\n    constant_model_type=\"simple_moving_average\",\n    deviation_model=\"standard_deviation\",\n    constant_multiplier=0.015,\n    period=5\n)\n\nprint(f\"Bulk Commodity Channel Index: {cci}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Commodity Channel Index: [\n    87.4146757476247, 99.90248656871412, 46.49905549752783, 92.14596539534516, \n    105.22735830032957, -7.749842582921396, 46.49905549752783, 94.28090415820633, \n    100.0, 0.0, 47.14045207910316\n]\n</code></pre>"},{"location":"api/momentum-indicators/#mcginley_dynamic_commodity_channel_index","title":"<code>mcginley_dynamic_commodity_channel_index</code>","text":"<pre><code>mcginley_dynamic_commodity_channel_index(\n    prices: List[float],\n    previous_mcginley_dynamic: float,\n    deviation_model: str,\n    constant_multiplier: float,\n    period: int\n) -&gt; List[Tuple[float, float]]\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_9","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>previous_mcginley_dynamic: Previous McGinley dynamic (0.0 if none)</li> <li>deviation_model: Choice of:<ul> <li><code>\"standard_deviation\"</code></li> <li><code>\"mean_absolute_deviation\"</code></li> <li><code>\"median_absolute_deviation\"</code></li> <li><code>\"mode_absolute_deviation\"</code></li> <li><code>\"ulcer_index\"</code></li> </ul> </li> <li>constant_multiplier: Scale factor (normally 0.015)</li> <li>period: Period over which to calculate the CCI</li> </ul>"},{"location":"api/momentum-indicators/#returns_9","title":"Returns","text":"<p>List of tuples with (Commodity Channel Index, McGinley Dynamic)</p>"},{"location":"api/momentum-indicators/#example_9","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nmd_cci = mi.bulk.mcginley_dynamic_commodity_channel_index(\n    prices,\n    previous_mcginley_dynamic=0.0,\n    deviation_model=\"standard_deviation\",\n    constant_multiplier=0.015,\n    period=5\n)\n\nprint(f\"Bulk McGinley Dynamic CCI: {md_cci}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk McGinley Dynamic CCI: [\n    (0.0, 106.0), (50.850886978780416, 106.37118330162708), (19.606471661011987, 106.49401626029876), \n    (83.21929522843516, 107.11000103381146), (126.02325345778948, 107.92806406359112), \n    (33.551336476526465, 108.13414147145478), (91.04621305102224, 108.65037258300794), \n    (169.99349322038103, 109.39389344558838), (156.2681314408503, 110.31195605677449),\n    (45.67777102116869, 110.62966686936494), (130.69756142487142, 111.22748604095784)\n]\n</code></pre>"},{"location":"api/momentum-indicators/#macd_line","title":"<code>macd_line</code>","text":"<pre><code>macd_line(\n    prices: List[float],\n    short_period: int,\n    short_period_model: str,\n    long_period: int,\n    long_period_model: str\n) -&gt; List[float]\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_10","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>short_period: Length of the short period</li> <li>short_period_model: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>long_period: Length of the long period</li> <li>long_period_model: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> </ul>"},{"location":"api/momentum-indicators/#returns_10","title":"Returns","text":"<p>List of MACD line values</p>"},{"location":"api/momentum-indicators/#example_10","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nmacd = mi.bulk.macd_line(\n    prices,\n    short_period=5,\n    short_period_model=\"exponential_moving_average\",\n    long_period=10,\n    long_period_model=\"exponential_moving_average\"\n)\n\nprint(f\"Bulk MACD Line: {macd}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk MACD Line: [\n    1.724347544444484, 1.4586781725636513, 1.6040869889352223, \n    1.8185082303110107, 1.0980111584955239, 1.1377855745084275\n]\n</code></pre>"},{"location":"api/momentum-indicators/#signal_line","title":"<code>signal_line</code>","text":"<pre><code>signal_line(\n    macds: List[float],\n    constant_model_type: str,\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_11","title":"Arguments","text":"<ul> <li>macds: List of MACD values</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>period: Period over which to calculate the signal line</li> </ul>"},{"location":"api/momentum-indicators/#returns_11","title":"Returns","text":"<p>List of Signal line values</p>"},{"location":"api/momentum-indicators/#example_11","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nmacds = [\n    -0.5, -0.3, 0.1, 0.4, 0.2, 0.6, 0.8, 0.5,\n    0.3, 0.7, 0.9, 1.1, 0.8, 0.6, 1.0\n]\n\nsignal = mi.bulk.signal_line(\n    macds,\n    constant_model_type=\"exponential_moving_average\",\n    period=9\n)\n\nprint(f\"Bulk Signal Line: {signal}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Signal Line: [\n    0.37228892577740375, 0.4750370938526215, 0.597235628312796, 0.728793463675819, \n    0.755436755350888, 0.7367513886909434, 0.8018030953629876\n]\n</code></pre>"},{"location":"api/momentum-indicators/#mcginley_dynamic_macd_line","title":"<code>mcginley_dynamic_macd_line</code>","text":"<pre><code>mcginley_dynamic_macd_line(\n    prices: List[float],\n    short_period: int,\n    previous_short_mcginley: float,\n    long_period: int,\n    previous_long_mcginley: float\n) -&gt; List[Tuple[float, float, float]]\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_12","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>short_period: Length of the short period</li> <li>previous_short_mcginley: Previous short McGinley dynamic (0.0 if none)</li> <li>long_period: Length of the long period</li> <li>previous_long_mcginley: Previous long McGinley dynamic (0.0 if none)</li> </ul>"},{"location":"api/momentum-indicators/#returns_12","title":"Returns","text":"<p>List of tuples with (MACD, short McGinley dynamic, long McGinley dynamic)</p>"},{"location":"api/momentum-indicators/#example_12","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nmd_macd = mi.bulk.mcginley_dynamic_macd_line(\n    prices,\n    short_period=5,\n    previous_short_mcginley=0.0,\n    long_period=10,\n    previous_long_mcginley=0.0\n)\n\nprint(f\"Bulk McGinley Dynamic MACD: {md_macd}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk McGinley Dynamic MACD: [\n    (0.0, 109.0, 109.0), (0.18597050580808627, 109.37194101161619, 109.1859705058081), \n    (0.4903282630853596, 110.00875741201432, 109.51842914892896), \n    (0.8753505778212656, 110.84466130783767, 109.9693107300164), \n    (0.9082933415511008, 111.06634122265551, 110.15804788110441), \n    (1.1019577190823497, 111.5949690859446, 110.49301136686225)\n]\n</code></pre>"},{"location":"api/momentum-indicators/#chaikin_oscillator","title":"<code>chaikin_oscillator</code>","text":"<pre><code>chaikin_oscillator(\n    highs: List[float],\n    lows: List[float],\n    close: List[float],\n    volume: List[float],\n    short_period: int,\n    long_period: int,\n    previous_accumulation_distribution: float,\n    short_period_model: str,\n    long_period_model: str\n) -&gt; List[Tuple[float, float]]\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_13","title":"Arguments","text":"<ul> <li>highs: List of high prices</li> <li>lows: List of low prices</li> <li>close: List of closing prices</li> <li>volume: List of volumes</li> <li>short_period: Short period for AD calculation</li> <li>long_period: Long period for AD calculation</li> <li>previous_accumulation_distribution: Previous AD value (0.0 if none)</li> <li>short_period_model: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>long_period_model: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> </ul>"},{"location":"api/momentum-indicators/#returns_13","title":"Returns","text":"<p>List of tuples with (Chaikin Oscillator, Accumulation Distribution)</p>"},{"location":"api/momentum-indicators/#example_13","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nhigh_prices = [\n    105.0, 107.0, 110.0, 108.0, 111.0, 113.0, 112.0, 115.0,\n    117.0, 114.0, 116.0, 118.0, 120.0, 117.0, 119.0\n]\nlow_prices = [\n    95.0, 97.0, 100.0, 98.0, 101.0, 103.0, 102.0, 105.0,\n    107.0, 104.0, 106.0, 108.0, 110.0, 107.0, 109.0\n]\nclose_prices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\nvolume = [\n    1000, 1200, 1500, 1100, 1300, 1400, 1250, 1600,\n    1800, 1350, 1450, 1550, 1700, 1400, 1500\n]\n\nchaikin = mi.bulk.chaikin_oscillator(\n    high_prices,\n    low_prices,\n    close_prices,\n    volume,\n    short_period=5,\n    long_period=10,\n    previous_accumulation_distribution=0.0,\n    short_period_model=\"simple_moving_average\",\n    long_period_model=\"simple_moving_average\"\n)\n\nprint(f\"Bulk Chaikin Oscillator: {chaikin}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Chaikin Oscillator: []\n</code></pre>"},{"location":"api/momentum-indicators/#percentage_price_oscillator","title":"<code>percentage_price_oscillator</code>","text":"<pre><code>percentage_price_oscillator(\n    prices: List[float],\n    short_period: int,\n    long_period: int,\n    constant_model_type: str\n) -&gt; List[float]\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_14","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>short_period: Length of short period</li> <li>long_period: Length of long period</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> </ul>"},{"location":"api/momentum-indicators/#returns_14","title":"Returns","text":"<p>List of Percentage Price Oscillator values</p>"},{"location":"api/momentum-indicators/#example_14","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nppo = mi.bulk.percentage_price_oscillator(\n    prices,\n    short_period=5,\n    long_period=10,\n    constant_model_type=\"exponential_moving_average\"\n)\n\nprint(f\"Bulk Percentage Price Oscillator: {ppo}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Percentage Price Oscillator: [\n    1.5979390071606525, 1.340906021403326, 1.4601143417976372, \n    1.6371566789984267, 0.9847709201141644, 1.0142521932946695\n]\n</code></pre>"},{"location":"api/momentum-indicators/#chande_momentum_oscillator","title":"<code>chande_momentum_oscillator</code>","text":"<pre><code>chande_momentum_oscillator(\n    prices: List[float],\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_15","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>period: Period over which to calculate the CMO</li> </ul>"},{"location":"api/momentum-indicators/#returns_15","title":"Returns","text":"<p>List of Chande Momentum Oscillator values</p>"},{"location":"api/momentum-indicators/#example_15","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\ncmo = mi.bulk.chande_momentum_oscillator(\n    prices,\n    period=10\n)\n\nprint(f\"Bulk Chande Momentum Oscillator: {cmo}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Chande Momentum Oscillator: [42.857142857142854, 42.857142857142854, 40.0, 60.0, 30.0, 30.0]\n</code></pre>"},{"location":"api/momentum-indicators/#single-functions","title":"\ud83d\udfe2 Single Functions","text":""},{"location":"api/momentum-indicators/#relative_strength_index_1","title":"<code>relative_strength_index</code>","text":"<pre><code>relative_strength_index(\n    prices: List[float],\n    constant_model_type: str\n) -&gt; float\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_16","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> </ul>"},{"location":"api/momentum-indicators/#returns_16","title":"Returns","text":"<p>Relative Strength Index value</p>"},{"location":"api/momentum-indicators/#example_16","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nrsi = mi.single.relative_strength_index(\n    prices,\n    constant_model_type=\"simple_moving_average\"\n)\n\nprint(f\"Single RSI: {rsi}\")\n</code></pre> <p>Output:</p> <pre><code>Single RSI: 50.54945054945055\n</code></pre>"},{"location":"api/momentum-indicators/#stochastic_oscillator_1","title":"<code>stochastic_oscillator</code>","text":"<pre><code>stochastic_oscillator(\n    prices: List[float]\n) -&gt; float\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_17","title":"Arguments","text":"<ul> <li>prices: List of prices</li> </ul>"},{"location":"api/momentum-indicators/#returns_17","title":"Returns","text":"<p>Stochastic Oscillator value</p>"},{"location":"api/momentum-indicators/#example_17","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nstoch = mi.single.stochastic_oscillator(prices)\n\nprint(f\"Single Stochastic Oscillator: {stoch}\")\n</code></pre> <p>Output:</p> <pre><code>Single Stochastic Oscillator: 93.33333333333333\n</code></pre>"},{"location":"api/momentum-indicators/#slow_stochastic_1","title":"<code>slow_stochastic</code>","text":"<pre><code>slow_stochastic(\n    stochastics: List[float],\n    constant_model_type: str\n) -&gt; float\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_18","title":"Arguments","text":"<ul> <li>stochastics: List of stochastic values</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> </ul>"},{"location":"api/momentum-indicators/#returns_18","title":"Returns","text":"<p>Slow Stochastic value</p>"},{"location":"api/momentum-indicators/#example_18","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nstochastics = [\n    80.0, 75.0, 70.0, 72.0, 68.0, 65.0, 70.0, 73.0,\n    75.0, 78.0, 80.0, 77.0, 74.0, 76.0, 79.0\n]\n\nslow_stoch = mi.single.slow_stochastic(\n    stochastics,\n    constant_model_type=\"simple_moving_average\"\n)\n\nprint(f\"Single Slow Stochastic: {slow_stoch}\")\n</code></pre> <p>Output:</p> <pre><code>Single Slow Stochastic: 74.13333333333334\n</code></pre>"},{"location":"api/momentum-indicators/#slowest_stochastic_1","title":"<code>slowest_stochastic</code>","text":"<pre><code>slowest_stochastic(\n    slow_stochastics: List[float],\n    constant_model_type: str\n) -&gt; float\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_19","title":"Arguments","text":"<ul> <li>slow_stochastics: List of slow stochastic values</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> </ul>"},{"location":"api/momentum-indicators/#returns_19","title":"Returns","text":"<p>Slowest Stochastic value</p>"},{"location":"api/momentum-indicators/#example_19","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nslow_stochastics = [\n    75.0, 72.3, 71.7, 68.3, 67.7, 69.0, 72.7, 75.3,\n    77.7, 78.3, 76.3, 75.0, 76.3, 78.0\n]\n\nslowest_stoch = mi.single.slowest_stochastic(\n    slow_stochastics,\n    constant_model_type=\"simple_moving_average\"\n)\n\nprint(f\"Single Slowest Stochastic: {slowest_stoch}\")\n</code></pre> <p>Output:</p> <pre><code>Single Slowest Stochastic: 73.82857142857142\n</code></pre>"},{"location":"api/momentum-indicators/#williams_percent_r_1","title":"<code>williams_percent_r</code>","text":"<pre><code>williams_percent_r(\n    high: List[float],\n    low: List[float],\n    close: float\n) -&gt; float\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_20","title":"Arguments","text":"<ul> <li>high: List of high prices</li> <li>low: List of low prices</li> <li>close: Closing price for the observed period</li> </ul>"},{"location":"api/momentum-indicators/#returns_20","title":"Returns","text":"<p>Williams %R value</p>"},{"location":"api/momentum-indicators/#example_20","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nhigh_prices = [\n    105.0, 107.0, 110.0, 108.0, 111.0, 113.0, 112.0, 115.0,\n    117.0, 114.0, 116.0, 118.0, 120.0, 117.0, 119.0\n]\nlow_prices = [\n    95.0, 97.0, 100.0, 98.0, 101.0, 103.0, 102.0, 105.0,\n    107.0, 104.0, 106.0, 108.0, 110.0, 107.0, 109.0\n]\n\nwilliams_r = mi.single.williams_percent_r(\n    high_prices,\n    low_prices,\n    close=114.0\n)\n\nprint(f\"Single Williams %R: {williams_r}\")\n</code></pre> <p>Output:</p> <pre><code>Single Williams %R: -24.0\n</code></pre>"},{"location":"api/momentum-indicators/#money_flow_index_1","title":"<code>money_flow_index</code>","text":"<pre><code>money_flow_index(\n    prices: List[float],\n    volume: List[float]\n) -&gt; float\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_21","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>volume: List of volumes</li> </ul>"},{"location":"api/momentum-indicators/#returns_21","title":"Returns","text":"<p>Money Flow Index value</p>"},{"location":"api/momentum-indicators/#example_21","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\nvolume = [\n    1000, 1200, 1500, 1100, 1300, 1400, 1250, 1600,\n    1800, 1350, 1450, 1550, 1700, 1400, 1500\n]\n\nmfi = mi.single.money_flow_index(prices, volume)\n\nprint(f\"Single Money Flow Index: {mfi}\")\n</code></pre> <p>Output:</p> <pre><code>Single Money Flow Index: 74.95568383255306\n</code></pre>"},{"location":"api/momentum-indicators/#rate_of_change_1","title":"<code>rate_of_change</code>","text":"<pre><code>rate_of_change(\n    current_price: float,\n    previous_price: float\n) -&gt; float\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_22","title":"Arguments","text":"<ul> <li>current_price: Current price</li> <li>previous_price: Previous price</li> </ul>"},{"location":"api/momentum-indicators/#returns_22","title":"Returns","text":"<p>Rate of Change value</p>"},{"location":"api/momentum-indicators/#example_22","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nroc = mi.single.rate_of_change(\n    current_price=114.0,\n    previous_price=100.0\n)\n\nprint(f\"Single Rate of Change: {roc}\")\n</code></pre> <p>Output:</p> <pre><code>Single Rate of Change: 14.000000000000002\n</code></pre>"},{"location":"api/momentum-indicators/#on_balance_volume_1","title":"<code>on_balance_volume</code>","text":"<pre><code>on_balance_volume(\n    current_price: float,\n    previous_price: float,\n    current_volume: float,\n    previous_on_balance_volume: float\n) -&gt; float\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_23","title":"Arguments","text":"<ul> <li>current_price: Current price</li> <li>previous_price: Previous price</li> <li>current_volume: Current volume</li> <li>previous_on_balance_volume: Previous OBV value (0.0 if none)</li> </ul>"},{"location":"api/momentum-indicators/#returns_23","title":"Returns","text":"<p>On Balance Volume value</p>"},{"location":"api/momentum-indicators/#example_23","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nobv = mi.single.on_balance_volume(\n    current_price=114.0,\n    previous_price=112.0,\n    current_volume=1500.0,\n    previous_on_balance_volume=5000.0\n)\n\nprint(f\"Single On Balance Volume: {obv}\")\n</code></pre> <p>Output:</p> <pre><code>Single On Balance Volume: 6500.0\n</code></pre>"},{"location":"api/momentum-indicators/#commodity_channel_index_1","title":"<code>commodity_channel_index</code>","text":"<pre><code>commodity_channel_index(\n    prices: List[float],\n    constant_model_type: str,\n    deviation_model: str,\n    constant_multiplier: float\n) -&gt; float\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_24","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>deviation_model: Choice of:<ul> <li><code>\"standard_deviation\"</code></li> <li><code>\"mean_absolute_deviation\"</code></li> <li><code>\"median_absolute_deviation\"</code></li> <li><code>\"mode_absolute_deviation\"</code></li> <li><code>\"ulcer_index\"</code></li> </ul> </li> <li>constant_multiplier: Scale factor (normally 0.015)</li> </ul>"},{"location":"api/momentum-indicators/#returns_24","title":"Returns","text":"<p>Commodity Channel Index value</p>"},{"location":"api/momentum-indicators/#example_24","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\ncci = mi.single.commodity_channel_index(\n    prices,\n    constant_model_type=\"simple_moving_average\",\n    deviation_model=\"standard_deviation\",\n    constant_multiplier=0.015\n)\n\nprint(f\"Single Commodity Channel Index: {cci}\")\n</code></pre> <p>Output:</p> <pre><code>Single Commodity Channel Index: 83.64657763003788\n</code></pre>"},{"location":"api/momentum-indicators/#mcginley_dynamic_commodity_channel_index_1","title":"<code>mcginley_dynamic_commodity_channel_index</code>","text":"<pre><code>mcginley_dynamic_commodity_channel_index(\n    prices: List[float],\n    previous_mcginley_dynamic: float,\n    deviation_model: str,\n    constant_multiplier: float\n) -&gt; Tuple[float, float]\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_25","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>previous_mcginley_dynamic: Previous McGinley dynamic (0.0 if none)</li> <li>deviation_model: Choice of:<ul> <li><code>\"standard_deviation\"</code></li> <li><code>\"mean_absolute_deviation\"</code></li> <li><code>\"median_absolute_deviation\"</code></li> <li><code>\"mode_absolute_deviation\"</code></li> <li><code>\"ulcer_index\"</code></li> </ul> </li> <li>constant_multiplier: Scale factor (normally 0.015)</li> </ul>"},{"location":"api/momentum-indicators/#returns_25","title":"Returns","text":"<p>Tuple with (Commodity Channel Index, McGinley Dynamic)</p>"},{"location":"api/momentum-indicators/#example_25","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nmd_cci = mi.single.mcginley_dynamic_commodity_channel_index(\n    prices,\n    previous_mcginley_dynamic=0.0,\n    deviation_model=\"standard_deviation\",\n    constant_multiplier=0.015\n)\n\nprint(f\"Single McGinley Dynamic CCI: {md_cci}\")\n</code></pre> <p>Output:</p> <pre><code>Single McGinley Dynamic CCI: (0.0, 114.0)\n</code></pre>"},{"location":"api/momentum-indicators/#macd_line_1","title":"<code>macd_line</code>","text":"<pre><code>macd_line(\n    prices: List[float],\n    short_period: int,\n    short_period_model: str,\n    long_period_model: str\n) -&gt; float\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_26","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>short_period: Length of the short period</li> <li>short_period_model: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>long_period_model: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> </ul>"},{"location":"api/momentum-indicators/#returns_26","title":"Returns","text":"<p>MACD line value</p>"},{"location":"api/momentum-indicators/#example_26","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nmacd = mi.single.macd_line(\n    prices,\n    short_period=5,\n    short_period_model=\"exponential_moving_average\",\n    long_period_model=\"exponential_moving_average\"\n)\n\nprint(f\"Single MACD Line: {macd}\")\n</code></pre> <p>Output:</p> <pre><code>Single MACD Line: 2.695637490797523\n</code></pre>"},{"location":"api/momentum-indicators/#signal_line_1","title":"<code>signal_line</code>","text":"<pre><code>signal_line(\n    macds: List[float],\n    constant_model_type: str\n) -&gt; float\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_27","title":"Arguments","text":"<ul> <li>macds: List of MACD values</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> </ul>"},{"location":"api/momentum-indicators/#returns_27","title":"Returns","text":"<p>Signal line value</p>"},{"location":"api/momentum-indicators/#example_27","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nmacds = [\n    -0.5, -0.3, 0.1, 0.4, 0.2, 0.6, 0.8, 0.5,\n    0.3, 0.7, 0.9, 1.1, 0.8, 0.6, 1.0\n]\n\nsignal = mi.single.signal_line(\n    macds,\n    constant_model_type=\"exponential_moving_average\"\n)\n\nprint(f\"Single Signal Line: {signal}\")\n</code></pre> <p>Output:</p> <pre><code>Single Signal Line: 0.662108064232895\n</code></pre>"},{"location":"api/momentum-indicators/#mcginley_dynamic_macd_line_1","title":"<code>mcginley_dynamic_macd_line</code>","text":"<pre><code>mcginley_dynamic_macd_line(\n    prices: List[float],\n    short_period: int,\n    previous_short_mcginley: float,\n    previous_long_mcginley: float\n) -&gt; Tuple[float, float, float]\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_28","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>short_period: Length of the short period</li> <li>previous_short_mcginley: Previous short McGinley dynamic (0.0 if none)</li> <li>previous_long_mcginley: Previous long McGinley dynamic (0.0 if none)</li> </ul>"},{"location":"api/momentum-indicators/#returns_28","title":"Returns","text":"<p>Tuple with (MACD, short McGinley dynamic, long McGinley dynamic)</p>"},{"location":"api/momentum-indicators/#example_28","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nmd_macd = mi.single.mcginley_dynamic_macd_line(\n    prices,\n    short_period=5,\n    previous_short_mcginley=0.0,\n    previous_long_mcginley=0.0\n)\n\nprint(f\"Single McGinley Dynamic MACD: {md_macd}\")\n</code></pre> <p>Output:</p> <pre><code>Single McGinley Dynamic MACD: (0.0, 114.0, 114.0)\n</code></pre>"},{"location":"api/momentum-indicators/#chaikin_oscillator_1","title":"<code>chaikin_oscillator</code>","text":"<pre><code>chaikin_oscillator(\n    highs: List[float],\n    lows: List[float],\n    close: List[float],\n    volume: List[float],\n    short_period: int,\n    previous_accumulation_distribution: float,\n    short_period_model: str,\n    long_period_model: str\n) -&gt; Tuple[float, float]\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_29","title":"Arguments","text":"<ul> <li>highs: List of high prices</li> <li>lows: List of low prices</li> <li>close: List of closing prices</li> <li>volume: List of volumes</li> <li>short_period: Short period for AD calculation</li> <li>previous_accumulation_distribution: Previous AD value (0.0 if none)</li> <li>short_period_model: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>long_period_model: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> </ul>"},{"location":"api/momentum-indicators/#returns_29","title":"Returns","text":"<p>Tuple with (Chaikin Oscillator, Accumulation Distribution)</p>"},{"location":"api/momentum-indicators/#example_29","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nhigh_prices = [\n    105.0, 107.0, 110.0, 108.0, 111.0, 113.0, 112.0, 115.0,\n    117.0, 114.0, 116.0, 118.0, 120.0, 117.0, 119.0\n]\nlow_prices = [\n    95.0, 97.0, 100.0, 98.0, 101.0, 103.0, 102.0, 105.0,\n    107.0, 104.0, 106.0, 108.0, 110.0, 107.0, 109.0\n]\nclose_prices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\nvolume = [\n    1000, 1200, 1500, 1100, 1300, 1400, 1250, 1600,\n    1800, 1350, 1450, 1550, 1700, 1400, 1500\n]\n\nchaikin = mi.single.chaikin_oscillator(\n    high_prices,\n    low_prices,\n    close_prices,\n    volume,\n    short_period=5,\n    previous_accumulation_distribution=0.0,\n    short_period_model=\"exponential_moving_average\",\n    long_period_model=\"exponential_moving_average\"\n)\n\nprint(f\"Single Chaikin Oscillator: {chaikin}\")\n</code></pre> <p>Output:</p> <pre><code>Single Chaikin Oscillator: []\n</code></pre>"},{"location":"api/momentum-indicators/#percentage_price_oscillator_1","title":"<code>percentage_price_oscillator</code>","text":"<pre><code>percentage_price_oscillator(\n    prices: List[float],\n    short_period: int,\n    constant_model_type: str\n) -&gt; float\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_30","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>short_period: Length of short period</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> </ul>"},{"location":"api/momentum-indicators/#returns_30","title":"Returns","text":"<p>Percentage Price Oscillator value</p>"},{"location":"api/momentum-indicators/#example_30","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nppo = mi.single.percentage_price_oscillator(\n    prices,\n    short_period=5,\n    constant_model_type=\"exponential_moving_average\"\n)\n\nprint(f\"Single Percentage Price Oscillator: {ppo}\")\n</code></pre> <p>Output:</p> <pre><code>Single Percentage Price Oscillator: 2.436802783365856\n</code></pre>"},{"location":"api/momentum-indicators/#chande_momentum_oscillator_1","title":"<code>chande_momentum_oscillator</code>","text":"<pre><code>chande_momentum_oscillator(\n    prices: List[float]\n) -&gt; float\n</code></pre>"},{"location":"api/momentum-indicators/#arguments_31","title":"Arguments","text":"<ul> <li>prices: List of prices</li> </ul>"},{"location":"api/momentum-indicators/#returns_31","title":"Returns","text":"<p>Chande Momentum Oscillator value</p>"},{"location":"api/momentum-indicators/#example_31","title":"Example","text":"<pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\ncmo = mi.single.chande_momentum_oscillator(prices)\n\nprint(f\"Single Chande Momentum Oscillator: {cmo}\")\n</code></pre> <p>Output:</p> <pre><code>Single Chande Momentum Oscillator: 43.75\n</code></pre>"},{"location":"api/momentum-indicators/#model-type-choices","title":"\ud83e\udde9 Model Type Choices","text":"<p>constant_model_type: - <code>\"simple_moving_average\"</code> - <code>\"smoothed_moving_average\"</code> - <code>\"exponential_moving_average\"</code> - <code>\"simple_moving_median\"</code> - <code>\"simple_moving_mode\"</code></p> <p>deviation_model: - <code>\"standard_deviation\"</code> - <code>\"mean_absolute_deviation\"</code> - <code>\"median_absolute_deviation\"</code> - <code>\"mode_absolute_deviation\"</code> - <code>\"ulcer_index\"</code></p>"},{"location":"api/momentum-indicators/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>All input lists must be of type <code>List[float]</code> (Python list of floats)</li> <li>Bulk functions require a <code>period</code> argument for window size</li> <li>Some functions require previous values for continuity</li> <li>Volume-based indicators require both price and volume data</li> </ul>"},{"location":"api/momentum-indicators/#see-also","title":"\ud83d\udd17 See Also","text":"<ul> <li>API Reference Index</li> </ul>"},{"location":"api/moving-average/","title":"\ud83d\udcc8 Moving Average API Reference","text":"<p>Module: <code>moving_average</code> </p> <p>The <code>moving_average</code> module provides functions for calculating moving averages, a core component of many technical indicators and trading strategies.</p>"},{"location":"api/moving-average/#structure","title":"\ud83c\udfd7\ufe0f Structure","text":"<ul> <li>single: Functions that return a single value for a slice of prices.</li> <li>bulk: Functions that compute values of a slice of prices over a period and return a vector.</li> </ul>"},{"location":"api/moving-average/#bulk-functions","title":"\ud83d\ude80 Bulk Functions","text":""},{"location":"api/moving-average/#moving_average","title":"<code>moving_average</code>","text":"<pre><code>moving_average(\n    prices: List[float],\n    moving_average_type: str,\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/moving-average/#arguments","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>moving_average_type: Choice of:<ul> <li><code>\"simple\"</code></li> <li><code>\"smoothed\"</code></li> <li><code>\"exponential\"</code></li> </ul> </li> <li>period: Period over which to calculate the moving average</li> </ul>"},{"location":"api/moving-average/#returns","title":"Returns","text":"<p>List of moving averages</p>"},{"location":"api/moving-average/#example","title":"Example","text":"<pre><code>from pytechnicalindicators import moving_average as ma\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nsma = ma.bulk.moving_average(\n    prices,\n    moving_average_type=\"simple\",\n    period=5\n)\n\nprint(f\"Bulk Moving Average: {sma}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Moving Average: [103.2, 104.8, 105.8, 106.8, 108.6, 109.2, 109.8, 111.0, 112.0, 112.0, 113.0]\n</code></pre>"},{"location":"api/moving-average/#mcginley_dynamic","title":"<code>mcginley_dynamic</code>","text":"<pre><code>mcginley_dynamic(\n    prices: List[float],\n    previous_mcginley_dynamic: float,\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/moving-average/#arguments_1","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>previous_mcginley_dynamic: Previous McGinley dynamic (if none use 0.0)</li> <li>period: Period over which to calculate the McGinley dynamic</li> </ul>"},{"location":"api/moving-average/#returns_1","title":"Returns","text":"<p>List of McGinley dynamics</p>"},{"location":"api/moving-average/#example_1","title":"Example","text":"<pre><code>from pytechnicalindicators import moving_average as ma\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nmcginley = ma.bulk.mcginley_dynamic(\n    prices,\n    previous_mcginley_dynamic=0.0,\n    period=10\n)\n\nprint(f\"Bulk McGinley Dynamic: {mcginley}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk McGinley Dynamic: [\n    109.0, 109.1859705058081, 109.51842914892896, 109.9693107300164, 110.15804788110441, 110.49301136686225\n]\n</code></pre>"},{"location":"api/moving-average/#single-functions","title":"\ud83d\udfe2 Single Functions","text":""},{"location":"api/moving-average/#moving_average_1","title":"<code>moving_average</code>","text":"<pre><code>moving_average(\n    prices: List[float],\n    moving_average_type: str\n) -&gt; float\n</code></pre>"},{"location":"api/moving-average/#arguments_2","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>moving_average_type: Choice of:<ul> <li><code>\"simple\"</code></li> <li><code>\"smoothed\"</code></li> <li><code>\"exponential\"</code></li> </ul> </li> </ul>"},{"location":"api/moving-average/#returns_2","title":"Returns","text":"<p>Moving average value</p>"},{"location":"api/moving-average/#example_2","title":"Example","text":"<pre><code>from pytechnicalindicators import moving_average as ma\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nsma = ma.single.moving_average(\n    prices,\n    moving_average_type=\"simple\"\n)\n\nprint(f\"Single Moving Average: {sma}\")\n</code></pre> <p>Output:</p> <pre><code>Single Moving Average: 108.46666666666667\n</code></pre>"},{"location":"api/moving-average/#mcginley_dynamic_1","title":"<code>mcginley_dynamic</code>","text":"<pre><code>mcginley_dynamic(\n    latest_price: float,\n    previous_mcginley_dynamic: float,\n    period: int\n) -&gt; float\n</code></pre>"},{"location":"api/moving-average/#arguments_3","title":"Arguments","text":"<ul> <li>latest_price: Most recent price</li> <li>previous_mcginley_dynamic: Previous McGinley dynamic (if none use 0.0)</li> <li>period: Length of the observed period</li> </ul>"},{"location":"api/moving-average/#returns_3","title":"Returns","text":"<p>McGinley dynamic value</p>"},{"location":"api/moving-average/#example_3","title":"Example","text":"<pre><code>from pytechnicalindicators import moving_average as ma\n\nmcginley = ma.single.mcginley_dynamic(\n    latest_price=114.0,\n    previous_mcginley_dynamic=108.5,\n    period=10\n)\n\nprint(f\"Single McGinley Dynamic: {mcginley}\")\n</code></pre> <p>Output:</p> <pre><code>Single McGinley Dynamic: 108.95129678212406\n</code></pre>"},{"location":"api/moving-average/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>All input lists must be of type <code>List[float]</code> (Python list of floats)</li> <li>Bulk functions require a <code>period</code> argument for window size</li> <li>McGinley Dynamic requires previous values for continuity</li> <li>Use 0.0 for <code>previous_mcginley_dynamic</code> if no previous value exists</li> </ul>"},{"location":"api/moving-average/#see-also","title":"\ud83d\udd17 See Also","text":"<ul> <li>API Reference Index</li> </ul>"},{"location":"api/other-indicators/","title":"\ud83d\udd27 Other Indicators API Reference","text":"<p>Module: <code>other_indicators</code> </p> <p>The <code>other_indicators</code> module provides technical analysis tools that do not fit neatly into the main categories like momentum, trend, or volatility.</p> <p>These calculations often serve as foundational measures or are used as components of broader strategies.</p>"},{"location":"api/other-indicators/#when-to-use","title":"\ud83d\udcda When to Use","text":"<p>Use these functions when you need to: - Calculate foundational metrics for risk, volatility, or bar strength - Analyze price movement range or return over a period - Incorporate less common but valuable technical measures into your models</p>"},{"location":"api/other-indicators/#structure","title":"\ud83c\udfd7\ufe0f Structure","text":"<ul> <li>single: Functions that return a single value for a slice of prices.</li> <li>bulk: Functions that compute values of a slice of prices over a period and return a vector.</li> </ul>"},{"location":"api/other-indicators/#bulk-functions","title":"\ud83d\ude80 Bulk Functions","text":""},{"location":"api/other-indicators/#return_on_investment","title":"<code>return_on_investment</code>","text":"<pre><code>return_on_investment(\n    prices: List[float],\n    investment: float\n) -&gt; List[Tuple[float, float]]\n</code></pre>"},{"location":"api/other-indicators/#arguments","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>investment: Initial investment amount</li> </ul>"},{"location":"api/other-indicators/#returns","title":"Returns","text":"<p>List of tuples containing (final investment value, percentage return)</p>"},{"location":"api/other-indicators/#example","title":"Example","text":"<pre><code>from pytechnicalindicators import other_indicators as oi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nroi = oi.bulk.return_on_investment(\n    prices,\n    investment=1000.0\n)\n\nprint(f\"Bulk Return on Investment: {roi}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Return on Investment: [\n    (1020.0, 2.0), (1050.0, 2.941176470588235), (1030.0, -1.9047619047619049), \n    (1060.0, 2.912621359223301), (1080.0, 1.8867924528301887), \n    (1070.0, -0.9259259259259258), (1100.0, 2.803738317757009), (1120.0, 1.8181818181818181), \n    (1090.0, -2.6785714285714284), (1110.0, 1.834862385321101), (1130.0, 1.8018018018018018), \n    (1150.0, 1.7699115044247788), (1120.0, -2.608695652173913), (1140.0, 1.7857142857142856)\n]\n</code></pre>"},{"location":"api/other-indicators/#true_range","title":"<code>true_range</code>","text":"<pre><code>true_range(\n    close: List[float],\n    high: List[float],\n    low: List[float]\n) -&gt; List[float]\n</code></pre>"},{"location":"api/other-indicators/#arguments_1","title":"Arguments","text":"<ul> <li>close: List of previous closes</li> <li>high: List of highs</li> <li>low: List of lows</li> </ul>"},{"location":"api/other-indicators/#returns_1","title":"Returns","text":"<p>List of True Range values</p>"},{"location":"api/other-indicators/#example_1","title":"Example","text":"<pre><code>from pytechnicalindicators import other_indicators as oi\n\nclose_prices = [\n    99.0, 101.0, 104.0, 102.0, 105.0, 107.0, 106.0, 109.0,\n    111.0, 108.0, 110.0, 112.0, 114.0, 111.0, 113.0\n]\nhigh_prices = [\n    105.0, 107.0, 110.0, 108.0, 111.0, 113.0, 112.0, 115.0,\n    117.0, 114.0, 116.0, 118.0, 120.0, 117.0, 119.0\n]\nlow_prices = [\n    95.0, 97.0, 100.0, 98.0, 101.0, 103.0, 102.0, 105.0,\n    107.0, 104.0, 106.0, 108.0, 110.0, 107.0, 109.0\n]\n\ntr = oi.bulk.true_range(\n    close_prices,\n    high_prices,\n    low_prices\n)\n\nprint(f\"Bulk True Range: {tr}\")\n</code></pre> <p>Output:</p> <pre><code>Bulki True Range: [10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]\n</code></pre>"},{"location":"api/other-indicators/#average_true_range","title":"<code>average_true_range</code>","text":"<pre><code>average_true_range(\n    close: List[float],\n    high: List[float],\n    low: List[float],\n    constant_model_type: str,\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/other-indicators/#arguments_2","title":"Arguments","text":"<ul> <li>close: List of previous closes</li> <li>high: List of highs</li> <li>low: List of lows</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>period: Period over which to calculate the ATR</li> </ul>"},{"location":"api/other-indicators/#returns_2","title":"Returns","text":"<p>List of Average True Range values</p>"},{"location":"api/other-indicators/#example_2","title":"Example","text":"<pre><code>from pytechnicalindicators import other_indicators as oi\n\nclose_prices = [\n    99.0, 101.0, 104.0, 102.0, 105.0, 107.0, 106.0, 109.0,\n    111.0, 108.0, 110.0, 112.0, 114.0, 111.0, 113.0\n]\nhigh_prices = [\n    105.0, 107.0, 110.0, 108.0, 111.0, 113.0, 112.0, 115.0,\n    117.0, 114.0, 116.0, 118.0, 120.0, 117.0, 119.0\n]\nlow_prices = [\n    95.0, 97.0, 100.0, 98.0, 101.0, 103.0, 102.0, 105.0,\n    107.0, 104.0, 106.0, 108.0, 110.0, 107.0, 109.0\n]\n\natr = oi.bulk.average_true_range(\n    close_prices,\n    high_prices,\n    low_prices,\n    constant_model_type=\"simple_moving_average\",\n    period=14\n)\n\nprint(f\"Bulk Average True Range: {atr}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Average True Range: [10.0, 10.0]\n</code></pre>"},{"location":"api/other-indicators/#internal_bar_strength","title":"<code>internal_bar_strength</code>","text":"<pre><code>internal_bar_strength(\n    high: List[float],\n    low: List[float],\n    close: List[float]\n) -&gt; List[float]\n</code></pre>"},{"location":"api/other-indicators/#arguments_3","title":"Arguments","text":"<ul> <li>high: List of highs</li> <li>low: List of lows</li> <li>close: List of closing prices</li> </ul>"},{"location":"api/other-indicators/#returns_3","title":"Returns","text":"<p>List of internal bar strength values</p>"},{"location":"api/other-indicators/#example_3","title":"Example","text":"<pre><code>from pytechnicalindicators import other_indicators as oi\n\nhigh_prices = [\n    105.0, 107.0, 110.0, 108.0, 111.0, 113.0, 112.0, 115.0,\n    117.0, 114.0, 116.0, 118.0, 120.0, 117.0, 119.0\n]\nlow_prices = [\n    95.0, 97.0, 100.0, 98.0, 101.0, 103.0, 102.0, 105.0,\n    107.0, 104.0, 106.0, 108.0, 110.0, 107.0, 109.0\n]\nclose_prices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nibs = oi.bulk.internal_bar_strength(\n    high_prices,\n    low_prices,\n    close_prices\n)\n\nprint(f\"Bulk Internal Bar Strength: {ibs}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Internal Bar Strength: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n</code></pre>"},{"location":"api/other-indicators/#positivity_indicator","title":"<code>positivity_indicator</code>","text":"<pre><code>positivity_indicator(\n    open: List[float],\n    previous_close: List[float],\n    signal_period: int,\n    constant_model_type: str\n) -&gt; List[Tuple[float, float]]\n</code></pre>"},{"location":"api/other-indicators/#arguments_4","title":"Arguments","text":"<ul> <li>open: List of opening prices</li> <li>previous_close: List of closing prices</li> <li>signal_period: Period to calculate the signal</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> </ul>"},{"location":"api/other-indicators/#returns_4","title":"Returns","text":"<p>List of tuples containing (positivity indicator, signal line)</p>"},{"location":"api/other-indicators/#example_4","title":"Example","text":"<pre><code>from pytechnicalindicators import other_indicators as oi\n\nopen_prices = [\n    98.0, 101.5, 104.5, 102.5, 105.5, 107.5, 106.5, 109.5,\n    111.5, 108.5, 110.5, 112.5, 114.5, 111.5, 113.5\n]\nprevious_close = [\n    99.0, 101.0, 104.0, 102.0, 105.0, 107.0, 106.0, 109.0,\n    111.0, 108.0, 110.0, 112.0, 114.0, 111.0, 113.0\n]\n\npos_indicator = oi.bulk.positivity_indicator(\n    open_prices,\n    previous_close,\n    signal_period=5,\n    constant_model_type=\"simple_moving_average\"\n)\n\nprint(f\"Bulk Positivity Indicator: {pos_indicator}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Positivity Indicator: [\n    (0.4761904761904762, 0.18642085604811287), (0.46728971962616817, 0.48189900199354857), \n    (0.4716981132075472, 0.477228723644959), (0.45871559633027525, 0.47281799675716785), \n    (0.45045045045045046, 0.4648688711609834), (0.4629629629629629, 0.4622233685154808), \n    (0.45454545454545453, 0.45967451549933813), (0.4464285714285714, 0.45462060714354297), \n    (0.43859649122807015, 0.4505967861231019), (0.45045045045045046, 0.4505967861231019), \n    (0.4424778761061947, 0.44649976875174835)\n]\n</code></pre>"},{"location":"api/other-indicators/#single-functions","title":"\ud83d\udfe2 Single Functions","text":""},{"location":"api/other-indicators/#return_on_investment_1","title":"<code>return_on_investment</code>","text":"<pre><code>return_on_investment(\n    start_price: float,\n    end_price: float,\n    investment: float\n) -&gt; Tuple[float, float]\n</code></pre>"},{"location":"api/other-indicators/#arguments_5","title":"Arguments","text":"<ul> <li>start_price: Initial price of the asset</li> <li>end_price: Final price of the asset</li> <li>investment: Amount invested at start</li> </ul>"},{"location":"api/other-indicators/#returns_5","title":"Returns","text":"<p>Tuple of (final investment value, percentage return)</p>"},{"location":"api/other-indicators/#example_5","title":"Example","text":"<pre><code>from pytechnicalindicators import other_indicators as oi\n\nroi = oi.single.return_on_investment(\n    start_price=100.0,\n    end_price=114.0,\n    investment=1000.0\n)\n\nprint(f\"Single Return on Investment: {roi}\")\n</code></pre> <p>Output:</p> <pre><code>Single Return on Investment: (1140.0, 14.000000000000002)\n</code></pre>"},{"location":"api/other-indicators/#true_range_1","title":"<code>true_range</code>","text":"<pre><code>true_range(\n    close: float,\n    high: float,\n    low: float\n) -&gt; float\n</code></pre>"},{"location":"api/other-indicators/#arguments_6","title":"Arguments","text":"<ul> <li>close: Previous period close</li> <li>high: Current period high</li> <li>low: Current period low</li> </ul>"},{"location":"api/other-indicators/#returns_6","title":"Returns","text":"<p>True Range value</p>"},{"location":"api/other-indicators/#example_6","title":"Example","text":"<pre><code>from pytechnicalindicators import other_indicators as oi\n\ntr = oi.single.true_range(\n    close=113.0,\n    high=119.0,\n    low=109.0\n)\n\nprint(f\"Single True Range: {tr}\")\n</code></pre> <p>Output:</p> <pre><code>Single True Range: 10.0\n</code></pre>"},{"location":"api/other-indicators/#average_true_range_1","title":"<code>average_true_range</code>","text":"<pre><code>average_true_range(\n    close: List[float],\n    high: List[float],\n    low: List[float],\n    constant_model_type: str\n) -&gt; float\n</code></pre>"},{"location":"api/other-indicators/#arguments_7","title":"Arguments","text":"<ul> <li>close: List of previous closes</li> <li>high: List of highs</li> <li>low: List of lows</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> </ul>"},{"location":"api/other-indicators/#returns_7","title":"Returns","text":"<p>Average True Range value</p>"},{"location":"api/other-indicators/#example_7","title":"Example","text":"<pre><code>from pytechnicalindicators import other_indicators as oi\n\nclose_prices = [\n    99.0, 101.0, 104.0, 102.0, 105.0, 107.0, 106.0, 109.0,\n    111.0, 108.0, 110.0, 112.0, 114.0, 111.0, 113.0\n]\nhigh_prices = [\n    105.0, 107.0, 110.0, 108.0, 111.0, 113.0, 112.0, 115.0,\n    117.0, 114.0, 116.0, 118.0, 120.0, 117.0, 119.0\n]\nlow_prices = [\n    95.0, 97.0, 100.0, 98.0, 101.0, 103.0, 102.0, 105.0,\n    107.0, 104.0, 106.0, 108.0, 110.0, 107.0, 109.0\n]\n\natr = oi.single.average_true_range(\n    close_prices,\n    high_prices,\n    low_prices,\n    constant_model_type=\"simple_moving_average\"\n)\n\nprint(f\"Single Average True Range: {atr}\")\n</code></pre> <p>Output:</p> <pre><code>Single Average True Range: 10.0\n</code></pre>"},{"location":"api/other-indicators/#internal_bar_strength_1","title":"<code>internal_bar_strength</code>","text":"<pre><code>internal_bar_strength(\n    high: float,\n    low: float,\n    close: float\n) -&gt; float\n</code></pre>"},{"location":"api/other-indicators/#arguments_8","title":"Arguments","text":"<ul> <li>high: High price</li> <li>low: Low price</li> <li>close: Close price</li> </ul>"},{"location":"api/other-indicators/#returns_8","title":"Returns","text":"<p>Internal bar strength value</p>"},{"location":"api/other-indicators/#example_8","title":"Example","text":"<pre><code>from pytechnicalindicators import other_indicators as oi\n\nibs = oi.single.internal_bar_strength(\n    high=119.0,\n    low=109.0,\n    close=114.0\n)\n\nprint(f\"Single Internal Bar Strength: {ibs}\")\n</code></pre> <p>Output:</p> <pre><code>Single Internal Bar Strength: 0.5\n</code></pre>"},{"location":"api/other-indicators/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>All input lists must be of type <code>List[float]</code> (Python list of floats)</li> <li>True Range calculations require previous close, current high, and current low</li> <li>Internal Bar Strength measures where the close falls within the high-low range</li> <li>Return on Investment returns both absolute value and percentage return</li> <li>Positivity Indicator compares opening gaps to previous closes</li> </ul>"},{"location":"api/other-indicators/#see-also","title":"\ud83d\udd17 See Also","text":"<ul> <li>API Reference Index</li> </ul>"},{"location":"api/standard-indicators/","title":"\ud83d\udcca Standard Indicators API Reference","text":"<p>Module: <code>standard_indicators</code> </p> <p>The <code>standard_indicators</code> module provides implementations of widely-recognized technical indicators, following their established formulas and default parameters as commonly found in financial literature and platforms.</p>"},{"location":"api/standard-indicators/#when-to-use","title":"\ud83d\udcda When to Use","text":"<p>Use these functions when you need classic, industry-standard indicators for: - Quick benchmarking - Reproducing signals used by major charting tools or trading strategies - Comparing with custom or alternative indicator settings</p>"},{"location":"api/standard-indicators/#structure","title":"\ud83c\udfd7\ufe0f Structure","text":"<ul> <li>single: Functions that return a single value for a slice of prices.</li> <li>bulk: Functions that compute values of a slice of prices over a period and return a vector.</li> </ul>"},{"location":"api/standard-indicators/#bulk-functions","title":"\ud83d\ude80 Bulk Functions","text":""},{"location":"api/standard-indicators/#simple_moving_average","title":"<code>simple_moving_average</code>","text":"<pre><code>simple_moving_average(\n    prices: List[float],\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/standard-indicators/#arguments","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>period: Period over which to calculate the moving average</li> </ul>"},{"location":"api/standard-indicators/#returns","title":"Returns","text":"<p>List of simple moving averages</p>"},{"location":"api/standard-indicators/#example","title":"Example","text":"<pre><code>from pytechnicalindicators import standard_indicators as si\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nma = si.bulk.simple_moving_average(\n    prices,\n    period=5\n)\n\nprint(f\"Bulk Simple Moving Average: {ma}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Simple Moving Average: [103.2, 104.8, 105.8, 106.8, 108.6, 109.2, 109.8, 111.0, 112.0, 112.0, 113.0]\n</code></pre>"},{"location":"api/standard-indicators/#smoothed_moving_average","title":"<code>smoothed_moving_average</code>","text":"<pre><code>smoothed_moving_average(\n    prices: List[float],\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/standard-indicators/#arguments_1","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>period: Period over which to calculate the moving average</li> </ul>"},{"location":"api/standard-indicators/#returns_1","title":"Returns","text":"<p>List of smoothed moving averages</p>"},{"location":"api/standard-indicators/#example_1","title":"Example","text":"<pre><code>from pytechnicalindicators import standard_indicators as si\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nsma = si.bulk.smoothed_moving_average(\n    prices,\n    period=5\n)\n\nprint(f\"Bulk Smoothed Moving Average: {sma}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Smoothed Moving Average: [\n    103.75535459305092, 105.38410280818657, 106.1946692051404, 107.44312232270346, 109.23179438362685, \n    109.47786768205616, 110.0747263207996, 111.24464540694908, 112.4831032841504, 112.3864826273203,\n    113.19657306044739\n]\n</code></pre>"},{"location":"api/standard-indicators/#exponential_moving_average","title":"<code>exponential_moving_average</code>","text":"<pre><code>exponential_moving_average(\n    prices: List[float],\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/standard-indicators/#arguments_2","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>period: Period over which to calculate the moving average</li> </ul>"},{"location":"api/standard-indicators/#returns_2","title":"Returns","text":"<p>List of exponential moving averages</p>"},{"location":"api/standard-indicators/#example_2","title":"Example","text":"<pre><code>from pytechnicalindicators import standard_indicators as si\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nema = si.bulk.exponential_moving_average(\n    prices,\n    period=5\n)\n\nprint(f\"Bulk Exponential Moving Average: {ema}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Exponential Moving Average: [\n    104.15165876777255, 105.83886255924172, 106.478672985782, 107.90521327014218, \n    109.72511848341233, 109.6350710900474, 110.24170616113744, 111.46445497630334, \n    112.8957345971564, 112.59715639810429, 113.3175355450237\n]\n</code></pre>"},{"location":"api/standard-indicators/#bollinger_bands","title":"<code>bollinger_bands</code>","text":"<pre><code>bollinger_bands(\n    prices: List[float]\n) -&gt; List[Tuple[float, float, float]]\n</code></pre>"},{"location":"api/standard-indicators/#arguments_3","title":"Arguments","text":"<ul> <li>prices: List of prices</li> </ul>"},{"location":"api/standard-indicators/#returns_3","title":"Returns","text":"<p>List of Bollinger band tuples (lower band, MA, upper band)</p>"},{"location":"api/standard-indicators/#example_3","title":"Example","text":"<pre><code>from pytechnicalindicators import standard_indicators as si\n\nprices = [\n    5224.0, 5223.28, 5238.34, 5294.39, 5306.26, 5297.43, 5311.95, 5314.53,\n    5305.4, 5288.88, 5298.25, 5300.94, 5270.64, 5239.26, 5249.84, 5273.27,\n    5282.59, 5335.27, 5350.22, 5351.13,5352.7, 5359.50\n]\n\nbands = si.bulk.bollinger_bands(prices)\n\nprint(f\"Bulk Bollinger Bands: {bands}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Bollinger Bands: [\n    (5213.581409805746, 5287.7935, 5362.005590194253), \n    (5220.94517276249, 5294.2285, 5367.51182723751), \n    (5230.115435120723, 5301.039500000001, 5371.963564879278)\n]\n</code></pre>"},{"location":"api/standard-indicators/#macd","title":"<code>macd</code>","text":"<pre><code>macd(\n    prices: List[float]\n) -&gt; List[Tuple[float, float, float]]\n</code></pre>"},{"location":"api/standard-indicators/#arguments_4","title":"Arguments","text":"<ul> <li>prices: List of prices</li> </ul>"},{"location":"api/standard-indicators/#returns_4","title":"Returns","text":"<p>List of MACD tuples (MACD, Signal Line, Histogram)</p>"},{"location":"api/standard-indicators/#example_4","title":"Example","text":"<pre><code>from pytechnicalindicators import standard_indicators as si\n\nprices = [\n    5006.28, 5058.21, 5069.38, 5032.25, 5095.91, 5109.44, 5060.61, 5042.65, 5049.49,\n    5122.71, 5168.05, 5188.96, 5181.83, 5203.26, 5224.01, 5223.28, 5238.34, 5294.39,\n    5306.26, 5297.44, 5311.95, 5314.53, 5305.4, 5288.88, 5298.25, 5300.95, 5270.64,\n    5239.26, 5249.84, 5273.28, 5282.59, 5335.28, 5350.22, 5351.13, 5352.7, 5359.51,\n    5425.8\n]\n\nmacd = si.bulk.macd(prices)\n\nprint(f\"Bulk MACD: {macd}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk MACD: [\n    (23.732307403474806, 27.84886885937626, -4.116561455901454), \n    (23.231108818822577, 25.86755810362568, -2.6364492848031027), \n    (23.98848088685554, 24.707439348177488, -0.7189584613219466), \n    (30.420645672222236, 25.56096652679902, 4.859679145423215)]\n\n</code></pre>"},{"location":"api/standard-indicators/#rsi","title":"<code>rsi</code>","text":"<pre><code>rsi(\n    prices: List[float]\n) -&gt; List[float]\n</code></pre>"},{"location":"api/standard-indicators/#arguments_5","title":"Arguments","text":"<ul> <li>prices: List of prices</li> </ul>"},{"location":"api/standard-indicators/#returns_5","title":"Returns","text":"<p>List of Relative Strength Index values</p>"},{"location":"api/standard-indicators/#example_5","title":"Example","text":"<pre><code>from pytechnicalindicators import standard_indicators as si\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nrsi = si.bulk.rsi(prices)\n\nprint(f\"Bulk RSI: {rsi}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk RSI: [48.19372711085414, 47.86761658453627]\n</code></pre>"},{"location":"api/standard-indicators/#single-functions","title":"\ud83d\udfe2 Single Functions","text":""},{"location":"api/standard-indicators/#simple_moving_average_1","title":"<code>simple_moving_average</code>","text":"<pre><code>simple_moving_average(\n    prices: List[float]\n) -&gt; float\n</code></pre>"},{"location":"api/standard-indicators/#arguments_6","title":"Arguments","text":"<ul> <li>prices: List of prices</li> </ul>"},{"location":"api/standard-indicators/#returns_6","title":"Returns","text":"<p>Simple moving average</p>"},{"location":"api/standard-indicators/#example_6","title":"Example","text":"<pre><code>from pytechnicalindicators import standard_indicators as si\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nma = si.single.simple_moving_average(prices)\n\nprint(f\"Single Simple Moving Average: {ma}\")\n</code></pre> <p>Output:</p> <pre><code>Single Simple Moving Average: 108.46666666666667\n</code></pre>"},{"location":"api/standard-indicators/#smoothed_moving_average_1","title":"<code>smoothed_moving_average</code>","text":"<pre><code>smoothed_moving_average(\n    prices: List[float]\n) -&gt; float\n</code></pre>"},{"location":"api/standard-indicators/#arguments_7","title":"Arguments","text":"<ul> <li>prices: List of prices</li> </ul>"},{"location":"api/standard-indicators/#returns_7","title":"Returns","text":"<p>Smoothed moving average</p>"},{"location":"api/standard-indicators/#example_7","title":"Example","text":"<pre><code>from pytechnicalindicators import standard_indicators as si\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nsma = si.single.smoothed_moving_average(prices)\n\nprint(f\"Single Smoothed Moving Average: {sma}\")\n</code></pre> <p>Output:</p> <pre><code>Single Smoothed Moving Average: 109.65816790024674\n</code></pre>"},{"location":"api/standard-indicators/#exponential_moving_average_1","title":"<code>exponential_moving_average</code>","text":"<pre><code>exponential_moving_average(\n    prices: List[float]\n) -&gt; float\n</code></pre>"},{"location":"api/standard-indicators/#arguments_8","title":"Arguments","text":"<ul> <li>prices: List of prices</li> </ul>"},{"location":"api/standard-indicators/#returns_8","title":"Returns","text":"<p>Exponential moving average</p>"},{"location":"api/standard-indicators/#example_8","title":"Example","text":"<pre><code>from pytechnicalindicators import standard_indicators as si\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nema = si.single.exponential_moving_average(prices)\n\nprint(f\"Single Exponential Moving Average: {ema}\")\n</code></pre> <p>Output:</p> <pre><code>Single Exponential Moving Average: 110.62189805422618\n</code></pre>"},{"location":"api/standard-indicators/#bollinger_bands_1","title":"<code>bollinger_bands</code>","text":"<pre><code>bollinger_bands(\n    prices: List[float]\n) -&gt; Tuple[float, float, float]\n</code></pre>"},{"location":"api/standard-indicators/#arguments_9","title":"Arguments","text":"<ul> <li>prices: List of prices</li> </ul>"},{"location":"api/standard-indicators/#returns_9","title":"Returns","text":"<p>Bollinger band tuple (lower band, MA, upper band)</p>"},{"location":"api/standard-indicators/#example_9","title":"Example","text":"<pre><code>from pytechnicalindicators import standard_indicators as si\n\nprices = [\n    5238.34, 5294.39, 5306.26, 5297.43, 5311.95, 5314.53, 5305.4, 5288.88, 5298.25,\n    5300.94, 5270.64, 5239.26, 5249.84, 5273.27, 5282.59, 5335.27, 5350.22, 5351.13,\n    5352.7, 5359.50\n]\n\nbands = si.single.bollinger_bands(prices)\n\nprint(f\"Single Bollinger Bands: {bands}\")\n</code></pre> <p>Output:</p> <pre><code>Single Bollinger Bands: (5230.115435120723, 5301.039500000001, 5371.963564879278)\n</code></pre>"},{"location":"api/standard-indicators/#macd_1","title":"<code>macd</code>","text":"<pre><code>macd(\n    prices: List[float]\n) -&gt; Tuple[float, float, float]\n</code></pre>"},{"location":"api/standard-indicators/#arguments_10","title":"Arguments","text":"<ul> <li>prices: List of prices</li> </ul>"},{"location":"api/standard-indicators/#returns_10","title":"Returns","text":"<p>MACD tuple (MACD, Signal Line, Histogram)</p>"},{"location":"api/standard-indicators/#example_10","title":"Example","text":"<pre><code>from pytechnicalindicators import standard_indicators as si\n\nprices = [\n    5069.38, 5032.25, 5095.91, 5109.44, 5060.61, 5042.65, 5049.49, 5122.71,\n    5168.05, 5188.96, 5181.83, 5203.26, 5224.01, 5223.28, 5238.34, 5294.39,\n    5306.26, 5297.44, 5311.95, 5314.53, 5305.40, 5288.88, 5298.25, 5300.95,\n    5270.64, 5239.26, 5249.84, 5273.28, 5282.59, 5335.28, 5350.22, 5351.13,\n    5352.70, 5359.51,\n]\n\nmacd = si.single.macd(prices)\n\nprint(f\"Single MACD: {macd}\")\n</code></pre> <p>Output:</p> <pre><code>Single MACD: (23.98848088685554, 24.707439348177488, -0.7189584613219466)\n</code></pre>"},{"location":"api/standard-indicators/#rsi_1","title":"<code>rsi</code>","text":"<pre><code>rsi(\n    prices: List[float]\n) -&gt; float\n</code></pre>"},{"location":"api/standard-indicators/#arguments_11","title":"Arguments","text":"<ul> <li>prices: List of prices</li> </ul>"},{"location":"api/standard-indicators/#returns_11","title":"Returns","text":"<p>Relative Strength Index value</p>"},{"location":"api/standard-indicators/#example_11","title":"Example","text":"<pre><code>from pytechnicalindicators import standard_indicators as si\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0,\n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0\n]\n\nrsi = si.single.rsi(prices)\n\nprint(f\"Single RSI: {rsi}\")\n</code></pre> <p>Output:</p> <pre><code>Single RSI: 48.19372711085414\n</code></pre>"},{"location":"api/standard-indicators/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>All input lists must be of type <code>List[float]</code> (Python list of floats)</li> <li>Bulk functions require a <code>period</code> argument for window size where applicable</li> <li>The output format for tuple-returning functions is (lower band, moving average, upper band) for Bollinger Bands and (MACD, Signal Line, Histogram) for MACD</li> </ul>"},{"location":"api/standard-indicators/#see-also","title":"\ud83d\udd17 See Also","text":"<ul> <li>API Reference</li> </ul>"},{"location":"api/strength-indicators/","title":"\ud83d\udcaa Strength Indicators API Reference","text":"<p>Module: <code>strength_indicators</code> </p> <p>The <code>strength_indicators</code> module provides functions to assess the strength and conviction of price movements and trends using volume and price-based calculations.</p>"},{"location":"api/strength-indicators/#when-to-use","title":"\ud83d\udcda When to Use","text":"<p>Use these indicators to: - Analyze volume-price relationships - Gauge market conviction - Identify trend strength</p>"},{"location":"api/strength-indicators/#structure","title":"\ud83c\udfd7\ufe0f Structure","text":"<ul> <li>single: Functions that return a single value for a slice of prices.</li> <li>bulk: Functions that compute values of a slice of prices over a period and return a vector.</li> </ul>"},{"location":"api/strength-indicators/#bulk-functions","title":"\ud83d\ude80 Bulk Functions","text":""},{"location":"api/strength-indicators/#accumulation_distribution","title":"<code>accumulation_distribution</code>","text":"<pre><code>accumulation_distribution(\n    highs: List[float],\n    lows: List[float],\n    close: List[float],\n    volume: List[float],\n    previous_accumulation_distribution: float\n) -&gt; List[float]\n</code></pre>"},{"location":"api/strength-indicators/#arguments","title":"Arguments","text":"<ul> <li>highs: List of high prices</li> <li>lows: List of low prices</li> <li>close: List of closing prices</li> <li>volume: List of volumes</li> <li>previous_accumulation_distribution: Previous AD value (use 0.0 if none)</li> </ul>"},{"location":"api/strength-indicators/#returns","title":"Returns","text":"<p>List of Accumulation Distribution values</p>"},{"location":"api/strength-indicators/#example","title":"Example","text":"<pre><code>from pytechnicalindicators import strength_indicators as si\n\nhighs = [103.0, 102.0, 105.0]\nlows = [99.0, 99.0, 100.0]\nclose = [102.0, 100.0, 103.0]\nvolume = [1000.0, 1500.0, 1200.0]\n\nad = si.bulk.accumulation_distribution(\n    highs, lows, close, volume, previous_accumulation_distribution=0.0\n)\nprint(f\"Bulk Accumulation Distribution: {ad}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Accumulation Distribution: [500.0, 0.0, 240.0]\n</code></pre>"},{"location":"api/strength-indicators/#positive_volume_index","title":"<code>positive_volume_index</code>","text":"<pre><code>positive_volume_index(\n    close: List[float],\n    volume: List[float],\n    previous_volume_index: float\n) -&gt; List[float]\n</code></pre>"},{"location":"api/strength-indicators/#arguments_1","title":"Arguments","text":"<ul> <li>close: List of closing prices</li> <li>volume: List of volumes</li> <li>previous_volume_index: Previous PVI value (use 0.0 if none)</li> </ul>"},{"location":"api/strength-indicators/#returns_1","title":"Returns","text":"<p>List of Positive Volume Index values</p>"},{"location":"api/strength-indicators/#example_1","title":"Example","text":"<pre><code>from pytechnicalindicators import strength_indicators as si\n\nclose = [100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0, 112.0, 109.0]\nvolume = [1000, 1200, 1500, 1100, 1300, 1400, 1250, 1600, 1800, 1350]\n\npvi = si.bulk.positive_volume_index(\n    close, volume, previous_volume_index=0.0\n)\nprint(f\"Bulk Positive Volume Index: {pvi}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Positive Volume Index: [\n    0.0204, 0.021, 0.021, 0.021611650485436895, 0.022019417475728158, 0.022019417475728158, \n    0.02263678432084203, 0.023048362217584613, 0.023048362217584613\n]\n</code></pre>"},{"location":"api/strength-indicators/#negative_volume_index","title":"<code>negative_volume_index</code>","text":"<pre><code>negative_volume_index(\n    close: List[float],\n    volume: List[float],\n    previous_volume_index: float\n) -&gt; List[float]\n</code></pre>"},{"location":"api/strength-indicators/#arguments_2","title":"Arguments","text":"<ul> <li>close: List of closing prices</li> <li>volume: List of volumes</li> <li>previous_volume_index: Previous NVI value (use 0.0 if none)</li> </ul>"},{"location":"api/strength-indicators/#returns_2","title":"Returns","text":"<p>List of Negative Volume Index values</p>"},{"location":"api/strength-indicators/#example_2","title":"Example","text":"<pre><code>from pytechnicalindicators import strength_indicators as si\n\nclose = [100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0, 112.0, 109.0]\nvolume = [1000, 1200, 1500, 1100, 1300, 1400, 1250, 1600, 1800, 1350]\n\nnvi = si.bulk.negative_volume_index(\n    close, volume, previous_volume_index=0.0\n)\nprint(f\"Bulk Negative Volume Index: {nvi}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Negative Volume Index: [\n    0.0, 0.0, -0.01868480725623583, -0.01868480725623583, -0.01868480725623583, -0.018511799781641053, \n    -0.018511799781641053, -0.018511799781641053, -0.018015948001775667\n]\n</code></pre>"},{"location":"api/strength-indicators/#relative_vigor_index","title":"<code>relative_vigor_index</code>","text":"<pre><code>relative_vigor_index(\n    open: List[float],\n    high: List[float],\n    low: List[float],\n    close: List[float],\n    constant_model_type: str,\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/strength-indicators/#arguments_3","title":"Arguments","text":"<ul> <li>open: List of opening prices</li> <li>high: List of highs</li> <li>low: List of lows</li> <li>close: List of closing prices</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>period: Period over which to calculate the RVI</li> </ul>"},{"location":"api/strength-indicators/#returns_3","title":"Returns","text":"<p>List of Relative Vigor Index values</p>"},{"location":"api/strength-indicators/#example_3","title":"Example","text":"<pre><code>from pytechnicalindicators import strength_indicators as si\n\nopen_prices = [98.0, 101.5, 104.5, 102.5, 105.5, 107.5, 106.5, 109.5, 111.5, 108.5]\nhigh_prices = [105.0, 107.0, 110.0, 108.0, 111.0, 113.0, 112.0, 115.0, 117.0, 114.0]\nlow_prices = [95.0, 97.0, 100.0, 98.0, 101.0, 103.0, 102.0, 105.0, 107.0, 104.0]\nclose_prices = [100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0, 112.0, 109.0]\n\nrvi = si.bulk.relative_vigor_index(\n    open_prices, high_prices, low_prices, close_prices,\n    constant_model_type=\"simple_moving_average\",\n    period=5\n)\nprint(f\"Bulk Relative Vigor Index: {rvi}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Relative Vigor Index: [0.0625, 0.05, 0.05, 0.05, 0.05, 0.05]\n</code></pre>"},{"location":"api/strength-indicators/#single-functions","title":"\ud83d\udfe2 Single Functions","text":""},{"location":"api/strength-indicators/#accumulation_distribution_1","title":"<code>accumulation_distribution</code>","text":"<pre><code>accumulation_distribution(\n    high: float,\n    low: float,\n    close: float,\n    volume: float,\n    previous_accumulation_distribution: float\n) -&gt; float\n</code></pre>"},{"location":"api/strength-indicators/#arguments_4","title":"Arguments","text":"<ul> <li>high: High price</li> <li>low: Low price</li> <li>close: Close price</li> <li>volume: Volume</li> <li>previous_accumulation_distribution: Previous AD value (use 0.0 if none)</li> </ul>"},{"location":"api/strength-indicators/#returns_4","title":"Returns","text":"<p>Accumulation Distribution value</p>"},{"location":"api/strength-indicators/#example_4","title":"Example","text":"<pre><code>from pytechnicalindicators import strength_indicators as si\n\nad = si.single.accumulation_distribution(\n    high=103.0, low=99.0, close=102.0, volume=1600.0, previous_accumulation_distribution=0.0\n)\nprint(f\"Single Accumulation Distribution: {ad}\")\n</code></pre> <p>Output:</p> <pre><code>Single Accumulation Distribution: 800.0\n</code></pre>"},{"location":"api/strength-indicators/#volume_index","title":"<code>volume_index</code>","text":"<pre><code>volume_index(\n    current_close: float,\n    previous_close: float,\n    previous_volume_index: float\n) -&gt; float\n</code></pre>"},{"location":"api/strength-indicators/#arguments_5","title":"Arguments","text":"<ul> <li>current_close: Current close price</li> <li>previous_close: Previous close price</li> <li>previous_volume_index: Previous PVI/NVI value (use 0.0 if none)</li> </ul>"},{"location":"api/strength-indicators/#returns_5","title":"Returns","text":"<p>Volume Index value</p>"},{"location":"api/strength-indicators/#example_5","title":"Example","text":"<pre><code>from pytechnicalindicators import strength_indicators as si\n\nvi = si.single.volume_index(\n    current_close=110.0, previous_close=108.0, previous_volume_index=0.0\n)\nprint(f\"Single Volume Index: {vi}\")\n</code></pre> <p>Output:</p> <pre><code>Single Volume Index: 0.01886145404663923\n</code></pre>"},{"location":"api/strength-indicators/#relative_vigor_index_1","title":"<code>relative_vigor_index</code>","text":"<pre><code>relative_vigor_index(\n    open: List[float],\n    high: List[float],\n    low: List[float],\n    close: List[float],\n    constant_model_type: str\n) -&gt; float\n</code></pre>"},{"location":"api/strength-indicators/#arguments_6","title":"Arguments","text":"<ul> <li>open: List of opening prices</li> <li>high: List of highs</li> <li>low: List of lows</li> <li>close: List of closing prices</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> </ul>"},{"location":"api/strength-indicators/#returns_6","title":"Returns","text":"<p>Relative Vigor Index value</p>"},{"location":"api/strength-indicators/#example_6","title":"Example","text":"<pre><code>from pytechnicalindicators import strength_indicators as si\n\nopen_prices = [98.0, 101.5, 104.5, 102.5, 105.5, 107.5, 106.5, 109.5, 111.5, 108.5]\nhigh_prices = [105.0, 107.0, 110.0, 108.0, 111.0, 113.0, 112.0, 115.0, 117.0, 114.0]\nlow_prices = [95.0, 97.0, 100.0, 98.0, 101.0, 103.0, 102.0, 105.0, 107.0, 104.0]\nclose_prices = [100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0, 112.0, 109.0]\n\nrvi = si.single.relative_vigor_index(\n    open_prices, high_prices, low_prices, close_prices,\n    constant_model_type=\"simple_moving_average\"\n)\nprint(f\"Single Relative Vigor Index: {rvi}\")\n</code></pre> <p>Output:</p> <pre><code>Single Relative Vigor Index: 0.05357142857142857\n</code></pre>"},{"location":"api/strength-indicators/#model-type-choices","title":"\ud83e\udde9 Model Type Choices","text":"<p>constant_model_type: - <code>\"simple_moving_average\"</code> - <code>\"smoothed_moving_average\"</code> - <code>\"exponential_moving_average\"</code> - <code>\"simple_moving_median\"</code> - <code>\"simple_moving_mode\"</code></p>"},{"location":"api/strength-indicators/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>All input lists must be of type <code>List[float]</code> (Python list of floats)</li> <li>Bulk functions require a <code>period</code> argument for window size where applicable</li> <li>Use 0.0 for previous values if no prior value exists (e.g., for AD, PVI, NVI)</li> <li>Volume Index is used generically for both Positive and Negative Volume Index calculations</li> </ul>"},{"location":"api/strength-indicators/#see-also","title":"\ud83d\udd17 See Also","text":"<ul> <li>API Reference</li> </ul>"},{"location":"api/trend-indicators/","title":"\ud83d\udcc8 Trend Indicators API Reference","text":"<p>Module: <code>trend_indicators</code> </p> <p>The <code>trend_indicators</code> module provides functions to analyze and quantify price trends in time series data.</p> <p>Trend indicators are used to determine the direction, strength, and potential reversals of market trends.</p>"},{"location":"api/trend-indicators/#when-to-use","title":"\ud83d\udcda When to Use","text":"<p>Use trend indicators to: - Identify the presence and direction of a trend (uptrend, downtrend, or sideways) - Spot trend reversals or trend exhaustion - Confirm other technical signals</p>"},{"location":"api/trend-indicators/#structure","title":"\ud83c\udfd7\ufe0f Structure","text":"<ul> <li>single: Functions that return a single value for a slice of prices.</li> <li>bulk: Functions that compute values of a slice of prices over a period and return a vector.</li> </ul>"},{"location":"api/trend-indicators/#bulk-functions","title":"\ud83d\ude80 Bulk Functions","text":""},{"location":"api/trend-indicators/#aroon_up","title":"<code>aroon_up</code>","text":"<pre><code>aroon_up(\n    highs: List[float],\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/trend-indicators/#arguments","title":"Arguments","text":"<ul> <li>highs: List of highs</li> <li>period: Period over which to calculate the Aroon up</li> </ul>"},{"location":"api/trend-indicators/#returns","title":"Returns","text":"<p>List of Aroon Up values</p>"},{"location":"api/trend-indicators/#example","title":"Example","text":"<pre><code>from pytechnicalindicators import trend_indicators as ti\n\nhighs = [105.0, 107.0, 110.0, 108.0, 111.0, 113.0, 112.0, 115.0, 117.0, 114.0, 116.0, 118.0, 120.0, 117.0, 119.0]\naroon_up = ti.bulk.aroon_up(highs, period=5)\nprint(f\"Bulk Aroon Up: {aroon_up}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Aroon Up: [100.0, 100.0, 75.0, 100.0, 100.0, 75.0, 50.0, 100.0, 100.0, 75.0, 50.0]\n</code></pre>"},{"location":"api/trend-indicators/#aroon_down","title":"<code>aroon_down</code>","text":"<pre><code>aroon_down(\n    lows: List[float],\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/trend-indicators/#arguments_1","title":"Arguments","text":"<ul> <li>lows: List of lows</li> <li>period: Period over which to calculate the Aroon down</li> </ul>"},{"location":"api/trend-indicators/#returns_1","title":"Returns","text":"<p>List of Aroon Down values</p>"},{"location":"api/trend-indicators/#example_1","title":"Example","text":"<pre><code>from pytechnicalindicators import trend_indicators as ti\n\nlows = [95.0, 97.0, 100.0, 98.0, 101.0, 103.0, 102.0, 105.0, 107.0, 104.0, 106.0, 108.0, 110.0, 107.0, 109.0]\naroon_down = ti.bulk.aroon_down(lows, period=5)\nprint(f\"Bulk Aroon Down: {aroon_down}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Aroon Down: [0.0, 0.0, 25.0, 0.0, 0.0, 25.0, 0.0, 50.0, 25.0, 0.0, 0.0]\n</code></pre>"},{"location":"api/trend-indicators/#aroon_oscillator","title":"<code>aroon_oscillator</code>","text":"<pre><code>aroon_oscillator(\n    aroon_up: List[float],\n    aroon_down: List[float]\n) -&gt; List[float]\n</code></pre>"},{"location":"api/trend-indicators/#arguments_2","title":"Arguments","text":"<ul> <li>aroon_up: List of Aroon Up values</li> <li>aroon_down: List of Aroon Down values</li> </ul>"},{"location":"api/trend-indicators/#returns_2","title":"Returns","text":"<p>List of Aroon Oscillator values</p>"},{"location":"api/trend-indicators/#example_2","title":"Example","text":"<pre><code>from pytechnicalindicators import trend_indicators as ti\n\naroon_up = [100.0, 80.0, 60.0, 40.0, 20.0]\naroon_down = [20.0, 40.0, 60.0, 80.0, 100.0]\nosc = ti.bulk.aroon_oscillator(aroon_up, aroon_down)\nprint(f\"Bulk Aroon Oscillator: {osc}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Aroon Oscillator: [80.0, 40.0, 0.0, -40.0, -80.0]\n</code></pre>"},{"location":"api/trend-indicators/#aroon_indicator","title":"<code>aroon_indicator</code>","text":"<pre><code>aroon_indicator(\n    highs: List[float],\n    lows: List[float],\n    period: int\n) -&gt; List[Tuple[float, float, float]]\n</code></pre>"},{"location":"api/trend-indicators/#arguments_3","title":"Arguments","text":"<ul> <li>highs: List of highs</li> <li>lows: List of lows</li> <li>period: Period over which to calculate the Aroon indicator</li> </ul>"},{"location":"api/trend-indicators/#returns_3","title":"Returns","text":"<p>List of Aroon indicator tuples (Aroon Up, Aroon Down, Aroon Oscillator)</p>"},{"location":"api/trend-indicators/#example_3","title":"Example","text":"<pre><code>from pytechnicalindicators import trend_indicators as ti\n\nhighs = [105.0, 107.0, 110.0, 108.0, 111.0, 113.0, 112.0, 115.0, 117.0, 114.0, 116.0, 118.0, 120.0, 117.0, 119.0]\nlows = [95.0, 97.0, 100.0, 98.0, 101.0, 103.0, 102.0, 105.0, 107.0, 104.0, 106.0, 108.0, 110.0, 107.0, 109.0]\naroon = ti.bulk.aroon_indicator(highs, lows, period=5)\nprint(f\"Bulk Aroon Indicator: {aroon}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Aroon Indicator: [\n    (100.0, 0.0, 100.0), (100.0, 0.0, 100.0), (75.0, 25.0, 50.0), (100.0, 0.0, 100.0), \n    (100.0, 0.0, 100.0), (75.0, 25.0, 50.0), (50.0, 0.0, 50.0), (100.0, 50.0, 50.0), \n    (100.0, 25.0, 75.0), (75.0, 0.0, 75.0), (50.0, 0.0, 50.0)\n]\n</code></pre>"},{"location":"api/trend-indicators/#parabolic_time_price_system","title":"<code>parabolic_time_price_system</code>","text":"<pre><code>parabolic_time_price_system(\n    highs: List[float],\n    lows: List[float],\n    af_start: float,\n    af_step: float,\n    af_max: float,\n    position: str,\n    previous_sar: float\n) -&gt; List[float]\n</code></pre>"},{"location":"api/trend-indicators/#arguments_4","title":"Arguments","text":"<ul> <li>highs: List of highs</li> <li>lows: List of lows</li> <li>af_start: Initial acceleration factor</li> <li>af_step: Acceleration factor increment (default 0.02)</li> <li>af_max: Maximum acceleration factor (default 0.2)</li> <li>position: <code>\"long\"</code> or <code>\"short\"</code></li> <li>previous_sar: Previous SAR value (use 0.0 if none)</li> </ul>"},{"location":"api/trend-indicators/#returns_4","title":"Returns","text":"<p>List of SAR values</p>"},{"location":"api/trend-indicators/#example_4","title":"Example","text":"<pre><code>from pytechnicalindicators import trend_indicators as ti\n\nhighs = [105.0, 107.0, 110.0, 108.0, 111.0, 113.0, 112.0, 115.0, 117.0, 114.0]\nlows = [95.0, 97.0, 100.0, 98.0, 101.0, 103.0, 102.0, 105.0, 107.0, 104.0]\n\nsar = ti.bulk.parabolic_time_price_system(\n    highs, lows, af_start=0.02, af_step=0.02, af_max=0.2, position=\"long\", previous_sar=0.0\n)\nprint(f\"Bulk Parabolic Time Price System: {sar}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Parabolic Time Price System: [\n    95.0, 95.0, 95.3, 95.594, 95.90212, 96.2440776, 96.579196048, 96.94761212704, 97.3486598844992, 97.74168668680922\n]\n</code></pre>"},{"location":"api/trend-indicators/#directional_movement_system","title":"<code>directional_movement_system</code>","text":"<pre><code>directional_movement_system(\n    highs: List[float],\n    lows: List[float],\n    close: List[float],\n    period: int,\n    constant_model_type: str\n) -&gt; List[Tuple[float, float, float, float]]\n</code></pre>"},{"location":"api/trend-indicators/#arguments_5","title":"Arguments","text":"<ul> <li>highs: List of highs</li> <li>lows: List of lows</li> <li>close: List of close prices</li> <li>period: Period for calculation</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> </ul>"},{"location":"api/trend-indicators/#returns_5","title":"Returns","text":"<p>List of Directional Movement System tuples (+DI, -DI, ADX, ADXR)</p>"},{"location":"api/trend-indicators/#example_5","title":"Example","text":"<pre><code>from pytechnicalindicators import trend_indicators as ti\n\nhighs = [105.0, 107.0, 110.0, 108.0, 111.0, 113.0, 112.0, 115.0, 117.0, 114.0]\nlows = [95.0, 97.0, 100.0, 98.0, 101.0, 103.0, 102.0, 105.0, 107.0, 104.0]\nclose = [100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0, 112.0, 109.0]\n\ndms = ti.bulk.directional_movement_system(\n    highs, lows, close, period=3, constant_model_type=\"simple_moving_average\"\n)\nprint(f\"Bulk Directional Movement System: {dms}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Directional Movement System: [\n    (16.666666666666664, 3.3333333333333335, 58.73015873015871, 51.984126984126966), \n    (16.666666666666664, 3.3333333333333335, 66.66666666666666, 59.92063492063491), \n    (16.666666666666664, 10.0, 52.77777777777777, 55.75396825396824)\n]\n</code></pre>"},{"location":"api/trend-indicators/#volume_price_trend","title":"<code>volume_price_trend</code>","text":"<pre><code>volume_price_trend(\n    prices: List[float],\n    volumes: List[float],\n    previous_vpt: float\n) -&gt; List[float]\n</code></pre>"},{"location":"api/trend-indicators/#arguments_6","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>volumes: List of volumes</li> <li>previous_vpt: Previous VPT value (use 0.0 if none)</li> </ul>"},{"location":"api/trend-indicators/#returns_6","title":"Returns","text":"<p>List of VPT values</p>"},{"location":"api/trend-indicators/#example_6","title":"Example","text":"<pre><code>from pytechnicalindicators import trend_indicators as ti\n\nprices = [100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0, 112.0, 109.0]\nvolumes = [1000, 1200, 1500, 1100, 1300, 1400, 1250, 1600, 1800]\n\nvpt = ti.bulk.volume_price_trend(\n    prices, volumes, previous_vpt=0.0\n)\nprint(f\"Bulk Volume Price Trend: {vpt}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Volume Price Trend: [\n    20.0, 55.294117647058826, 26.722689075630253, 58.761524027086566, 83.28982591387901, \n    70.32686295091605, 105.37359192287866, 134.46450101378775, 86.25021529950205\n]\n</code></pre>"},{"location":"api/trend-indicators/#true_strength_index","title":"<code>true_strength_index</code>","text":"<pre><code>true_strength_index(\n    prices: List[float],\n    first_constant_model: str,\n    first_period: int,\n    second_constant_model: str,\n    second_period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/trend-indicators/#arguments_7","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>first_constant_model: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>first_period: Period for first smoothing</li> <li>second_constant_model: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>second_period: Period for second smoothing</li> </ul>"},{"location":"api/trend-indicators/#returns_7","title":"Returns","text":"<p>List of TSI values</p>"},{"location":"api/trend-indicators/#example_7","title":"Example","text":"<pre><code>from pytechnicalindicators import trend_indicators as ti\n\nprices = [100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0, 112.0, 109.0]\n\ntsi = ti.bulk.true_strength_index(\n    prices,\n    first_constant_model=\"exponential_moving_average\",\n    first_period=3,\n    second_constant_model=\"exponential_moving_average\",\n    second_period=5\n)\nprint(f\"Bulk True Strength Index: {tsi}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk True Strength Index: [0.5758338577721839, 0.7186215618084096, 0.2882438316400581]\n</code></pre>"},{"location":"api/trend-indicators/#single-functions","title":"\ud83d\udfe2 Single Functions","text":""},{"location":"api/trend-indicators/#aroon_up_1","title":"<code>aroon_up</code>","text":"<pre><code>aroon_up(\n    highs: List[float]\n) -&gt; float\n</code></pre>"},{"location":"api/trend-indicators/#arguments_8","title":"Arguments","text":"<ul> <li>highs: List of highs</li> </ul>"},{"location":"api/trend-indicators/#returns_8","title":"Returns","text":"<p>Aroon Up value</p>"},{"location":"api/trend-indicators/#example_8","title":"Example","text":"<pre><code>from pytechnicalindicators import trend_indicators as ti\n\nhighs = [105.0, 107.0, 110.0, 108.0, 111.0]\naroon_up = ti.single.aroon_up(highs)\nprint(f\"Single Aroon Up: {aroon_up}\")\n</code></pre> <p>Output:</p> <pre><code>Single Aroon Up: 100.0\n</code></pre>"},{"location":"api/trend-indicators/#aroon_down_1","title":"<code>aroon_down</code>","text":"<pre><code>aroon_down(\n    lows: List[float]\n) -&gt; float\n</code></pre>"},{"location":"api/trend-indicators/#arguments_9","title":"Arguments","text":"<ul> <li>lows: List of lows</li> </ul>"},{"location":"api/trend-indicators/#returns_9","title":"Returns","text":"<p>Aroon Down value</p>"},{"location":"api/trend-indicators/#example_9","title":"Example","text":"<pre><code>from pytechnicalindicators import trend_indicators as ti\n\nlows = [95.0, 97.0, 100.0, 98.0, 101.0]\naroon_down = ti.single.aroon_down(lows)\nprint(f\"Single Aroon Down: {aroon_down}\")\n</code></pre> <p>Output:</p> <pre><code>Single Aroon Down: 0.0\n</code></pre>"},{"location":"api/trend-indicators/#aroon_oscillator_1","title":"<code>aroon_oscillator</code>","text":"<pre><code>aroon_oscillator(\n    aroon_up: float,\n    aroon_down: float\n) -&gt; float\n</code></pre>"},{"location":"api/trend-indicators/#arguments_10","title":"Arguments","text":"<ul> <li>aroon_up: Aroon Up value</li> <li>aroon_down: Aroon Down value</li> </ul>"},{"location":"api/trend-indicators/#returns_10","title":"Returns","text":"<p>Aroon Oscillator value</p>"},{"location":"api/trend-indicators/#example_10","title":"Example","text":"<pre><code>from pytechnicalindicators import trend_indicators as ti\n\nosc = ti.single.aroon_oscillator(80.0, 20.0)\nprint(f\"Single Aroon Oscillator: {osc}\")\n</code></pre> <p>Output:</p> <pre><code>Single Aroon Oscillator: 60.0\n</code></pre>"},{"location":"api/trend-indicators/#aroon_indicator_1","title":"<code>aroon_indicator</code>","text":"<pre><code>aroon_indicator(\n    highs: List[float],\n    lows: List[float]\n) -&gt; Tuple[float, float, float]\n</code></pre>"},{"location":"api/trend-indicators/#arguments_11","title":"Arguments","text":"<ul> <li>highs: List of highs</li> <li>lows: List of lows</li> </ul>"},{"location":"api/trend-indicators/#returns_11","title":"Returns","text":"<p>Aroon indicator tuple (Aroon Up, Aroon Down, Aroon Oscillator)</p>"},{"location":"api/trend-indicators/#example_11","title":"Example","text":"<pre><code>from pytechnicalindicators import trend_indicators as ti\n\nhighs = [105.0, 107.0, 110.0, 108.0, 111.0]\nlows = [95.0, 97.0, 100.0, 98.0, 101.0]\naroon = ti.single.aroon_indicator(highs, lows)\nprint(f\"Single Aroon Indicator: {aroon}\")\n</code></pre> <p>Output:</p> <pre><code>Single Aroon Indicator: (100.0, 0.0, 100.0)\n</code></pre>"},{"location":"api/trend-indicators/#long_parabolic_time_price_system","title":"<code>long_parabolic_time_price_system</code>","text":"<pre><code>long_parabolic_time_price_system(\n    previous_sar: float,\n    extreme_point: float,\n    af: float,\n    low: float\n) -&gt; float\n</code></pre>"},{"location":"api/trend-indicators/#arguments_12","title":"Arguments","text":"<ul> <li>previous_sar: Previous SAR value (if none use period low)</li> <li>extreme_point: Highest high for the period</li> <li>af: Acceleration factor (default 0.02)</li> <li>low: Lowest low for t or t-1</li> </ul>"},{"location":"api/trend-indicators/#returns_12","title":"Returns","text":"<p>SAR value</p>"},{"location":"api/trend-indicators/#example_12","title":"Example","text":"<pre><code>from pytechnicalindicators import trend_indicators as ti\n\nsar = ti.single.long_parabolic_time_price_system(\n    previous_sar=98.0, extreme_point=111.0, af=0.02, low=95.0\n)\nprint(f\"Single Long Parabolic SAR: {sar}\")\n</code></pre> <p>Output:</p> <pre><code>Single Long Parabolic SAR: 95.0\n</code></pre>"},{"location":"api/trend-indicators/#short_parabolic_time_price_system","title":"<code>short_parabolic_time_price_system</code>","text":"<pre><code>short_parabolic_time_price_system(\n    previous_sar: float,\n    extreme_point: float,\n    af: float,\n    high: float\n) -&gt; float\n</code></pre>"},{"location":"api/trend-indicators/#arguments_13","title":"Arguments","text":"<ul> <li>previous_sar: Previous SAR value (if none use period high)</li> <li>extreme_point: Lowest low for the period</li> <li>af: Acceleration factor (default 0.02)</li> <li>high: Highest high for t or t-1</li> </ul>"},{"location":"api/trend-indicators/#returns_13","title":"Returns","text":"<p>SAR value</p>"},{"location":"api/trend-indicators/#example_13","title":"Example","text":"<pre><code>from pytechnicalindicators import trend_indicators as ti\n\nsar = ti.single.short_parabolic_time_price_system(\n    previous_sar=112.0, extreme_point=95.0, af=0.02, high=119.0\n)\nprint(f\"Single Short Parabolic SAR: {sar}\")\n</code></pre> <p>Output:</p> <pre><code>Single Short Parabolic SAR: 119.0\n</code></pre>"},{"location":"api/trend-indicators/#volume_price_trend_1","title":"<code>volume_price_trend</code>","text":"<pre><code>volume_price_trend(\n    current_price: float,\n    previous_price: float,\n    current_volume: float,\n    previous_vpt: float\n) -&gt; float\n</code></pre>"},{"location":"api/trend-indicators/#arguments_14","title":"Arguments","text":"<ul> <li>current_price: Current price</li> <li>previous_price: Previous price</li> <li>current_volume: Current volume</li> <li>previous_vpt: Previous VPT value (use 0.0 if none)</li> </ul>"},{"location":"api/trend-indicators/#returns_14","title":"Returns","text":"<p>VPT value</p>"},{"location":"api/trend-indicators/#example_14","title":"Example","text":"<pre><code>from pytechnicalindicators import trend_indicators as ti\n\nvpt = ti.single.volume_price_trend(\n    current_price=114.0, previous_price=112.0, current_volume=1500.0, previous_vpt=0.0\n)\nprint(f\"Single Volume Price Trend: {vpt}\")\n</code></pre> <p>Output:</p> <pre><code>Single Volume Price Trend: 26.785714285714285\n</code></pre>"},{"location":"api/trend-indicators/#true_strength_index_1","title":"<code>true_strength_index</code>","text":"<pre><code>true_strength_index(\n    prices: List[float],\n    first_period: int,\n    first_constant_model: str,\n    second_constant_model: str\n) -&gt; float\n</code></pre>"},{"location":"api/trend-indicators/#arguments_15","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>first_period: Period for first smoothing</li> <li>first_constant_model: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> <li>second_constant_model: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> </ul>"},{"location":"api/trend-indicators/#returns_15","title":"Returns","text":"<p>TSI value</p>"},{"location":"api/trend-indicators/#example_15","title":"Example","text":"<pre><code>from pytechnicalindicators import trend_indicators as ti\n\nprices = [100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0, 112.0, 109.0]\ntsi = ti.single.true_strength_index(\n    prices,\n    first_period=5,\n    first_constant_model=\"exponential_moving_average\",\n    second_constant_model=\"exponential_moving_average\"\n)\nprint(f\"Single True Strength Index: {tsi}\")\n</code></pre> <p>Output:</p> <pre><code>Single True Strength Index: 0.38660105755017404\n</code></pre>"},{"location":"api/trend-indicators/#model-type-choices","title":"\ud83e\udde9 Model Type Choices","text":"<p>constant_model_type / first_constant_model / second_constant_model: - <code>\"simple_moving_average\"</code> - <code>\"smoothed_moving_average\"</code> - <code>\"exponential_moving_average\"</code> - <code>\"simple_moving_median\"</code> - <code>\"simple_moving_mode\"</code></p>"},{"location":"api/trend-indicators/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>All input lists must be of type <code>List[float]</code> (Python list of floats)</li> <li>Bulk functions require a <code>period</code> argument for window size where applicable</li> <li>Use 0.0 for previous values if no prior value exists (e.g., SAR, VPT)</li> <li>Parabolic SAR and DMS support both <code>\"long\"</code> and <code>\"short\"</code> positions where specified</li> </ul>"},{"location":"api/trend-indicators/#see-also","title":"\ud83d\udd17 See Also","text":"<ul> <li>API Reference</li> </ul>"},{"location":"api/volatility-indicators/","title":"Volatility Indicators API Reference","text":"<p>Module: <code>volatility_indicators</code> </p> <p>The <code>volatility_indicators</code> module provides functions for measuring the volatility of an asset\u2014how much and how quickly prices move over time.</p>"},{"location":"api/volatility-indicators/#structure","title":"\ud83c\udfd7\ufe0f Structure","text":"<ul> <li>single: Functions that return a single value for a slice of prices.</li> <li>bulk: Functions that compute values of a slice of prices over a period and return a vector.</li> </ul>"},{"location":"api/volatility-indicators/#bulk-functions","title":"\ud83d\ude80 Bulk Functions","text":""},{"location":"api/volatility-indicators/#ulcer_index","title":"<code>ulcer_index</code>","text":"<pre><code>ulcer_index(\n    prices: List[float],\n    period: int\n) -&gt; List[float]\n</code></pre>"},{"location":"api/volatility-indicators/#arguments","title":"Arguments","text":"<ul> <li>prices: List of prices</li> <li>period: Period over which to calculate the Ulcer Index</li> </ul>"},{"location":"api/volatility-indicators/#returns","title":"Returns","text":"<p>List of Ulcer Index values (one per window)</p>"},{"location":"api/volatility-indicators/#example","title":"Example","text":"<pre><code>from pytechnicalindicators import volatility_indicators as vi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0, \n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nulcer = vi.bulk.ulcer_index(\n    prices,\n    period=10\n)\n\nprint(f\"Bulk Ulcer Index: {ulcer}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Ulcer Index: [\n    1.079824135315245, 1.116127031732687, 1.116127031732687, 0.9396423572728076, 1.2503827654555648, 1.2802622492591058\n]\n</code></pre>"},{"location":"api/volatility-indicators/#volatility_system","title":"<code>volatility_system</code>","text":"<pre><code>volatility_system(\n    high: List[float],\n    low: List[float],\n    close: List[float],\n    period: int,\n    constant_multiplier: float,\n    constant_model_type: str\n) -&gt; List[float]\n</code></pre>"},{"location":"api/volatility-indicators/#arguments_1","title":"Arguments","text":"<ul> <li>high: List of highs</li> <li>low: List of lows</li> <li>close: List of closing prices</li> <li>period: Period over which to calculate the volatility system</li> <li>constant_multiplier: Multiplier for ATR</li> <li>constant_model_type: Choice of:<ul> <li><code>\"simple_moving_average\"</code></li> <li><code>\"smoothed_moving_average\"</code></li> <li><code>\"exponential_moving_average\"</code></li> <li><code>\"simple_moving_median\"</code></li> <li><code>\"simple_moving_mode\"</code></li> </ul> </li> </ul>"},{"location":"api/volatility-indicators/#returns_1","title":"Returns","text":"<p>List of volatility system SaR points</p>"},{"location":"api/volatility-indicators/#example_1","title":"Example","text":"<pre><code>from pytechnicalindicators import volatility_indicators as vi\n\nhigh = [105.0, 107.0, 110.0, 108.0, 111.0, 113.0, 112.0, 115.0, 117.0, 114.0, 116.0, 118.0, 120.0, 117.0, 119.0]\nlow = [95.0, 97.0, 100.0, 98.0, 101.0, 103.0, 102.0, 105.0, 107.0, 104.0, 106.0, 108.0, 110.0, 107.0, 109.0]\nclose = [100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0, 112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0]\n\nvolsys = vi.bulk.volatility_system(\n    high,\n    low,\n    close,\n    period=14,\n    constant_multiplier=2.0,\n    constant_model_type=\"exponential_moving_average\"\n)\n\nprint(f\"Bulk Volatility System: {volsys}\")\n</code></pre> <p>Output:</p> <pre><code>Bulk Volatility System: [95.0, 95.0]\n</code></pre>"},{"location":"api/volatility-indicators/#single-functions","title":"\ud83d\udfe2 Single Functions","text":""},{"location":"api/volatility-indicators/#ulcer_index_1","title":"<code>ulcer_index</code>","text":"<pre><code>ulcer_index(\n    prices: List[float]\n) -&gt; float\n</code></pre>"},{"location":"api/volatility-indicators/#arguments_2","title":"Arguments","text":"<ul> <li>prices: List of prices</li> </ul>"},{"location":"api/volatility-indicators/#returns_2","title":"Returns","text":"<p>Ulcer Index value</p>"},{"location":"api/volatility-indicators/#example_2","title":"Example","text":"<pre><code>from pytechnicalindicators import volatility_indicators as vi\n\nprices = [\n    100.0, 102.0, 105.0, 103.0, 106.0, 108.0, 107.0, 110.0, \n    112.0, 109.0, 111.0, 113.0, 115.0, 112.0, 114.0\n]\n\nulcer = vi.single.ulcer_index(prices)\n\nprint(f\"Single Ulcer Index: {ulcer}\")\n</code></pre> <p>Output:</p> <pre><code>Single Ulcer Index: 1.1552440487507982\n</code></pre>"},{"location":"api/volatility-indicators/#model-type-choices","title":"\ud83e\udde9 Model Type Choices","text":"<p>constant_model_type: - <code>\"simple_moving_average\"</code> - <code>\"smoothed_moving_average\"</code> - <code>\"exponential_moving_average\"</code> - <code>\"simple_moving_median\"</code> - <code>\"simple_moving_mode\"</code></p>"},{"location":"api/volatility-indicators/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>All input lists must be of type <code>List[float]</code> (Python list of floats)</li> <li>Bulk functions require a <code>period</code> argument for window size</li> <li>Ulcer Index measures downside volatility (drawdown risk)</li> <li>Volatility System is a stop-and-reverse (SaR) trend system</li> </ul>"},{"location":"api/volatility-indicators/#see-also","title":"\ud83d\udd17 See Also","text":"<ul> <li>API Reference</li> </ul>"},{"location":"benchmarks/","title":"PyTechnicalIndicators Benchmarks","text":"<p>Performance benchmarks for PyTechnicalIndicators library using pytest-benchmark.</p>"},{"location":"benchmarks/#setup","title":"Setup","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"benchmarks/#running-benchmarks","title":"Running Benchmarks","text":""},{"location":"benchmarks/#basic-benchmark-run","title":"Basic benchmark run","text":"<pre><code>pytest\n</code></pre>"},{"location":"benchmarks/#run-specific-indicator-groups","title":"Run specific indicator groups","text":"<pre><code>pytest -k \"rsi_single\"      # Only Single RSI benchmarks\npytest -k \"rsi_bulk\"        # Only Bulk RSI benchmarks  \npytest -k \"small\"           # Only small dataset benchmarks\npytest -k \"trend\"           # Only trend indicators\n</code></pre>"},{"location":"benchmarks/#run-with-different-output-formats","title":"Run with different output formats","text":"<pre><code># Table output (default)\npytest --benchmark-columns=min,max,mean,stddev,rounds\n\n# JSON output for CI/analysis\npytest --benchmark-json=results/benchmark_results.json\n\n# HTML report\npytest --benchmark-json=results/results.json\npython -m pytest_benchmark compare results/results.json --csv=results/benchmark.csv\n\n# Histogram\npytest --benchmark-histogram=results/histogram.svg\n</code></pre>"},{"location":"benchmarks/#compare-benchmark-results","title":"Compare benchmark results","text":"<pre><code># Run baseline\npytest --benchmark-json=results/baseline.json\n\n# Run after changes  \npytest --benchmark-json=results/current.json\n\n# Compare\npytest-benchmark compare results/baseline.json results/current.json\n</code></pre>"},{"location":"benchmarks/#performance-analysis","title":"Performance analysis","text":"<pre><code># Sort by different metrics\npytest --benchmark-sort=min\npytest --benchmark-sort=max  \npytest --benchmark-sort=mean\npytest --benchmark-sort=stddev\n\n# Skip slow tests\npytest -k \"not large\"\n\n# Only run large dataset tests\npytest -k \"large\"\n</code></pre>"},{"location":"benchmarks/#about-the-benchmark-tests","title":"About the benchmark tests","text":""},{"location":"benchmarks/#before-you-start","title":"Before you start","text":"<p>Each indicator is benchmarked according to the PyTechnicalIndicators code file they live in.</p> <p>For example, <code>relative_strength_index</code> lives in the <code>momentum_indicators</code> file, its benchmark file will be <code>test_momentum_indicators_bench.py</code>.</p> <p>Each different flavor of the indicator is tested, this means all different constant model types,  and deviation models are tested, and in different combinations. This leads to a lot of different benches of the same function, but gives us a good idea of how the different deviation and constant models interact.</p> <p>All benchmarks were run on a Raspberry Pi 5 (8GB RAM) split over different data sizes. Why a Raspberry Pi? It\u2019s a familiar, modest baseline, your machine is probably much faster! For more details, see the Raspberry Pi 5 benchmarks.</p> <p>All benchmarks were saved under <code>results/</code> so that they can be used as comparaisons. The results are split by  data size as there a lot of benchmarks run.</p>"},{"location":"benchmarks/#data-sizes","title":"Data Sizes","text":"<p>The full data set is daily data over the course of 10 years</p> <ul> <li>Small: 255 data points (1 year of daily data)</li> <li>Medium: 1276 data points (5 years of daily data)</li> <li>Large: 2552 data points (10 years of daily data)</li> </ul> <p>If you want to know how quickly the code will run for your dataset, you will need to study your data to see in which size category it falls under, then narrow it down to which indicators you're interested in and benchmark those.  This will give you a better picutre of what to expect.</p>"},{"location":"benchmarks/#results","title":"Results","text":"<p>The following is a summary of the results from the RPI5 benches, a link to the full bench tables can be found under each category.</p> <p>The results are split by indicator category, then data size. For indicators that have multiple possible combinations (constant model type, deviation model...) only the fastest and the slowest combination is provided here. Full combination runs can be found in their respective benchmark tables.</p>"},{"location":"benchmarks/#candle-indicators","title":"Candle Indicators","text":""},{"location":"benchmarks/#small","title":"Small","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_mce[small-simple]</code> 14015 3.94 45.57 4.09 4.06 0.79 2.44e+05 <code>test_single_mce[small-mode]</code> 34351 15.11 248.30 16.33 16.24 2.11 6.12e+04 <code>test_bulk_mce[small-simple]</code> 262 26.43 137.02 27.30 26.70 6.93 3.66e+04 <code>test_bulk_mce[small-mode]</code> 2693 330.95 611.97 343.54 336.84 21.40 2.91e+03 <code>test_single_mcginley_env[small]</code> 121625 3.76 253.35 3.91 3.87 1.37 2.56e+05 <code>test_bulk_mcginley_env[small]</code> 23643 25.13 3349.75 28.53 26.17 23.38 3.51e+04 <code>test_single_bands[small-standard-simple]</code> 33519 4.41 1391.07 5.22 4.78 9.53 1.91e+05 <code>test_single_bands[small-mode-mode]</code> 26176 26.63 403.84 29.39 28.76 8.51 3.40e+04 <code>test_bulk_bands[small-standard-simple]</code> 10822 40.15 445.73 42.85 41.07 12.14 2.33e+04 <code>test_bulk_bands[small-ulcer-mode]</code> 1602 430.80 3330.51 501.20 489.79 122.87 2.00e+03 <code>test_single_mcginley_bands[small-standard]</code> 41926 4.48 60.56 4.74 4.61 1.00 2.11e+05 <code>test_single_mcginley_bands[small-mode]</code> 33541 15.24 63.32 16.58 16.50 1.00 6.03e+04 <code>test_bulk_mcginley_bands[small-mean]</code> 13149 33.63 86.76 35.30 34.69 2.61 2.83e+04 <code>test_bulk_mcginley_bands[small-mode]</code> 2192 344.84 827.49 367.55 359.25 27.19 2.72e+03 <code>test_single_ichimoku[small]</code> 47660 11.00 113.87 11.56 11.44 0.97 8.65e+04 <code>test_bulk_ichimoku[small]</code> 7484 90.72 155.56 92.78 91.56 3.71 1.08e+04 <code>test_single_donchian[small]</code> 65536 8.35 60.02 8.58 8.52 0.67 1.17e+05 <code>test_bulk_donchian[small]</code> 14647 38.13 107.59 39.72 39.24 2.14 2.52e+04 <code>test_single_keltner[small-simple-simple]</code> 45532 12.06 69.74 12.69 12.57 1.04 7.88e+04 <code>test_single_keltner[small-mode-mode]</code> 21506 30.46 104.15 32.82 32.65 1.90 3.05e+04 <code>test_bulk_keltner[small-simple-simple]</code> 9755 68.91 140.58 70.90 69.85 3.65 1.41e+04 <code>test_bulk_keltner[small-mode-mode]</code> 1350 651.21 866.34 677.04 670.89 25.20 1.48e+03 <code>test_single_supertrend[small-simple]</code> 51624 12.67 56.72 12.94 12.83 0.92 7.73e+04 <code>test_single_supertrend[small-mode]</code> 33730 19.11 115.43 20.42 20.31 1.40 4.90e+04 <code>test_bulk_supertrend[small-simple]</code> 13716 45.24 123.82 46.27 45.82 2.44 2.16e+04 <code>test_bulk_supertrend[small-mode]</code> 2700 314.34 385.78 322.69 320.58 6.51 3.10e+03"},{"location":"benchmarks/#medium","title":"Medium","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_mce[medium-simple]</code> 30287 17.94 36.87 18.17 18.13 0.26 5.50e+04 <code>test_single_mce[medium-mode]</code> 11699 70.56 981.17 75.59 74.89 10.18 1.32e+04 <code>test_bulk_mce[medium-simple]</code> 1225 139.13 565.80 142.80 140.09 15.91 7.00e+03 <code>test_bulk_mce[medium-mode]</code> 561 1740.75 2524.77 1779.91 1763.66 49.48 5.62e+02 <code>test_single_mcginley_env[medium]</code> 30946 16.67 359.19 17.27 16.91 4.02 5.79e+04 <code>test_bulk_mcginley_env[medium]</code> 5846 133.52 470.28 140.53 135.39 18.69 7.12e+03 <code>test_single_bands[medium-mean-simple]</code> 40269 19.87 92.80 20.34 20.15 2.45 4.92e+04 <code>test_single_bands[medium-ulcer-mode]</code> 543 1752.67 2008.73 1789.22 1767.56 47.47 5.59e+02 <code>test_bulk_bands[medium-mean-simple]</code> 4884 187.41 804.74 192.65 189.19 19.60 5.19e+03 <code>test_bulk_bands[medium-mode-mode]</code> 283 3387.07 3914.07 3467.76 3449.13 62.49 2.88e+02 <code>test_single_mcginley_bands[medium-mean]</code> 43939 18.57 80.65 19.18 19.06 2.23 5.21e+04 <code>test_single_mcginley_bands[medium-ulcer]</code> 587 1696.64 1864.45 1709.24 1698.88 23.54 5.85e+02 <code>test_bulk_mcginley_bands[medium-mean]</code> 5391 172.22 324.26 175.96 174.28 9.18 5.68e+03 <code>test_bulk_mcginley_bands[medium-mode]</code> 533 1806.40 2353.66 1842.36 1820.67 51.06 5.43e+02 <code>test_single_ichimoku[medium]</code> 17476 49.98 96.70 50.71 50.50 1.14 1.97e+04 <code>test_bulk_ichimoku[medium]</code> 870 531.65 649.41 534.60 532.72 10.28 1.87e+03 <code>test_single_donchian[medium]</code> 22776 38.69 67.02 39.02 38.98 0.55 2.56e+04 <code>test_bulk_donchian[medium]</code> 3985 199.28 1303.17 203.70 202.96 18.97 4.91e+03 <code>test_single_keltner[medium-simple-simple]</code> 15250 56.04 1239.69 56.84 56.46 10.04 1.76e+04 <code>test_single_keltner[medium-mode-mode]</code> 6178 135.54 262.80 145.01 144.93 4.03 6.90e+03 <code>test_bulk_keltner[medium-simple-simple]</code> 366 361.43 472.24 365.80 362.82 12.57 2.73e+03 <code>test_bulk_keltner[medium-mode-mode]</code> 295 3307.79 3657.09 3365.07 3349.55 55.23 2.97e+02 <code>test_single_supertrend[medium-simple]</code> 14690 56.85 95.43 57.80 57.30 1.09 1.73e+04 <code>test_single_supertrend[medium-mode]</code> 9320 85.44 143.24 90.95 91.13 2.00 1.10e+04 <code>test_bulk_supertrend[medium-simple]</code> 3658 232.67 277.20 235.10 234.46 2.87 4.25e+03 <code>test_bulk_supertrend[medium-mode]</code> 603 1589.60 7154.47 1632.99 1622.51 225.84 6.12e+02"},{"location":"benchmarks/#large","title":"Large","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_mce[large-simple]</code> 16912 34.70 100.94 35.48 35.24 3.40 2.82e+04 <code>test_single_mce[large-mode]</code> 6075 142.78 398.39 150.90 149.72 8.57 6.63e+03 <code>test_bulk_mce[large-simple]</code> 1138 288.48 449.33 294.61 290.65 15.23 3.39e+03 <code>test_bulk_mce[large-mode]</code> 263 3658.81 4139.33 3710.86 3690.35 52.10 2.69e+02 <code>test_single_mcginley_env[large]</code> 25472 33.44 218.54 34.23 34.04 3.43 2.92e+04 <code>test_bulk_mcginley_env[large]</code> 2665 279.45 599.76 284.83 281.44 16.06 3.51e+03 <code>test_single_bands[large-mean-simple]</code> 21845 39.65 228.30 40.32 39.93 4.10 2.48e+04 <code>test_single_bands[large-ulcer-mode]</code> 145 6903.54 7040.79 6913.58 6909.32 15.99 1.45e+02 <code>test_bulk_bands[large-mean-simple]</code> 2454 384.39 595.15 389.18 387.63 12.53 2.57e+03 <code>test_bulk_bands[large-mode-mode]</code> 139 7087.03 7451.68 7132.68 7123.31 40.17 1.40e+02 <code>test_single_mcginley_bands[large-mean]</code> 23488 36.35 63.45 37.00 37.00 0.64 2.70e+04 <code>test_single_mcginley_bands[large-ulcer]</code> 147 6787.41 6890.86 6793.59 6790.34 11.68 1.47e+02 <code>test_bulk_mcginley_bands[large-mean]</code> 2612 356.63 628.30 360.35 358.69 14.55 2.78e+03 <code>test_bulk_mcginley_bands[large-mode]</code> 262 3756.16 4239.63 3772.07 3766.30 33.39 2.65e+02 <code>test_single_ichimoku[large]</code> 9052 103.02 158.87 104.11 103.91 1.92 9.60e+03 <code>test_bulk_ichimoku[large]</code> 192 1089.34 1541.80 1105.23 1092.71 56.55 9.05e+02 <code>test_single_donchian[large]</code> 11934 78.98 112.37 79.79 79.65 1.06 1.25e+04 <code>test_bulk_donchian[large]</code> 1808 414.35 715.54 418.40 416.45 15.84 2.39e+03 <code>test_single_keltner[large-simple-simple]</code> 7810 109.67 222.43 112.84 112.46 3.28 8.86e+03 <code>test_single_keltner[large-mode-mode]</code> 3264 275.56 446.06 290.56 290.46 6.65 3.44e+03 <code>test_bulk_keltner[large-simple-simple]</code> 1151 735.98 1044.25 742.41 739.86 19.29 1.35e+03 <code>test_bulk_keltner[large-mode-mode]</code> 138 7101.66 7807.01 7145.78 7128.74 82.83 1.40e+02 <code>test_single_supertrend[large-simple]</code> 7921 115.04 169.19 116.83 116.69 2.56 8.56e+03 <code>test_single_supertrend[large-mode]</code> 5216 168.54 245.02 179.49 179.58 3.51 5.57e+03 <code>test_bulk_supertrend[large-simple]</code> 1963 468.22 558.85 473.25 472.54 5.84 2.11e+03 <code>test_bulk_supertrend[large-mode]</code> 282 3491.31 3766.89 3531.67 3531.92 22.97 2.83e+02"},{"location":"benchmarks/#chart-trends","title":"Chart Trends","text":""},{"location":"benchmarks/#small_1","title":"Small","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_peaks[10-small]</code> 28769 28.70 114.44 28.94 28.87 0.89 3.46e+04 <code>test_peaks[1-small]</code> 19875 29.13 76.41 29.33 29.24 1.25 3.41e+04 <code>test_valleys[5-small]</code> 26368 30.11 151.41 30.33 30.24 1.42 3.30e+04 <code>test_valleys[1-small]</code> 23716 30.39 56.09 30.56 30.52 0.45 3.27e+04 <code>test_peak_trend[3-small]</code> 45076 8.13 127.78 8.37 8.26 1.35 1.19e+05 <code>test_peak_trend[20-small]</code> 45571 14.39 35.82 14.55 14.52 0.29 6.87e+04 <code>test_valley_trend[3-small]</code> 54219 8.24 183.48 8.41 8.37 0.98 1.19e+05 <code>test_valley_trend[20-small]</code> 35880 15.04 36.26 15.18 15.15 0.36 6.59e+04 <code>test_overall_trend[small]</code> 102281 4.65 29.06 4.75 4.74 0.23 2.11e+05 <code>test_break_down_trends[1.0-0.75-1-small]</code> 13246 51.09 166.96 52.03 51.69 2.78 1.92e+04 <code>test_break_down_trends[1.5-0.5-1-small]</code> 10859 58.95 167.43 59.88 59.61 2.57 1.67e+04"},{"location":"benchmarks/#medium_1","title":"Medium","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_peaks[10-medium]</code> 5871 157.65 284.93 159.20 158.08 4.52 6.28e+03 <code>test_peaks[1-medium]</code> 4721 167.78 1002.62 176.34 168.71 23.06 5.67e+03 <code>test_valleys[10-medium]</code> 5307 175.06 265.35 175.67 175.32 1.95 5.69e+03 <code>test_valleys[1-medium]</code> 4977 183.09 213.48 183.68 183.37 1.51 5.44e+03 <code>test_peak_trend[10-medium]</code> 11068 67.54 96.72 68.01 67.85 0.90 1.47e+04 <code>test_peak_trend[3-medium]</code> 10591 81.57 110.56 82.10 82.00 0.72 1.22e+04 <code>test_valley_trend[10-medium]</code> 11722 68.76 117.95 69.32 69.17 0.98 1.44e+04 <code>test_valley_trend[3-medium]</code> 10521 80.76 111.61 81.23 81.09 0.87 1.23e+04 <code>test_overall_trend[medium]</code> 21549 21.70 64.02 22.00 21.94 0.68 4.54e+04 <code>test_break_down_trends[1.0-0.75-0-medium]</code> 413 2370.29 2557.37 2392.66 2379.13 32.67 4.18e+02 <code>test_break_down_trends[1.0-0.5-1-medium]</code> 283 3474.84 3644.34 3503.35 3505.76 18.47 2.85e+02"},{"location":"benchmarks/#large_1","title":"Large","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_peaks[10-large]</code> 2946 320.08 548.11 322.69 320.67 9.22 3.10e+03 <code>test_peaks[1-large]</code> 2388 356.80 427.56 360.25 357.58 9.27 2.78e+03 <code>test_valleys[10-large]</code> 2676 358.15 468.00 360.66 358.60 7.87 2.77e+03 <code>test_valleys[1-large]</code> 2446 383.45 660.45 387.26 384.06 12.47 2.58e+03 <code>test_peak_trend[10-large]</code> 4938 184.39 381.43 186.55 185.20 6.97 5.36e+03 <code>test_peak_trend[3-large]</code> 3534 260.46 458.67 262.78 261.15 7.40 3.81e+03 <code>test_valley_trend[10-large]</code> 4769 183.59 785.30 186.54 184.21 20.32 5.36e+03 <code>test_valley_trend[3-large]</code> 3417 259.58 8505.53 285.03 261.34 211.46 3.51e+03 <code>test_overall_trend[large]</code> 8425 44.26 519.65 46.59 44.94 10.74 2.15e+04 <code>test_break_down_trends[1.0-0.75-0-large]</code> 68 14757.55 15754.47 15042.71 14979.53 251.33 6.65e+01 <code>test_break_down_trends[1.5-0.5-1-large]</code> 57 17440.31 18088.63 17667.48 17593.41 202.04 5.66e+01"},{"location":"benchmarks/#correlation-indicators","title":"Correlation Indicators","text":""},{"location":"benchmarks/#small_2","title":"Small","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_correlation_small[mean-simple]</code> 73470 7.87 937.45 8.60 8.57 3.44 1.16e+05 <code>test_single_correlation_small[ulcer-mode]</code> 5536 158.56 200.52 160.62 160.44 1.37 6.23e+03 <code>test_single_correlation_small[mode-simple]</code> 24413 30.78 71.19 32.91 32.89 0.74 3.04e+04 <code>test_single_correlation_small[mode-mode]</code> 14934 53.78 180.37 58.87 57.70 5.62 1.70e+04 <code>test_bulk_correlation_small[mean-simple]</code> 16217 42.28 93.78 42.96 42.69 1.40 2.33e+04 <code>test_bulk_correlation_small[mode-mode]</code> 765 1269.60 1500.97 1284.95 1281.16 14.94 7.78e+02"},{"location":"benchmarks/#medium_2","title":"Medium","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_correlation_medium[mean-simple]</code> 20256 41.22 96.63 41.81 41.80 0.79 2.39e+04 <code>test_single_correlation_medium[ulcer-mode]</code> 284 3506.58 3584.71 3513.89 3512.27 8.48 2.85e+02 <code>test_single_correlation_medium[mode-simple]</code> 6075 148.93 201.00 155.60 155.43 2.04 6.43e+03 <code>test_single_correlation_medium[mode-mode]</code> 3472 257.83 903.34 268.56 267.96 11.59 3.72e+03 <code>test_bulk_correlation_medium[mean-simple]</code> 4208 220.67 278.96 222.67 222.19 2.77 4.49e+03 <code>test_bulk_correlation_medium[mode-mode]</code> 149 6593.78 6792.52 6642.85 6640.10 23.93 1.51e+02"},{"location":"benchmarks/#large_2","title":"Large","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_correlation_large[mean-simple]</code> 10963 81.46 130.04 82.03 81.85 1.38 1.22e+04 <code>test_single_correlation_large[ulcer-mode]</code> 73 13810.40 13977.29 13824.72 13818.36 22.49 7.23e+01 <code>test_single_correlation_large[mode-simple]</code> 3081 302.84 368.60 312.39 312.02 3.64 3.20e+03 <code>test_single_correlation_large[mode-mode]</code> 1802 531.54 647.06 542.77 542.03 5.92 1.84e+03 <code>test_bulk_correlation_large[mean-simple]</code> 2190 442.34 555.39 445.89 444.91 5.45 2.24e+03 <code>test_bulk_correlation_large[mode-mode]</code> 72 13795.45 14098.01 13832.91 13823.53 42.28 7.23e+01 <code>test_bulk_correlation_different_periods_large[5]</code> 2730 343.00 528.17 345.76 344.65 7.79 2.89e+03 <code>test_bulk_correlation_different_periods_large[50]</code> 949 1014.77 1335.79 1021.13 1018.67 15.12 9.79e+02"},{"location":"benchmarks/#momentum-indicators","title":"Momentum Indicators","text":""},{"location":"benchmarks/#small_3","title":"Small","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_mce[small-simple]</code> 14015 3.94 45.57 4.09 4.06 0.79 2.44e+05 <code>test_single_mce[small-mode]</code> 34351 15.11 248.30 16.33 16.24 2.11 6.12e+04 <code>test_bulk_mce[small-simple]</code> 262 26.43 137.02 27.30 26.70 6.93 3.66e+04 <code>test_bulk_mce[small-mode]</code> 2693 330.95 611.97 343.54 336.84 21.40 2.91e+03 <code>test_single_mcginley_env[small]</code> 121625 3.76 253.35 3.91 3.87 1.37 2.56e+05 <code>test_bulk_mcginley_env[small]</code> 23643 25.13 3349.75 28.53 26.17 23.38 3.51e+04 <code>test_single_bands[small-standard-simple]</code> 33519 4.41 1391.07 5.22 4.78 9.53 1.91e+05 <code>test_single_bands[small-mode-mode]</code> 26176 26.63 403.84 29.39 28.76 8.51 3.40e+04 <code>test_bulk_bands[small-standard-simple]</code> 10822 40.15 445.73 42.85 41.07 12.14 2.33e+04 <code>test_bulk_bands[small-ulcer-mode]</code> 1602 430.80 3330.51 501.20 489.79 122.87 2.00e+03 <code>test_single_mcginley_bands[small-standard]</code> 41926 4.48 60.56 4.74 4.61 1.00 2.11e+05 <code>test_single_mcginley_bands[small-mode]</code> 33541 15.24 63.32 16.58 16.50 1.00 6.03e+04 <code>test_bulk_mcginley_bands[small-mean]</code> 13149 33.63 86.76 35.30 34.69 2.61 2.83e+04 <code>test_bulk_mcginley_bands[small-mode]</code> 2192 344.84 827.49 367.55 359.25 27.19 2.72e+03 <code>test_single_ichimoku[small]</code> 47660 11.00 113.87 11.56 11.44 0.97 8.65e+04 <code>test_bulk_ichimoku[small]</code> 7484 90.72 155.56 92.78 91.56 3.71 1.08e+04 <code>test_single_donchian[small]</code> 65536 8.35 60.02 8.58 8.52 0.67 1.17e+05 <code>test_bulk_donchian[small]</code> 14647 38.13 107.59 39.72 39.24 2.14 2.52e+04 <code>test_single_keltner[small-simple-simple]</code> 45532 12.06 69.74 12.69 12.57 1.04 7.88e+04 <code>test_single_keltner[small-mode-mode]</code> 21506 30.46 104.15 32.82 32.65 1.90 3.05e+04 <code>test_bulk_keltner[small-simple-simple]</code> 9755 68.91 140.58 70.90 69.85 3.65 1.41e+04 <code>test_bulk_keltner[small-mode-mode]</code> 1350 651.21 866.34 677.04 670.89 25.20 1.48e+03 <code>test_single_supertrend[small-simple]</code> 51624 12.67 56.72 12.94 12.83 0.92 7.73e+04 <code>test_single_supertrend[small-mode]</code> 33730 19.11 115.43 20.42 20.31 1.40 4.90e+04 <code>test_bulk_supertrend[small-simple]</code> 13716 45.24 123.82 46.27 45.82 2.44 2.16e+04 <code>test_bulk_supertrend[small-mode]</code> 2700 314.34 385.78 322.69 320.58 6.51 3.10e+03"},{"location":"benchmarks/#medium_3","title":"Medium","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_mce[small-simple]</code> 14015 3.94 45.57 4.09 4.06 0.79 2.44e+05 <code>test_single_mce[small-mode]</code> 34351 15.11 248.30 16.33 16.24 2.11 6.12e+04 <code>test_bulk_mce[small-simple]</code> 262 26.43 137.02 27.30 26.70 6.93 3.66e+04 <code>test_bulk_mce[small-mode]</code> 2693 330.95 611.97 343.54 336.84 21.40 2.91e+03 <code>test_single_mcginley_env[small]</code> 121625 3.76 253.35 3.91 3.87 1.37 2.56e+05 <code>test_bulk_mcginley_env[small]</code> 23643 25.13 3349.75 28.53 26.17 23.38 3.51e+04 <code>test_single_bands[small-standard-simple]</code> 33519 4.41 1391.07 5.22 4.78 9.53 1.91e+05 <code>test_single_bands[small-mode-mode]</code> 26176 26.63 403.84 29.39 28.76 8.51 3.40e+04 <code>test_bulk_bands[small-standard-simple]</code> 10822 40.15 445.73 42.85 41.07 12.14 2.33e+04 <code>test_bulk_bands[small-ulcer-mode]</code> 1602 430.80 3330.51 501.20 489.79 122.87 2.00e+03 <code>test_single_mcginley_bands[small-standard]</code> 41926 4.48 60.56 4.74 4.61 1.00 2.11e+05 <code>test_single_mcginley_bands[small-mode]</code> 33541 15.24 63.32 16.58 16.50 1.00 6.03e+04 <code>test_bulk_mcginley_bands[small-mean]</code> 13149 33.63 86.76 35.30 34.69 2.61 2.83e+04 <code>test_bulk_mcginley_bands[small-mode]</code> 2192 344.84 827.49 367.55 359.25 27.19 2.72e+03 <code>test_single_ichimoku[small]</code> 47660 11.00 113.87 11.56 11.44 0.97 8.65e+04 <code>test_bulk_ichimoku[small]</code> 7484 90.72 155.56 92.78 91.56 3.71 1.08e+04 <code>test_single_donchian[small]</code> 65536 8.35 60.02 8.58 8.52 0.67 1.17e+05 <code>test_bulk_donchian[small]</code> 14647 38.13 107.59 39.72 39.24 2.14 2.52e+04 <code>test_single_keltner[small-simple-simple]</code> 45532 12.06 69.74 12.69 12.57 1.04 7.88e+04 <code>test_single_keltner[small-mode-mode]</code> 21506 30.46 104.15 32.82 32.65 1.90 3.05e+04 <code>test_bulk_keltner[small-simple-simple]</code> 9755 68.91 140.58 70.90 69.85 3.65 1.41e+04 <code>test_bulk_keltner[small-mode-mode]</code> 1350 651.21 866.34 677.04 670.89 25.20 1.48e+03 <code>test_single_supertrend[small-simple]</code> 51624 12.67 56.72 12.94 12.83 0.92 7.73e+04 <code>test_single_supertrend[small-mode]</code> 33730 19.11 115.43 20.42 20.31 1.40 4.90e+04 <code>test_bulk_supertrend[small-simple]</code> 13716 45.24 123.82 46.27 45.82 2.44 2.16e+04 <code>test_bulk_supertrend[small-mode]</code> 2700 314.34 385.78 322.69 320.58 6.51 3.10e+03"},{"location":"benchmarks/#large_3","title":"Large","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_rsi[large-simple]</code> 10963 45.72 76.15 46.25 46.18 0.59 2.16e+04 <code>test_single_rsi[large-mode]</code> 7146 104.70 437.30 115.43 115.11 5.31 8.66e+03 <code>test_bulk_rsi[large-simple]</code> 1537 555.41 791.43 562.07 559.38 12.04 1.78e+03 <code>test_bulk_rsi[large-mode]</code> 280 3506.66 3787.75 3550.75 3536.83 46.49 2.82e+02 <code>test_single_stoch[large]</code> 6790 95.39 263.26 99.22 98.63 4.04 1.01e+04 <code>test_bulk_stoch[large]</code> 817 1149.92 1242.60 1160.56 1157.55 10.41 8.62e+02 <code>test_single_slow_stoch[large-simple]</code> 24725 36.56 150.91 37.65 37.07 2.46 2.66e+04 <code>test_single_slow_stoch[large-mode]</code> 9477 86.37 309.48 99.86 98.37 7.04 1.00e+04 <code>test_bulk_slow_stoch[large-simple]</code> 5996 122.50 233.30 125.11 124.11 4.57 7.99e+03 <code>test_bulk_slow_stoch[large-mode]</code> 376 2548.36 2788.67 2618.12 2616.76 23.64 3.82e+02 <code>test_single_slowest_stoch[large-simple]</code> 24524 36.59 132.91 37.05 36.93 1.14 2.70e+04 <code>test_single_slowest_stoch[large-mode]</code> 10417 85.78 164.00 96.85 96.70 2.26 1.03e+04 <code>test_bulk_slowest_stoch[large-simple]</code> 6776 108.85 188.89 110.37 109.89 2.62 9.06e+03 <code>test_bulk_slowest_stoch[large-mode]</code> 648 1472.42 1726.66 1502.69 1498.99 23.80 6.65e+02 <code>test_single_williams_r[large]</code> 11712 79.33 180.02 80.45 80.15 2.05 1.24e+04 <code>test_bulk_williams_r[large]</code> 2991 299.95 379.37 302.36 301.69 3.98 3.31e+03 <code>test_single_mfi[large]</code> 10813 76.65 288.71 77.76 77.32 3.20 1.29e+04 <code>test_bulk_mfi[large]</code> 1991 466.15 606.73 469.43 468.58 5.03 2.13e+03 <code>test_single_roc[large]</code> 86259 0.11 0.97 0.11 0.11 0.00 8.81e+06 <code>test_bulk_roc[large]</code> 7652 85.00 125.61 86.26 86.13 1.41 1.16e+04 <code>test_single_obv[large]</code> 77036 0.12 0.43 0.12 0.12 0.00 8.00e+06 <code>test_bulk_obv[large]</code> 5529 131.82 222.32 133.78 133.30 2.81 7.47e+03 <code>test_single_cci[large-standard-simple]</code> 21086 41.46 192.45 41.98 41.89 1.32 2.38e+04 <code>test_single_cci[large-ulcer-mode]</code> 145 6902.11 6976.02 6910.82 6908.23 10.17 1.45e+02 <code>test_bulk_cci[large-mean-simple]</code> 3758 233.24 431.36 235.86 235.24 4.78 4.24e+03 <code>test_bulk_cci[large-mode-mode]</code> 150 6595.52 6891.28 6714.50 6719.94 39.20 1.49e+02 <code>test_single_mcginley_cci[large-mean]</code> 21463 39.07 88.56 39.41 39.33 0.68 2.54e+04 <code>test_single_mcginley_cci[large-ulcer]</code> 148 6786.93 6856.22 6791.40 6788.85 10.10 1.47e+02 <code>test_bulk_mcginley_cci[large-mean]</code> 3122 294.47 371.17 296.88 295.89 4.85 3.37e+03 <code>test_bulk_mcginley_cci[large-mode]</code> 279 3486.64 3724.12 3525.94 3517.77 33.65 2.84e+02 <code>test_single_macd_line[large-simple-simple]</code> 23550 36.61 65.43 37.03 36.98 0.58 2.70e+04 <code>test_single_macd_line[large-mode-mode]</code> 5768 144.85 208.87 152.76 152.65 2.13 6.55e+03 <code>test_bulk_macd_line[large-simple-simple]</code> 4366 169.41 274.04 171.58 171.56 2.46 5.83e+03 <code>test_bulk_macd_line[large-mode-mode]</code> 170 5744.79 6164.66 5807.54 5789.61 61.04 1.72e+02 <code>test_single_signal_line[large-simple]</code> 23884 36.43 77.87 37.20 36.81 1.65 2.69e+04 <code>test_single_signal_line[large-mode]</code> 6038 99.56 221.69 111.37 110.44 6.51 8.98e+03 <code>test_bulk_signal_line[large-simple]</code> 6184 122.09 184.87 123.67 123.34 3.00 8.09e+03 <code>test_bulk_signal_line[large-mode]</code> 296 3148.12 3934.15 3279.79 3267.17 79.23 3.05e+02 <code>test_single_mcginley_macd_line[large]</code> 16998 34.43 113.56 35.62 35.02 2.86 2.81e+04 <code>test_bulk_mcginley_macd_line[large]</code> 786 299.78 929.34 328.26 313.38 49.88 3.05e+03 <code>test_single_chaikin_osc[large-simple-simple]</code> 4551 148.15 385.49 157.96 151.63 16.15 6.33e+03 <code>test_single_chaikin_osc[large-mode-mode]</code> 3049 295.19 646.99 315.02 307.41 26.99 3.17e+03 <code>test_bulk_chaikin_osc[large-simple-smoothed]</code> 1729 543.58 1387.96 590.97 576.23 65.03 1.69e+03 <code>test_bulk_chaikin_osc[large-mode-mode]</code> 332 2893.47 3775.57 2974.67 2959.25 78.65 3.36e+02 <code>test_single_ppo[large-simple]</code> 21110 36.78 174.58 37.42 37.11 2.12 2.67e+04 <code>test_single_ppo[large-mode]</code> 4999 146.91 268.06 157.99 155.41 8.64 6.33e+03 <code>test_bulk_ppo[large-simple]</code> 4574 180.76 292.17 189.88 186.05 9.28 5.27e+03 <code>test_bulk_ppo[large-mode]</code> 169 5745.96 6195.52 5857.82 5836.55 69.54 1.71e+02 <code>test_single_cmo[large]</code> 12582 44.95 88.39 45.89 45.57 1.73 2.18e+04 <code>test_bulk_cmo[large]</code> 1627 520.47 627.45 533.30 530.17 10.08 1.88e+03"},{"location":"benchmarks/#moving-average","title":"Moving Average","text":""},{"location":"benchmarks/#small_4","title":"Small","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_ma[small-simple]</code> 50373 3.72 22.50 3.82 3.82 0.13 2.62e+05 <code>test_single_ma[small-smoothed]</code> 76811 6.52 36.76 6.64 6.63 0.24 1.51e+05 <code>test_single_ma[small-exponential]</code> 77586 6.43 30.41 6.55 6.54 0.21 1.53e+05 <code>test_bulk_ma[small-simple]</code> 54272 10.67 54.72 11.56 11.59 0.49 8.65e+04 <code>test_bulk_ma[small-smoothed]</code> 19362 39.02 140.22 39.65 39.54 1.08 2.52e+04 <code>test_bulk_ma[small-exponential]</code> 19839 39.31 83.11 39.75 39.65 0.80 2.52e+04 <code>test_single_mcginley_dynamic[small]</code> 195657 0.13 3.70 0.13 0.13 0.01 7.51e+06 <code>test_bulk_mcginley_dynamic[small]</code> 55216 10.93 52.00 11.63 11.69 0.44 8.60e+04"},{"location":"benchmarks/#medium_4","title":"Medium","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_ma[medium-simple]</code> 31821 17.67 35.67 18.03 18.02 0.23 5.55e+04 <code>test_single_ma[medium-smoothed]</code> 23643 35.87 60.15 36.31 36.28 0.44 2.75e+04 <code>test_single_ma[medium-exponential]</code> 23519 35.91 56.65 36.19 36.15 0.44 2.76e+04 <code>test_bulk_ma[medium-simple]</code> 10670 57.37 141.78 58.10 57.93 1.16 1.72e+04 <code>test_bulk_ma[medium-smoothed]</code> 4525 204.63 257.80 207.80 206.96 2.50 4.81e+03 <code>test_bulk_ma[medium-exponential]</code> 4496 205.98 255.43 207.69 207.35 1.82 4.81e+03 <code>test_single_mcginley_dynamic[medium]</code> 192197 0.13 0.77 0.13 0.13 0.00 7.77e+06 <code>test_bulk_mcginley_dynamic[medium]</code> 12483 58.39 99.87 59.23 59.17 0.87 1.69e+04"},{"location":"benchmarks/#large_4","title":"Large","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_ma[large-simple]</code> 16818 34.63 53.24 35.64 35.61 0.32 2.81e+04 <code>test_single_ma[large-smoothed]</code> 11897 76.83 110.46 77.76 77.69 0.78 1.29e+04 <code>test_single_ma[large-exponential]</code> 11913 76.85 125.93 77.47 77.43 0.79 1.29e+04 <code>test_bulk_ma[large-simple]</code> 6242 114.74 160.09 115.62 115.39 1.53 8.65e+03 <code>test_bulk_ma[large-smoothed]</code> 2310 410.50 478.28 415.83 414.47 4.02 2.40e+03 <code>test_bulk_ma[large-exponential]</code> 2226 412.89 492.30 416.53 415.67 4.24 2.40e+03 <code>test_single_mcginley_dynamic[large]</code> 197785 0.13 2.72 0.13 0.13 0.01 7.71e+06 <code>test_bulk_mcginley_dynamic[large]</code> 6778 118.04 174.87 118.98 118.74 1.61 8.41e+03"},{"location":"benchmarks/#other-indicators","title":"Other Indicators","text":""},{"location":"benchmarks/#small_5","title":"Small","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_true_range[small]</code> 86394 0.11 2.24 0.12 0.11 0.01 8.68e+06 <code>test_bulk_true_range[small]</code> 45377 14.94 115.06 15.92 15.93 1.76 6.28e+04 <code>test_single_atr[small-simple]</code> 55670 11.24 112.91 11.52 11.46 1.32 8.68e+04 <code>test_single_atr[small-mode]</code> 35043 17.70 123.54 18.96 18.89 1.70 5.28e+04 <code>test_bulk_atr[small-simple]</code> 26484 31.56 116.78 32.65 32.49 2.21 3.06e+04 <code>test_bulk_atr[small-mode]</code> 2584 295.24 407.24 300.18 298.62 7.37 3.33e+03 <code>test_single_roi[small]</code> 163640 0.16 2.39 0.16 0.16 0.03 6.18e+06 <code>test_bulk_roi[small]</code> 23716 21.74 139.43 22.60 22.33 2.22 4.42e+04 <code>test_single_ibs[small]</code> 80594 0.11 1.22 0.11 0.11 0.01 8.71e+06 <code>test_bulk_ibs[small]</code> 42454 15.02 217.67 16.10 16.11 1.95 6.21e+04 <code>test_bulk_positivity[small-simple]</code> 24435 24.70 290.37 26.04 25.80 2.93 3.84e+04 <code>test_bulk_positivity[small-mode]</code> 6495 116.24 224.85 122.02 121.02 6.63 8.20e+03"},{"location":"benchmarks/#medium_5","title":"Medium","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_true_range[medium]</code> 185564 0.12 1.06 0.12 0.12 0.00 8.41e+06 <code>test_bulk_true_range[medium]</code> 10181 73.98 121.31 74.92 74.72 1.39 1.33e+04 <code>test_single_atr[medium-simple]</code> 16034 52.52 99.19 53.07 52.94 0.92 1.88e+04 <code>test_single_atr[medium-mode]</code> 10347 79.56 139.59 85.30 85.26 1.71 1.17e+04 <code>test_bulk_atr[medium-simple]</code> 4905 165.11 219.00 167.87 167.61 2.05 5.96e+03 <code>test_bulk_atr[medium-mode]</code> 617 1569.29 1744.64 1591.80 1592.21 13.98 6.28e+02 <code>test_single_roi[medium]</code> 186847 0.16 1.32 0.16 0.16 0.01 6.07e+06 <code>test_bulk_roi[medium]</code> 576 109.70 188.32 112.24 110.46 5.87 8.91e+03 <code>test_single_ibs[medium]</code> 194932 0.12 0.91 0.12 0.12 0.00 8.35e+06 <code>test_bulk_ibs[medium]</code> 10178 75.93 159.61 76.89 76.67 1.48 1.30e+04 <code>test_bulk_positivity[medium-simple]</code> 6103 120.11 218.93 122.39 121.96 3.80 8.17e+03 <code>test_bulk_positivity[medium-mode]</code> 1671 560.35 812.63 569.23 563.00 25.19 1.76e+03"},{"location":"benchmarks/#large_5","title":"Large","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_true_range[large]</code> 200000 0.12 1.64 0.12 0.12 0.01 8.40e+06 <code>test_bulk_true_range[large]</code> 4738 148.94 251.78 150.73 149.96 5.05 6.63e+03 <code>test_single_atr[large-simple]</code> 8875 103.32 158.67 104.43 104.28 1.92 9.58e+03 <code>test_single_atr[large-mode]</code> 5384 157.67 258.91 168.48 168.40 3.67 5.94e+03 <code>test_bulk_atr[large-simple]</code> 2744 329.19 426.97 335.06 334.32 5.66 2.98e+03 <code>test_bulk_atr[large-mode]</code> 301 3259.09 3539.54 3304.23 3281.72 41.93 3.03e+02 <code>test_single_roi[large]</code> 192160 0.26 10.13 0.29 0.28 0.05 3.51e+06 <code>test_bulk_roi[large]</code> 460 228.78 353.78 235.49 230.30 18.80 4.25e+03 <code>test_single_ibs[large]</code> 197084 0.12 1.09 0.12 0.12 0.00 8.43e+06 <code>test_bulk_ibs[large]</code> 4570 150.93 2043.16 153.95 153.13 28.36 6.50e+03 <code>test_bulk_positivity[large-simple]</code> 244 253.93 608.54 275.95 256.04 68.12 3.62e+03 <code>test_bulk_positivity[large-mode]</code> 788 1171.91 1896.51 1183.23 1177.15 49.04 8.45e+02"},{"location":"benchmarks/#standard-indicators","title":"Standard Indicators","text":""},{"location":"benchmarks/#small_6","title":"Small","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_sma[small]</code> 50610 3.72 49.04 3.83 3.81 0.73 2.61e+05 <code>test_bulk_sma[small]</code> 39301 10.74 225.91 11.45 11.41 2.04 8.74e+04 <code>test_single_smma[small]</code> 86814 6.37 345.80 6.66 6.50 3.50 1.50e+05 <code>test_bulk_smma[small]</code> 22959 38.07 280.78 39.13 38.93 2.77 2.56e+04 <code>test_single_ema[small]</code> 98184 6.43 256.67 6.57 6.54 1.22 1.52e+05 <code>test_bulk_ema[small]</code> 20165 38.59 126.68 39.55 39.28 2.39 2.53e+04 <code>test_single_bollinger[small]</code> 82190 0.57 5.90 0.61 0.61 0.06 1.63e+06 <code>test_bulk_bollinger[small]</code> 17292 36.22 258.06 37.40 37.20 2.88 2.67e+04 <code>test_single_macd[small]</code> 118428 3.18 282.65 3.27 3.24 1.06 3.06e+05 <code>test_bulk_macd[small]</code> 1729 552.22 687.36 558.35 555.80 9.94 1.79e+03 <code>test_single_rsi[small]</code> 88379 0.54 5.60 0.58 0.58 0.06 1.72e+06 <code>test_bulk_rsi[small]</code> 14336 59.07 181.28 60.00 59.68 3.08 1.67e+04"},{"location":"benchmarks/#medium_6","title":"Medium","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_sma[medium]</code> 33068 17.54 37.93 17.89 17.89 0.28 5.59e+04 <code>test_bulk_sma[medium]</code> 12700 57.65 93.39 58.42 58.32 0.92 1.71e+04 <code>test_single_smma[medium]</code> 23852 35.82 90.22 36.09 36.04 0.63 2.77e+04 <code>test_bulk_smma[medium]</code> 4272 202.37 304.20 204.88 204.61 2.61 4.88e+03 <code>test_single_ema[medium]</code> 22728 35.82 64.35 36.21 36.17 0.52 2.76e+04 <code>test_bulk_ema[medium]</code> 4445 204.93 246.65 207.10 207.17 1.73 4.83e+03 <code>test_single_bollinger[medium]</code> 165646 0.68 27.69 0.73 0.72 0.12 1.37e+06 <code>test_bulk_bollinger[medium]</code> 381 192.50 251.08 196.26 193.45 8.02 5.10e+03 <code>test_single_macd[medium]</code> 104855 3.18 80.74 3.27 3.26 0.33 3.06e+05 <code>test_bulk_macd[medium]</code> 318 3092.46 3294.79 3136.57 3146.56 23.73 3.19e+02 <code>test_single_rsi[medium]</code> 174734 0.65 25.80 0.70 0.69 0.12 1.44e+06 <code>test_bulk_rsi[medium]</code> 2969 317.91 367.97 320.73 320.35 2.19 3.12e+03"},{"location":"benchmarks/#large_6","title":"Large","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_sma[large]</code> 14631 36.19 104.61 36.75 36.48 3.33 2.72e+04 <code>test_bulk_sma[large]</code> 6357 115.37 216.06 117.48 116.41 7.20 8.51e+03 <code>test_single_smma[large]</code> 12154 78.04 264.19 79.42 78.83 5.63 1.26e+04 <code>test_bulk_smma[large]</code> 2228 408.34 602.71 416.07 413.32 14.81 2.40e+03 <code>test_single_ema[large]</code> 12492 77.96 255.22 79.29 78.72 5.44 1.26e+04 <code>test_bulk_ema[large]</code> 2185 412.97 719.08 420.28 417.06 15.11 2.38e+03 <code>test_single_bollinger[large]</code> 164637 0.67 58.98 0.72 0.70 0.53 1.38e+06 <code>test_bulk_bollinger[large]</code> 376 395.41 695.60 405.92 396.95 30.66 2.46e+03 <code>test_single_macd[large]</code> 100181 3.17 183.57 3.28 3.26 1.11 3.05e+05 <code>test_bulk_macd[large]</code> 158 6278.97 6910.83 6359.96 6353.39 68.80 1.57e+02 <code>test_single_rsi[large]</code> 156986 0.65 57.35 0.70 0.69 0.49 1.43e+06 <code>test_bulk_rsi[large]</code> 1475 647.78 780.19 656.96 651.97 17.29 1.52e+03"},{"location":"benchmarks/#strength-indicators","title":"Strength Indicators","text":""},{"location":"benchmarks/#small_7","title":"Small","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_volume_index[small]</code> 84374 0.11 1.10 0.12 0.12 0.01 8.65e+06 <code>test_bulk_accumulation_distribution[small]</code> 38083 18.85 137.98 19.99 19.95 1.98 5.00e+04 <code>test_bulk_positive_volume_index[small]</code> 51333 11.63 158.91 12.67 12.74 1.62 7.89e+04 <code>test_bulk_negative_volume_index[small]</code> 39970 12.57 134.24 13.15 13.00 1.78 7.60e+04 <code>test_single_rvi[small-simple]</code> 42286 16.78 126.89 17.44 17.35 1.72 5.73e+04 <code>test_single_rvi[small-mode]</code> 24086 29.98 179.82 32.23 32.37 2.48 3.10e+04 <code>test_bulk_rvi[small-simple]</code> 8160 99.41 215.07 105.01 104.48 4.04 9.52e+03 <code>test_bulk_rvi[small-mode]</code> 1697 512.82 756.30 523.15 519.10 12.50 1.91e+03"},{"location":"benchmarks/#medium_7","title":"Medium","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_volume_index[medium]</code> 196348 0.12 3.88 0.12 0.12 0.01 8.08e+06 <code>test_bulk_accumulation_distribution[medium]</code> 8294 92.22 271.93 94.05 93.80 2.78 1.06e+04 <code>test_bulk_positive_volume_index[medium]</code> 11576 60.46 228.58 61.13 60.93 2.09 1.64e+04 <code>test_bulk_negative_volume_index[medium]</code> 12800 61.41 111.11 62.36 62.19 1.36 1.60e+04 <code>test_single_rvi[medium-simple]</code> 10456 82.78 162.70 84.92 84.72 1.85 1.18e+04 <code>test_single_rvi[medium-mode]</code> 6171 135.72 219.11 148.00 148.00 3.03 6.76e+03 <code>test_bulk_rvi[medium-simple]</code> 1757 523.52 667.93 550.46 549.78 6.59 1.82e+03 <code>test_bulk_rvi[medium-mode]</code> 353 2747.57 2984.01 2791.60 2784.38 21.02 3.58e+02"},{"location":"benchmarks/#large_7","title":"Large","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_volume_index[large]</code> 83592 0.11 1.43 0.12 0.12 0.01 8.63e+06 <code>test_bulk_accumulation_distribution[large]</code> 4041 188.59 472.28 191.33 189.65 9.85 5.23e+03 <code>test_bulk_positive_volume_index[large]</code> 6318 120.74 312.89 122.40 121.46 5.99 8.17e+03 <code>test_bulk_negative_volume_index[large]</code> 6885 121.89 305.13 124.05 123.17 6.47 8.06e+03 <code>test_single_rvi[large-simple]</code> 5609 161.59 332.09 166.62 165.28 8.08 6.00e+03 <code>test_single_rvi[large-mode]</code> 3229 272.63 441.61 295.38 293.63 10.96 3.39e+03 <code>test_bulk_rvi[large-simple]</code> 859 1059.65 1309.60 1116.23 1109.76 20.01 8.96e+02 <code>test_bulk_rvi[large-mode]</code> 178 5553.12 6108.55 5652.71 5648.68 48.61 1.77e+02"},{"location":"benchmarks/#trend-indicators","title":"Trend Indicators","text":""},{"location":"benchmarks/#small_8","title":"Small","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_aroon_oscillator[medium]</code> 91836 0.10 1.22 0.11 0.11 0.01 9.27e+06 <code>test_bulk_aroon_up[medium]</code> 8633 91.09 319.17 92.10 91.56 4.48 1.09e+04 <code>test_single_aroon_down[medium]</code> 41474 20.04 145.06 20.35 20.24 1.80 4.91e+04 <code>test_bulk_aroon_down[medium]</code> 8638 97.52 224.21 98.62 98.02 4.30 1.01e+04 <code>test_single_long_parabolic[medium]</code> 194970 0.12 2.61 0.12 0.12 0.02 8.09e+06 <code>test_bulk_parabolic[long-medium]</code> 5336 155.08 357.64 159.42 158.50 5.91 6.27e+03 <code>test_bulk_dms[simple-medium]</code> 362 231.08 523.56 241.76 232.95 29.93 4.14e+03 <code>test_bulk_dms[mode-medium]</code> 747 1194.00 1490.38 1212.86 1205.43 26.22 8.25e+02 <code>test_single_tsi[medium-simple-simple]</code> 13210 70.02 229.43 70.76 70.37 3.43 1.41e+04 <code>test_single_tsi[medium-simple-mode]</code> 277 3555.73 3656.99 3569.14 3567.65 9.63 2.80e+02 <code>test_bulk_tsi[medium-simple-simple]</code> 896 1100.20 1174.09 1104.37 1103.91 4.31 9.05e+02 <code>test_bulk_tsi[medium-simple-mode]</code> 22 46977.34 47163.53 47054.78 47050.67 44.80 2.13e+01 <code>test_single_vpt[medium]</code> 197785 0.12 3.62 0.12 0.12 0.02 8.03e+06 <code>test_bulk_vpt[medium]</code> 12599 58.54 204.02 59.92 59.65 3.55 1.67e+04"},{"location":"benchmarks/#medium_8","title":"Medium","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_aroon_oscillator[medium]</code> 91836 0.10 1.22 0.11 0.11 0.01 9.27e+06 <code>test_bulk_aroon_up[medium]</code> 8633 91.09 319.17 92.10 91.56 4.48 1.09e+04 <code>test_single_aroon_down[medium]</code> 41474 20.04 145.06 20.35 20.24 1.80 4.91e+04 <code>test_bulk_aroon_down[medium]</code> 8638 97.52 224.21 98.62 98.02 4.30 1.01e+04 <code>test_single_long_parabolic[medium]</code> 194970 0.12 2.61 0.12 0.12 0.02 8.09e+06 <code>test_bulk_parabolic[long-medium]</code> 5336 155.08 357.64 159.42 158.50 5.91 6.27e+03 <code>test_bulk_dms[simple-medium]</code> 362 231.08 523.56 241.76 232.95 29.93 4.14e+03 <code>test_bulk_dms[mode-medium]</code> 747 1194.00 1490.38 1212.86 1205.43 26.22 8.25e+02 <code>test_single_tsi[medium-simple-simple]</code> 13210 70.02 229.43 70.76 70.37 3.43 1.41e+04 <code>test_single_tsi[medium-simple-mode]</code> 277 3555.73 3656.99 3569.14 3567.65 9.63 2.80e+02 <code>test_bulk_tsi[medium-simple-simple]</code> 896 1100.20 1174.09 1104.37 1103.91 4.31 9.05e+02 <code>test_bulk_tsi[medium-simple-mode]</code> 22 46977.34 47163.53 47054.78 47050.67 44.80 2.13e+01 <code>test_single_vpt[medium]</code> 197785 0.12 3.62 0.12 0.12 0.02 8.03e+06 <code>test_bulk_vpt[medium]</code> 12599 58.54 204.02 59.92 59.65 3.55 1.67e+04"},{"location":"benchmarks/#large_8","title":"Large","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_aroon_oscillator[large]</code> 85035 0.11 1.70 0.11 0.11 0.01 8.80e+06 <code>test_bulk_aroon_up[large]</code> 4510 184.37 430.23 186.17 184.91 7.21 5.37e+03 <code>test_single_aroon_down[large]</code> 20809 40.41 248.00 40.95 40.69 2.99 2.44e+04 <code>test_bulk_aroon_down[large]</code> 4272 196.04 487.71 198.27 197.06 7.67 5.04e+03 <code>test_single_long_parabolic[large]</code> 194251 0.12 2.56 0.13 0.13 0.02 7.84e+06 <code>test_bulk_parabolic[long-large]</code> 2591 338.43 699.57 344.41 341.84 12.85 2.90e+03 <code>test_bulk_dms[simple-large]</code> 106 481.47 1374.71 541.15 487.58 158.03 1.85e+03 <code>test_bulk_dms[mode-large]</code> 403 2394.61 3151.40 2424.95 2408.45 53.86 4.12e+02 <code>test_single_tsi[large-simple-simple]</code> 6649 140.91 357.69 142.20 141.39 5.50 7.03e+03 <code>test_single_tsi[large-simple-mode]</code> 142 7019.85 7282.04 7059.82 7064.77 29.61 1.42e+02 <code>test_bulk_tsi[large-simple-simple]</code> 430 2235.64 2547.61 2251.27 2242.19 24.20 4.44e+02 <code>test_bulk_tsi[large-simple-mode]</code> 11 95097.01 96275.36 95418.25 95178.38 405.93 1.05e+01 <code>test_single_vpt[large]</code> 197785 0.12 2.36 0.13 0.13 0.02 7.81e+06 <code>test_bulk_vpt[large]</code> 6288 116.96 321.36 118.75 117.87 6.00 8.42e+03"},{"location":"benchmarks/#volatiltiy-indicators","title":"Volatiltiy Indicators","text":""},{"location":"benchmarks/#small_9","title":"Small","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_bulk_volatility_system[small-simple]</code> 18225 32.67 165.74 33.61 33.37 2.58 2.98e+04 <code>test_bulk_volatility_system[small-mode]</code> 4074 210.10 306.21 217.65 216.46 6.20 4.59e+03 <code>test_single_ulcer_index[small]</code> 12591 67.81 110.58 68.21 67.93 2.75 1.47e+04 <code>test_bulk_ulcer_index[small]</code> 10508 90.02 273.06 90.82 90.35 3.86 1.10e+04"},{"location":"benchmarks/#medium_9","title":"Medium","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_bulk_volatility_system[medium-simple]</code> 4961 162.71 527.14 166.19 164.69 9.01 6.02e+03 <code>test_bulk_volatility_system[medium-mode]</code> 863 1113.10 1321.52 1126.33 1119.94 19.42 8.88e+02 <code>test_single_ulcer_index[medium]</code> 585 1697.69 2104.08 1721.55 1702.17 53.06 5.81e+02 <code>test_bulk_ulcer_index[medium]</code> 1994 477.67 626.60 482.34 478.99 11.38 2.07e+03"},{"location":"benchmarks/#large_9","title":"Large","text":"<p>Full table</p> Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_bulk_volatility_system[large-simple]</code> 2600 326.17 520.64 332.47 328.93 15.31 3.01e+03 <code>test_bulk_volatility_system[large-mode]</code> 432 2255.08 2805.16 2284.26 2267.51 40.47 4.38e+02 <code>test_single_ulcer_index[large]</code> 146 6792.26 6883.00 6835.86 6853.75 28.69 1.46e+02 <code>test_bulk_ulcer_index[large]</code> 991 961.92 1105.03 971.76 964.42 19.92 1.03e+03"},{"location":"benchmarks/candle-indicators/large/","title":"Large Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_mce[large-simple]</code> 16912 34.70 100.94 35.48 35.24 3.40 2.82e+04 <code>test_single_mce[large-smoothed]</code> 11796 76.76 267.71 78.02 77.37 5.54 1.28e+04 <code>test_single_mce[large-exponential]</code> 11546 76.63 193.02 77.67 77.02 5.39 1.29e+04 <code>test_single_mce[large-median]</code> 7389 78.78 182.87 80.48 79.65 6.14 1.24e+04 <code>test_single_mce[large-mode]</code> 6075 142.78 398.39 150.90 149.72 8.57 6.63e+03 <code>test_bulk_mce[large-simple]</code> 1138 288.48 449.33 294.61 290.65 15.23 3.39e+03 <code>test_bulk_mce[large-smoothed]</code> 1626 589.76 757.93 598.42 593.11 18.43 1.67e+03 <code>test_bulk_mce[large-exponential]</code> 1642 585.59 1062.60 596.44 590.87 22.56 1.68e+03 <code>test_bulk_mce[large-median]</code> 683 1406.73 1792.43 1430.41 1418.25 37.43 6.99e+02 <code>test_bulk_mce[large-mode]</code> 263 3658.81 4139.33 3710.86 3690.35 52.10 2.69e+02 <code>test_single_mcginley_env[large]</code> 25472 33.44 218.54 34.23 34.04 3.43 2.92e+04 <code>test_bulk_mcginley_env[large]</code> 2665 279.45 599.76 284.83 281.44 16.06 3.51e+03 <code>test_single_bands[large-standard-simple]</code> 20150 39.50 153.78 40.43 40.04 3.96 2.47e+04 <code>test_single_bands[large-standard-smoothed]</code> 11215 82.11 183.87 83.41 82.72 5.78 1.20e+04 <code>test_single_bands[large-standard-exponential]</code> 11061 82.04 179.00 83.40 82.65 5.85 1.20e+04 <code>test_single_bands[large-standard-median]</code> 6852 83.28 232.63 85.16 84.04 6.48 1.17e+04 <code>test_single_bands[large-standard-mode]</code> 5873 148.78 367.28 156.89 155.61 8.63 6.37e+03 <code>test_single_bands[large-mean-simple]</code> 21845 39.65 228.30 40.32 39.93 4.10 2.48e+04 <code>test_single_bands[large-mean-smoothed]</code> 11345 80.13 182.00 81.41 80.67 5.65 1.23e+04 <code>test_single_bands[large-mean-exponential]</code> 10021 80.91 233.45 81.55 81.41 1.91 1.23e+04 <code>test_single_bands[large-mean-median]</code> 6694 81.70 144.44 82.67 82.22 2.16 1.21e+04 <code>test_single_bands[large-mean-mode]</code> 5527 152.56 225.22 159.98 159.81 2.49 6.25e+03 <code>test_single_bands[large-median-simple]</code> 8246 83.07 137.11 84.04 83.67 1.70 1.19e+04 <code>test_single_bands[large-median-smoothed]</code> 6345 123.93 202.52 125.33 124.93 2.21 7.98e+03 <code>test_single_bands[large-median-exponential]</code> 6745 122.96 183.67 124.73 124.52 2.07 8.02e+03 <code>test_single_bands[large-median-median]</code> 6492 124.09 189.93 125.32 124.95 1.99 7.98e+03 <code>test_single_bands[large-median-mode]</code> 4269 192.24 325.13 200.10 199.69 3.66 5.00e+03 <code>test_single_bands[large-mode-simple]</code> 5983 147.67 214.46 154.96 154.78 2.44 6.45e+03 <code>test_single_bands[large-mode-smoothed]</code> 4749 190.71 263.50 197.51 197.19 3.35 5.06e+03 <code>test_single_bands[large-mode-exponential]</code> 4705 189.63 311.35 196.83 196.43 3.54 5.08e+03 <code>test_single_bands[large-mode-median]</code> 4234 192.46 260.52 200.60 200.08 3.80 4.99e+03 <code>test_single_bands[large-mode-mode]</code> 3597 257.82 311.04 269.69 269.35 3.48 3.71e+03 <code>test_single_bands[large-ulcer-simple]</code> 147 6790.19 6924.54 6797.07 6793.34 14.23 1.47e+02 <code>test_single_bands[large-ulcer-smoothed]</code> 146 6831.92 6940.91 6840.36 6835.60 15.36 1.46e+02 <code>test_single_bands[large-ulcer-exponential]</code> 146 6831.93 6923.25 6838.62 6835.37 11.49 1.46e+02 <code>test_single_bands[large-ulcer-median]</code> 146 6836.67 6998.75 6844.68 6840.92 16.17 1.46e+02 <code>test_single_bands[large-ulcer-mode]</code> 145 6903.54 7040.79 6913.58 6909.32 15.99 1.45e+02 <code>test_bulk_bands[large-standard-simple]</code> 1901 435.93 682.71 443.11 441.21 14.98 2.26e+03 <code>test_bulk_bands[large-standard-smoothed]</code> 1328 726.89 999.60 736.75 734.89 15.73 1.36e+03 <code>test_bulk_bands[large-standard-exponential]</code> 1316 725.10 1005.30 733.48 731.02 17.69 1.36e+03 <code>test_bulk_bands[large-standard-median]</code> 503 1470.64 1895.34 1488.95 1479.49 39.41 6.72e+02 <code>test_bulk_bands[large-standard-mode]</code> 257 3759.89 4077.55 3807.72 3810.85 24.62 2.63e+02 <code>test_bulk_bands[large-mean-simple]</code> 2454 384.39 595.15 389.18 387.63 12.53 2.57e+03 <code>test_bulk_bands[large-mean-smoothed]</code> 1397 679.85 953.60 688.30 684.19 19.43 1.45e+03 <code>test_bulk_bands[large-mean-exponential]</code> 1397 677.50 1132.58 685.05 680.63 25.63 1.46e+03 <code>test_bulk_bands[large-mean-median]</code> 533 1442.36 1875.32 1455.27 1451.01 31.53 6.87e+02 <code>test_bulk_bands[large-mean-mode]</code> 257 3767.98 4209.02 3801.55 3792.94 43.19 2.63e+02 <code>test_bulk_bands[large-median-simple]</code> 666 1414.51 1885.79 1425.43 1422.53 26.29 7.02e+02 <code>test_bulk_bands[large-median-smoothed]</code> 562 1718.93 2182.16 1735.23 1730.83 31.69 5.76e+02 <code>test_bulk_bands[large-median-exponential]</code> 552 1716.77 2162.99 1732.09 1727.24 32.57 5.77e+02 <code>test_bulk_bands[large-median-median]</code> 366 2341.49 2688.07 2356.58 2353.37 24.46 4.24e+02 <code>test_bulk_bands[large-median-mode]</code> 205 4768.98 5266.43 4796.46 4791.33 37.67 2.08e+02 <code>test_bulk_bands[large-mode-simple]</code> 260 3739.09 4191.48 3767.35 3764.38 31.52 2.65e+02 <code>test_bulk_bands[large-mode-smoothed]</code> 239 4056.24 4457.81 4080.89 4076.85 31.29 2.45e+02 <code>test_bulk_bands[large-mode-exponential]</code> 242 4048.76 4547.11 4084.48 4075.42 41.49 2.45e+02 <code>test_bulk_bands[large-mode-median]</code> 191 4778.54 5342.63 4821.37 4807.46 62.50 2.07e+02 <code>test_bulk_bands[large-mode-mode]</code> 139 7087.03 7451.68 7132.68 7123.31 40.17 1.40e+02 <code>test_bulk_bands[large-ulcer-simple]</code> 804 1190.97 1654.47 1201.29 1196.73 27.23 8.32e+02 <code>test_bulk_bands[large-ulcer-smoothed]</code> 633 1495.38 1966.82 1505.26 1500.91 28.73 6.64e+02 <code>test_bulk_bands[large-ulcer-exponential]</code> 650 1495.47 1998.82 1509.94 1500.77 48.34 6.62e+02 <code>test_bulk_bands[large-ulcer-median]</code> 365 2254.17 2709.90 2276.72 2266.88 48.85 4.39e+02 <code>test_bulk_bands[large-ulcer-mode]</code> 211 4582.39 5101.65 4610.03 4595.39 56.55 2.17e+02 <code>test_single_mcginley_bands[large-standard]</code> 21177 37.39 83.63 38.07 37.67 0.99 2.63e+04 <code>test_single_mcginley_bands[large-mean]</code> 23488 36.35 63.45 37.00 37.00 0.64 2.70e+04 <code>test_single_mcginley_bands[large-median]</code> 7507 79.61 183.63 80.61 80.15 2.87 1.24e+04 <code>test_single_mcginley_bands[large-mode]</code> 5860 146.74 216.39 153.81 153.52 2.75 6.50e+03 <code>test_single_mcginley_bands[large-ulcer]</code> 147 6787.41 6890.86 6793.59 6790.34 11.68 1.47e+02 <code>test_bulk_mcginley_bands[large-standard]</code> 685 420.50 694.91 428.82 423.85 27.53 2.33e+03 <code>test_bulk_mcginley_bands[large-mean]</code> 2612 356.63 628.30 360.35 358.69 14.55 2.78e+03 <code>test_bulk_mcginley_bands[large-median]</code> 662 1440.17 1829.77 1454.12 1450.82 26.18 6.88e+02 <code>test_bulk_mcginley_bands[large-mode]</code> 262 3756.16 4239.63 3772.07 3766.30 33.39 2.65e+02 <code>test_bulk_mcginley_bands[large-ulcer]</code> 818 1184.95 1541.14 1191.13 1187.57 23.10 8.40e+02 <code>test_single_ichimoku[large]</code> 9052 103.02 158.87 104.11 103.91 1.92 9.60e+03 <code>test_bulk_ichimoku[large]</code> 192 1089.34 1541.80 1105.23 1092.71 56.55 9.05e+02 <code>test_single_donchian[large]</code> 11934 78.98 112.37 79.79 79.65 1.06 1.25e+04 <code>test_bulk_donchian[large]</code> 1808 414.35 715.54 418.40 416.45 15.84 2.39e+03 <code>test_single_keltner[large-simple-simple]</code> 7810 109.67 222.43 112.84 112.46 3.28 8.86e+03 <code>test_single_keltner[large-simple-smoothed]</code> 5765 154.02 207.48 157.10 156.98 2.71 6.37e+03 <code>test_single_keltner[large-simple-exponential]</code> 6012 152.81 240.46 155.53 154.41 4.00 6.43e+03 <code>test_single_keltner[large-simple-median]</code> 4847 153.74 294.41 156.91 157.30 4.55 6.37e+03 <code>test_single_keltner[large-simple-mode]</code> 3819 218.39 343.87 229.70 228.93 6.55 4.35e+03 <code>test_single_keltner[large-smoothed-simple]</code> 5969 151.28 215.87 152.91 152.28 2.99 6.54e+03 <code>test_single_keltner[large-smoothed-smoothed]</code> 4829 194.20 323.17 197.46 197.15 4.50 5.06e+03 <code>test_single_keltner[large-smoothed-exponential]</code> 4831 192.67 267.28 196.76 196.76 3.94 5.08e+03 <code>test_single_keltner[large-smoothed-median]</code> 3800 199.63 325.06 201.75 200.96 5.47 4.96e+03 <code>test_single_keltner[large-smoothed-mode]</code> 3510 263.48 342.17 270.63 270.17 4.81 3.70e+03 <code>test_single_keltner[large-exponential-simple]</code> 6070 151.22 226.59 153.67 152.19 3.46 6.51e+03 <code>test_single_keltner[large-exponential-smoothed]</code> 4798 192.15 301.96 195.28 195.35 4.44 5.12e+03 <code>test_single_keltner[large-exponential-exponential]</code> 4840 196.13 251.11 198.70 198.28 2.53 5.03e+03 <code>test_single_keltner[large-exponential-median]</code> 3891 199.04 264.09 201.44 200.67 3.69 4.96e+03 <code>test_single_keltner[large-exponential-mode]</code> 3258 262.30 340.13 269.02 268.59 4.35 3.72e+03 <code>test_single_keltner[large-median-simple]</code> 5250 157.74 238.61 159.37 158.78 3.71 6.27e+03 <code>test_single_keltner[large-median-smoothed]</code> 4415 197.06 344.39 198.99 198.46 4.63 5.03e+03 <code>test_single_keltner[large-median-exponential]</code> 4503 198.54 332.87 200.10 199.35 5.36 5.00e+03 <code>test_single_keltner[large-median-median]</code> 4145 205.54 317.61 208.76 206.91 6.09 4.79e+03 <code>test_single_keltner[large-median-mode]</code> 3173 267.35 417.56 275.13 273.96 8.04 3.63e+03 <code>test_single_keltner[large-mode-simple]</code> 5349 166.22 240.72 177.13 177.50 4.03 5.65e+03 <code>test_single_keltner[large-mode-smoothed]</code> 4290 205.57 383.48 216.90 216.74 6.45 4.61e+03 <code>test_single_keltner[large-mode-exponential]</code> 4349 207.28 305.15 217.85 218.22 4.55 4.59e+03 <code>test_single_keltner[large-mode-median]</code> 3679 209.95 316.43 221.30 221.26 5.62 4.52e+03 <code>test_single_keltner[large-mode-mode]</code> 3264 275.56 446.06 290.56 290.46 6.65 3.44e+03 <code>test_bulk_keltner[large-simple-simple]</code> 1151 735.98 1044.25 742.41 739.86 19.29 1.35e+03 <code>test_bulk_keltner[large-simple-smoothed]</code> 911 1038.58 1380.19 1047.90 1044.80 21.52 9.54e+02 <code>test_bulk_keltner[large-simple-exponential]</code> 917 1041.82 1391.73 1049.37 1046.26 20.41 9.53e+02 <code>test_bulk_keltner[large-simple-median]</code> 538 1758.58 2215.84 1772.44 1768.18 28.02 5.64e+02 <code>test_bulk_keltner[large-simple-mode]</code> 242 4046.57 4352.31 4067.82 4062.67 28.92 2.46e+02 <code>test_bulk_keltner[large-smoothed-simple]</code> 715 1029.87 1467.17 1039.98 1036.30 29.33 9.62e+02 <code>test_bulk_keltner[large-smoothed-smoothed]</code> 717 1332.63 1717.12 1343.73 1340.51 23.10 7.44e+02 <code>test_bulk_keltner[large-smoothed-exponential]</code> 718 1336.38 1733.89 1345.01 1341.70 25.06 7.43e+02 <code>test_bulk_keltner[large-smoothed-median]</code> 463 2052.97 2536.16 2068.55 2063.25 34.80 4.83e+02 <code>test_bulk_keltner[large-smoothed-mode]</code> 224 4339.22 4846.74 4375.08 4360.09 59.11 2.29e+02 <code>test_bulk_keltner[large-exponential-simple]</code> 711 1037.37 1492.49 1055.50 1043.13 41.25 9.47e+02 <code>test_bulk_keltner[large-exponential-smoothed]</code> 700 1341.45 2159.12 1357.94 1346.29 76.06 7.36e+02 <code>test_bulk_keltner[large-exponential-exponential]</code> 709 1341.78 1865.62 1350.78 1346.78 32.99 7.40e+02 <code>test_bulk_keltner[large-exponential-median]</code> 463 2047.29 2670.97 2068.44 2061.86 40.07 4.83e+02 <code>test_bulk_keltner[large-exponential-mode]</code> 226 4348.22 5005.82 4372.95 4364.29 52.33 2.29e+02 <code>test_bulk_keltner[large-median-simple]</code> 426 1906.16 2504.38 1925.97 1915.41 46.97 5.19e+02 <code>test_bulk_keltner[large-median-smoothed]</code> 433 2208.06 3329.94 2226.82 2218.49 67.93 4.49e+02 <code>test_bulk_keltner[large-median-exponential]</code> 433 2208.93 3036.03 2226.63 2219.62 49.22 4.49e+02 <code>test_bulk_keltner[large-median-median]</code> 326 2968.09 3786.31 2990.88 2981.85 57.39 3.34e+02 <code>test_bulk_keltner[large-median-mode]</code> 186 5249.76 5800.36 5290.70 5269.83 69.57 1.89e+02 <code>test_bulk_keltner[large-mode-simple]</code> 233 3787.83 4724.81 3820.72 3799.92 87.12 2.62e+02 <code>test_bulk_keltner[large-mode-smoothed]</code> 234 4091.52 4761.87 4123.03 4105.62 67.96 2.43e+02 <code>test_bulk_keltner[large-mode-exponential]</code> 238 4088.96 4675.93 4115.78 4106.13 50.09 2.43e+02 <code>test_bulk_keltner[large-mode-median]</code> 202 4817.17 5511.37 4848.10 4833.86 62.42 2.06e+02 <code>test_bulk_keltner[large-mode-mode]</code> 138 7101.66 7807.01 7145.78 7128.74 82.83 1.40e+02 <code>test_single_supertrend[large-simple]</code> 7921 115.04 169.19 116.83 116.69 2.56 8.56e+03 <code>test_single_supertrend[large-smoothed]</code> 6048 156.93 269.44 158.75 158.54 3.90 6.30e+03 <code>test_single_supertrend[large-exponential]</code> 6125 157.35 270.91 159.12 158.30 5.19 6.28e+03 <code>test_single_supertrend[large-median]</code> 4746 157.43 342.85 159.55 158.91 5.18 6.27e+03 <code>test_single_supertrend[large-mode]</code> 5216 168.54 245.02 179.49 179.58 3.51 5.57e+03 <code>test_bulk_supertrend[large-simple]</code> 1963 468.22 558.85 473.25 472.54 5.84 2.11e+03 <code>test_bulk_supertrend[large-smoothed]</code> 1278 759.43 963.74 765.74 764.74 10.27 1.31e+03 <code>test_bulk_supertrend[large-exponential]</code> 1272 764.10 953.37 769.38 768.34 9.85 1.30e+03 <code>test_bulk_supertrend[large-median]</code> 585 1637.28 1867.84 1648.55 1646.04 16.14 6.07e+02 <code>test_bulk_supertrend[large-mode]</code> 282 3491.31 3766.89 3531.67 3531.92 22.97 2.83e+02"},{"location":"benchmarks/candle-indicators/medium/","title":"Medium Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_mce[medium-simple]</code> 30287 17.94 36.87 18.17 18.13 0.26 5.50e+04 <code>test_single_mce[medium-smoothed]</code> 23778 35.78 85.46 36.12 36.04 0.79 2.77e+04 <code>test_single_mce[medium-exponential]</code> 22613 35.89 149.85 36.32 36.26 1.20 2.75e+04 <code>test_single_mce[medium-median]</code> 13616 37.61 4076.92 39.07 38.30 35.83 2.56e+04 <code>test_single_mce[medium-mode]</code> 11699 70.56 981.17 75.59 74.89 10.18 1.32e+04 <code>test_bulk_mce[medium-simple]</code> 1225 139.13 565.80 142.80 140.09 15.91 7.00e+03 <code>test_bulk_mce[medium-smoothed]</code> 3298 287.87 668.95 294.04 290.43 15.89 3.40e+03 <code>test_bulk_mce[medium-exponential]</code> 3272 287.24 922.58 301.43 291.57 31.72 3.32e+03 <code>test_bulk_mce[medium-median]</code> 1406 654.02 1110.97 671.85 658.71 35.43 1.49e+03 <code>test_bulk_mce[medium-mode]</code> 561 1740.75 2524.77 1779.91 1763.66 49.48 5.62e+02 <code>test_single_mcginley_env[medium]</code> 30946 16.67 359.19 17.27 16.91 4.02 5.79e+04 <code>test_bulk_mcginley_env[medium]</code> 5846 133.52 470.28 140.53 135.39 18.69 7.12e+03 <code>test_single_bands[medium-standard-simple]</code> 33028 20.22 122.56 20.87 20.68 2.74 4.79e+04 <code>test_single_bands[medium-standard-smoothed]</code> 22960 38.41 237.17 39.72 39.15 5.89 2.52e+04 <code>test_single_bands[medium-standard-exponential]</code> 22122 38.68 164.30 39.29 38.96 3.71 2.54e+04 <code>test_single_bands[medium-standard-median]</code> 14381 39.91 187.44 42.12 40.94 7.90 2.37e+04 <code>test_single_bands[medium-standard-mode]</code> 9374 73.33 1948.95 78.73 77.52 21.26 1.27e+04 <code>test_single_bands[medium-mean-simple]</code> 40269 19.87 92.80 20.34 20.15 2.45 4.92e+04 <code>test_single_bands[medium-mean-smoothed]</code> 22604 38.20 167.96 39.33 38.80 5.08 2.54e+04 <code>test_single_bands[medium-mean-exponential]</code> 22824 37.96 168.93 39.01 38.56 4.79 2.56e+04 <code>test_single_bands[medium-mean-median]</code> 11961 39.85 154.26 40.79 40.31 4.28 2.45e+04 <code>test_single_bands[medium-mean-mode]</code> 10415 72.85 267.24 77.88 77.13 6.55 1.28e+04 <code>test_single_bands[medium-median-simple]</code> 16024 39.43 289.48 41.28 40.26 6.71 2.42e+04 <code>test_single_bands[medium-median-smoothed]</code> 6960 57.70 286.41 59.42 58.02 7.99 1.68e+04 <code>test_single_bands[medium-median-exponential]</code> 12270 57.59 141.83 58.49 57.91 4.80 1.71e+04 <code>test_single_bands[medium-median-median]</code> 12913 58.48 272.98 59.74 59.22 5.34 1.67e+04 <code>test_single_bands[medium-median-mode]</code> 8208 92.04 291.69 98.98 96.72 12.29 1.01e+04 <code>test_single_bands[medium-mode-simple]</code> 11338 72.50 180.41 77.99 77.22 5.95 1.28e+04 <code>test_single_bands[medium-mode-smoothed]</code> 9840 90.46 184.96 95.66 94.82 6.59 1.05e+04 <code>test_single_bands[medium-mode-exponential]</code> 9876 90.93 233.50 96.97 95.44 9.15 1.03e+04 <code>test_single_bands[medium-mode-median]</code> 6638 92.11 422.63 98.17 96.56 10.93 1.02e+04 <code>test_single_bands[medium-mode-mode]</code> 6744 127.06 391.45 135.27 133.56 10.80 7.39e+03 <code>test_single_bands[medium-ulcer-simple]</code> 575 1697.95 2225.51 1721.33 1703.34 43.05 5.81e+02 <code>test_single_bands[medium-ulcer-smoothed]</code> 578 1715.99 1980.41 1730.36 1718.93 26.02 5.78e+02 <code>test_single_bands[medium-ulcer-exponential]</code> 555 1716.28 1871.56 1732.22 1719.12 28.20 5.77e+02 <code>test_single_bands[medium-ulcer-median]</code> 547 1718.69 2012.14 1746.94 1728.65 43.89 5.72e+02 <code>test_single_bands[medium-ulcer-mode]</code> 543 1752.67 2008.73 1789.22 1767.56 47.47 5.59e+02 <code>test_bulk_bands[medium-standard-simple]</code> 271 212.98 436.39 227.10 216.44 27.65 4.40e+03 <code>test_bulk_bands[medium-standard-smoothed]</code> 1999 358.09 4486.63 389.11 368.69 141.11 2.57e+03 <code>test_bulk_bands[medium-standard-exponential]</code> 2635 357.41 673.50 369.01 359.85 27.25 2.71e+03 <code>test_bulk_bands[medium-standard-median]</code> 1106 711.35 1295.97 745.81 723.82 57.58 1.34e+03 <code>test_bulk_bands[medium-standard-mode]</code> 519 1800.90 2087.34 1857.25 1843.56 39.32 5.38e+02 <code>test_bulk_bands[medium-mean-simple]</code> 4884 187.41 804.74 192.65 189.19 19.60 5.19e+03 <code>test_bulk_bands[medium-mean-smoothed]</code> 2716 334.15 576.08 344.62 337.15 23.71 2.90e+03 <code>test_bulk_bands[medium-mean-exponential]</code> 2719 333.37 796.21 339.24 335.19 17.79 2.95e+03 <code>test_bulk_bands[medium-mean-median]</code> 1314 697.06 1479.51 712.10 704.14 31.89 1.40e+03 <code>test_bulk_bands[medium-mean-mode]</code> 535 1816.95 2554.68 1852.45 1834.66 51.16 5.40e+02 <code>test_bulk_bands[medium-median-simple]</code> 1323 683.80 926.11 699.21 690.52 27.02 1.43e+03 <code>test_bulk_bands[medium-median-smoothed]</code> 1092 836.39 1364.75 859.59 844.11 44.47 1.16e+03 <code>test_bulk_bands[medium-median-exponential]</code> 1050 832.89 2052.75 885.86 860.38 79.80 1.13e+03 <code>test_bulk_bands[medium-median-median]</code> 829 1150.67 2444.55 1275.32 1223.97 155.04 7.84e+02 <code>test_bulk_bands[medium-median-mode]</code> 409 2297.10 2883.42 2352.68 2320.16 74.31 4.25e+02 <code>test_bulk_bands[medium-mode-simple]</code> 499 1802.28 2674.75 1866.96 1825.77 100.92 5.36e+02 <code>test_bulk_bands[medium-mode-smoothed]</code> 496 1959.56 3330.49 2040.67 1986.03 128.88 4.90e+02 <code>test_bulk_bands[medium-mode-exponential]</code> 491 1941.43 2881.60 2030.63 1983.78 114.98 4.92e+02 <code>test_bulk_bands[medium-mode-median]</code> 419 2297.88 2789.97 2355.73 2327.77 72.33 4.24e+02 <code>test_bulk_bands[medium-mode-mode]</code> 283 3387.07 3914.07 3467.76 3449.13 62.49 2.88e+02 <code>test_bulk_bands[medium-ulcer-simple]</code> 1450 588.13 1086.26 601.08 591.04 30.59 1.66e+03 <code>test_bulk_bands[medium-ulcer-smoothed]</code> 1279 739.09 1016.69 750.29 741.43 27.97 1.33e+03 <code>test_bulk_bands[medium-ulcer-exponential]</code> 1259 738.93 1031.67 749.54 741.35 24.90 1.33e+03 <code>test_bulk_bands[medium-ulcer-median]</code> 850 1100.95 2626.66 1147.62 1112.94 110.42 8.71e+02 <code>test_bulk_bands[medium-ulcer-mode]</code> 438 2217.97 2513.14 2248.06 2231.16 36.54 4.45e+02 <code>test_single_mcginley_bands[medium-standard]</code> 40481 18.96 85.17 19.43 19.28 2.32 5.15e+04 <code>test_single_mcginley_bands[medium-mean]</code> 43939 18.57 80.65 19.18 19.06 2.23 5.21e+04 <code>test_single_mcginley_bands[medium-median]</code> 16575 37.96 187.89 38.85 38.43 3.83 2.57e+04 <code>test_single_mcginley_bands[medium-mode]</code> 11887 71.33 204.13 76.09 75.54 5.39 1.31e+04 <code>test_single_mcginley_bands[medium-ulcer]</code> 587 1696.64 1864.45 1709.24 1698.88 23.54 5.85e+02 <code>test_bulk_mcginley_bands[medium-standard]</code> 3813 202.78 349.46 207.43 205.19 9.69 4.82e+03 <code>test_bulk_mcginley_bands[medium-mean]</code> 5391 172.22 324.26 175.96 174.28 9.18 5.68e+03 <code>test_bulk_mcginley_bands[medium-median]</code> 1327 697.35 1087.65 710.24 703.76 22.38 1.41e+03 <code>test_bulk_mcginley_bands[medium-mode]</code> 533 1806.40 2353.66 1842.36 1820.67 51.06 5.43e+02 <code>test_bulk_mcginley_bands[medium-ulcer]</code> 1666 582.82 751.56 589.93 584.19 17.91 1.70e+03 <code>test_single_ichimoku[medium]</code> 17476 49.98 96.70 50.71 50.50 1.14 1.97e+04 <code>test_bulk_ichimoku[medium]</code> 870 531.65 649.41 534.60 532.72 10.28 1.87e+03 <code>test_single_donchian[medium]</code> 22776 38.69 67.02 39.02 38.98 0.55 2.56e+04 <code>test_bulk_donchian[medium]</code> 3985 199.28 1303.17 203.70 202.96 18.97 4.91e+03 <code>test_single_keltner[medium-simple-simple]</code> 15250 56.04 1239.69 56.84 56.46 10.04 1.76e+04 <code>test_single_keltner[medium-simple-smoothed]</code> 12187 73.37 216.41 74.44 73.85 2.63 1.34e+04 <code>test_single_keltner[medium-simple-exponential]</code> 11732 74.07 113.39 74.90 74.89 1.13 1.34e+04 <code>test_single_keltner[medium-simple-median]</code> 8308 75.91 153.80 76.93 76.69 2.04 1.30e+04 <code>test_single_keltner[medium-simple-mode]</code> 7790 108.15 176.52 113.14 112.87 2.43 8.84e+03 <code>test_single_keltner[medium-smoothed-simple]</code> 11897 72.96 117.83 74.10 73.87 1.49 1.35e+04 <code>test_single_keltner[medium-smoothed-smoothed]</code> 9638 91.61 146.70 92.54 92.19 1.56 1.08e+04 <code>test_single_keltner[medium-smoothed-exponential]</code> 9570 92.07 157.52 93.98 93.65 1.74 1.06e+04 <code>test_single_keltner[medium-smoothed-median]</code> 7956 92.56 137.72 93.36 93.13 1.67 1.07e+04 <code>test_single_keltner[medium-smoothed-mode]</code> 6638 125.87 184.54 131.08 130.87 2.34 7.63e+03 <code>test_single_keltner[medium-exponential-simple]</code> 11817 74.83 154.52 75.66 75.46 1.80 1.32e+04 <code>test_single_keltner[medium-exponential-smoothed]</code> 9806 91.20 144.50 92.57 92.19 1.33 1.08e+04 <code>test_single_keltner[medium-exponential-exponential]</code> 9989 91.89 132.89 93.09 92.78 1.37 1.07e+04 <code>test_single_keltner[medium-exponential-median]</code> 7329 94.04 136.85 95.06 94.82 1.43 1.05e+04 <code>test_single_keltner[medium-exponential-mode]</code> 6560 126.31 245.74 131.77 131.63 2.80 7.59e+03 <code>test_single_keltner[medium-median-simple]</code> 9704 76.17 145.65 77.48 77.26 2.06 1.29e+04 <code>test_single_keltner[medium-median-smoothed]</code> 8914 94.30 151.46 95.24 95.11 1.45 1.05e+04 <code>test_single_keltner[medium-median-exponential]</code> 8920 94.52 220.69 95.74 95.63 2.04 1.04e+04 <code>test_single_keltner[medium-median-median]</code> 8106 95.67 156.35 97.75 97.72 2.01 1.02e+04 <code>test_single_keltner[medium-median-mode]</code> 5475 129.39 203.91 133.84 133.52 2.74 7.47e+03 <code>test_single_keltner[medium-mode-simple]</code> 10385 82.76 168.43 88.01 88.44 2.51 1.14e+04 <code>test_single_keltner[medium-mode-smoothed]</code> 8734 102.00 3212.36 108.80 108.02 34.17 9.19e+03 <code>test_single_keltner[medium-mode-exponential]</code> 8638 100.52 214.89 106.42 106.52 3.54 9.40e+03 <code>test_single_keltner[medium-mode-median]</code> 7330 102.91 142.59 108.32 108.72 2.46 9.23e+03 <code>test_single_keltner[medium-mode-mode]</code> 6178 135.54 262.80 145.01 144.93 4.03 6.90e+03 <code>test_bulk_keltner[medium-simple-simple]</code> 366 361.43 472.24 365.80 362.82 12.57 2.73e+03 <code>test_bulk_keltner[medium-simple-smoothed]</code> 1898 511.11 593.19 515.34 514.04 5.60 1.94e+03 <code>test_bulk_keltner[medium-simple-exponential]</code> 1837 512.50 1368.60 518.27 515.24 23.16 1.93e+03 <code>test_bulk_keltner[medium-simple-median]</code> 1100 857.87 1003.52 864.72 863.04 9.42 1.16e+03 <code>test_bulk_keltner[medium-simple-mode]</code> 505 1917.49 2162.58 1951.30 1950.03 15.77 5.12e+02 <code>test_bulk_keltner[medium-smoothed-simple]</code> 1872 507.30 651.32 511.16 510.11 8.12 1.96e+03 <code>test_bulk_keltner[medium-smoothed-smoothed]</code> 1460 658.23 819.10 661.78 660.42 10.27 1.51e+03 <code>test_bulk_keltner[medium-smoothed-exponential]</code> 1456 658.91 864.65 662.97 661.39 11.42 1.51e+03 <code>test_bulk_keltner[medium-smoothed-median]</code> 925 1005.60 1231.95 1013.73 1011.17 16.02 9.86e+02 <code>test_bulk_keltner[medium-smoothed-mode]</code> 466 2076.77 2331.51 2098.43 2097.18 17.14 4.77e+02 <code>test_bulk_keltner[medium-exponential-simple]</code> 1832 510.46 734.69 515.11 513.56 12.16 1.94e+03 <code>test_bulk_keltner[medium-exponential-smoothed]</code> 1445 660.56 884.80 665.14 663.67 11.95 1.50e+03 <code>test_bulk_keltner[medium-exponential-exponential]</code> 1422 661.60 833.65 666.37 664.53 11.26 1.50e+03 <code>test_bulk_keltner[medium-exponential-median]</code> 928 1006.62 1246.97 1014.79 1012.25 16.31 9.85e+02 <code>test_bulk_keltner[medium-exponential-mode]</code> 466 2067.90 2360.40 2103.62 2100.10 25.05 4.75e+02 <code>test_bulk_keltner[medium-median-simple]</code> 1009 935.34 1155.19 941.96 939.99 13.94 1.06e+03 <code>test_bulk_keltner[medium-median-smoothed]</code> 883 1082.26 1366.21 1090.87 1088.47 17.50 9.17e+02 <code>test_bulk_keltner[medium-median-exponential]</code> 880 1084.19 1353.99 1097.85 1090.84 25.93 9.11e+02 <code>test_bulk_keltner[medium-median-median]</code> 655 1461.23 1734.47 1474.30 1469.10 22.30 6.78e+02 <code>test_bulk_keltner[medium-median-mode]</code> 368 2525.36 2839.57 2548.96 2546.39 22.76 3.92e+02 <code>test_bulk_keltner[medium-mode-simple]</code> 559 1721.43 2161.84 1757.16 1752.23 36.99 5.69e+02 <code>test_bulk_keltner[medium-mode-smoothed]</code> 511 1867.90 2166.03 1904.49 1902.62 22.86 5.25e+02 <code>test_bulk_keltner[medium-mode-exponential]</code> 509 1872.95 2216.75 1913.27 1906.23 37.11 5.23e+02 <code>test_bulk_keltner[medium-mode-median]</code> 429 2241.58 2589.31 2260.77 2251.62 39.78 4.42e+02 <code>test_bulk_keltner[medium-mode-mode]</code> 295 3307.79 3657.09 3365.07 3349.55 55.23 2.97e+02 <code>test_single_supertrend[medium-simple]</code> 14690 56.85 95.43 57.80 57.30 1.09 1.73e+04 <code>test_single_supertrend[medium-smoothed]</code> 11942 74.85 128.96 76.88 77.08 1.32 1.30e+04 <code>test_single_supertrend[medium-exponential]</code> 11641 76.50 110.98 77.31 77.15 1.16 1.29e+04 <code>test_single_supertrend[medium-median]</code> 8805 77.72 137.04 79.59 79.35 1.68 1.26e+04 <code>test_single_supertrend[medium-mode]</code> 9320 85.44 143.24 90.95 91.13 2.00 1.10e+04 <code>test_bulk_supertrend[medium-simple]</code> 3658 232.67 277.20 235.10 234.46 2.87 4.25e+03 <code>test_bulk_supertrend[medium-smoothed]</code> 2538 375.48 501.98 379.98 378.61 6.64 2.63e+03 <code>test_bulk_supertrend[medium-exponential]</code> 2446 378.65 1039.34 390.18 382.30 25.58 2.56e+03 <code>test_bulk_supertrend[medium-median]</code> 1097 804.73 1196.97 818.51 809.36 27.39 1.22e+03 <code>test_bulk_supertrend[medium-mode]</code> 603 1589.60 7154.47 1632.99 1622.51 225.84 6.12e+02"},{"location":"benchmarks/candle-indicators/small/","title":"Small Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_mce[small-simple]</code> 14015 3.94 45.57 4.09 4.06 0.79 2.44e+05 <code>test_single_mce[small-smoothed]</code> 91216 6.57 253.83 6.73 6.69 1.30 1.49e+05 <code>test_single_mce[small-exponential]</code> 87666 6.59 126.30 6.75 6.70 1.14 1.48e+05 <code>test_single_mce[small-median]</code> 57938 7.76 651.14 7.95 7.87 3.07 1.26e+05 <code>test_single_mce[small-mode]</code> 34351 15.11 248.30 16.33 16.24 2.11 6.12e+04 <code>test_bulk_mce[small-simple]</code> 262 26.43 137.02 27.30 26.70 6.93 3.66e+04 <code>test_bulk_mce[small-smoothed]</code> 15084 52.28 389.60 53.56 53.20 4.29 1.87e+04 <code>test_bulk_mce[small-exponential]</code> 14803 53.04 780.10 56.69 54.85 12.64 1.76e+04 <code>test_bulk_mce[small-median]</code> 5111 128.96 417.34 132.73 130.46 11.44 7.53e+03 <code>test_bulk_mce[small-mode]</code> 2693 330.95 611.97 343.54 336.84 21.40 2.91e+03 <code>test_single_mcginley_env[small]</code> 121625 3.76 253.35 3.91 3.87 1.37 2.56e+05 <code>test_bulk_mcginley_env[small]</code> 23643 25.13 3349.75 28.53 26.17 23.38 3.51e+04 <code>test_single_bands[small-standard-simple]</code> 33519 4.41 1391.07 5.22 4.78 9.53 1.91e+05 <code>test_single_bands[small-standard-smoothed]</code> 49092 7.19 3141.08 7.90 7.37 22.52 1.27e+05 <code>test_single_bands[small-standard-exponential]</code> 34749 7.43 460.45 7.89 7.55 5.00 1.27e+05 <code>test_single_bands[small-standard-median]</code> 23560 8.30 737.95 9.17 8.59 7.56 1.09e+05 <code>test_single_bands[small-standard-mode]</code> 35294 15.81 300.91 17.50 17.02 6.85 5.71e+04 <code>test_single_bands[small-mean-simple]</code> 51136 4.46 260.69 4.75 4.59 3.39 2.11e+05 <code>test_single_bands[small-mean-smoothed]</code> 44701 7.20 199.87 7.59 7.35 3.95 1.32e+05 <code>test_single_bands[small-mean-exponential]</code> 53732 6.93 417.99 7.44 7.19 4.46 1.34e+05 <code>test_single_bands[small-mean-median]</code> 23247 8.41 459.30 9.06 8.61 5.84 1.10e+05 <code>test_single_bands[small-mean-mode]</code> 18519 15.50 318.58 17.33 16.74 6.85 5.77e+04 <code>test_single_bands[small-median-simple]</code> 34570 8.39 232.32 8.99 8.59 4.65 1.11e+05 <code>test_single_bands[small-median-smoothed]</code> 23789 10.87 456.39 11.57 11.06 6.42 8.64e+04 <code>test_single_bands[small-median-exponential]</code> 19355 10.91 287.93 11.75 11.13 6.12 8.51e+04 <code>test_single_bands[small-median-median]</code> 22814 11.98 738.38 13.01 12.20 7.95 7.69e+04 <code>test_single_bands[small-median-mode]</code> 30236 19.46 293.33 21.48 20.76 7.82 4.65e+04 <code>test_single_bands[small-mode-simple]</code> 33395 15.46 662.04 17.44 16.70 8.30 5.74e+04 <code>test_single_bands[small-mode-smoothed]</code> 16534 18.28 403.50 19.91 19.44 6.95 5.02e+04 <code>test_single_bands[small-mode-exponential]</code> 35410 18.18 358.22 19.97 19.48 6.91 5.01e+04 <code>test_single_bands[small-mode-median]</code> 16096 19.43 313.00 21.37 20.70 7.73 4.68e+04 <code>test_single_bands[small-mode-mode]</code> 26176 26.63 403.84 29.39 28.76 8.51 3.40e+04 <code>test_single_bands[small-ulcer-simple]</code> 10415 68.41 560.56 70.42 68.59 13.33 1.42e+04 <code>test_single_bands[small-ulcer-smoothed]</code> 10079 71.02 354.86 73.15 71.26 12.92 1.37e+04 <code>test_single_bands[small-ulcer-exponential]</code> 10903 71.02 378.56 72.95 71.22 12.26 1.37e+04 <code>test_single_bands[small-ulcer-median]</code> 9923 72.11 380.15 74.65 72.54 13.23 1.34e+04 <code>test_single_bands[small-ulcer-mode]</code> 11232 79.30 392.58 82.60 80.69 13.62 1.21e+04 <code>test_bulk_bands[small-standard-simple]</code> 10822 40.15 445.73 42.85 41.07 12.14 2.33e+04 <code>test_bulk_bands[small-standard-smoothed]</code> 5990 66.30 693.36 70.46 67.43 17.31 1.42e+04 <code>test_bulk_bands[small-standard-exponential]</code> 5516 66.09 364.63 71.01 67.70 16.76 1.41e+04 <code>test_bulk_bands[small-standard-median]</code> 3795 133.98 531.51 142.79 137.04 23.92 7.00e+03 <code>test_bulk_bands[small-standard-mode]</code> 2139 342.45 1289.75 360.08 352.87 33.23 2.78e+03 <code>test_bulk_bands[small-mean-simple]</code> 5524 37.43 175.70 40.52 38.50 7.47 2.47e+04 <code>test_bulk_bands[small-mean-smoothed]</code> 7022 62.93 178.52 66.53 64.35 7.54 1.50e+04 <code>test_bulk_bands[small-mean-exponential]</code> 5425 63.30 191.87 67.46 64.83 8.99 1.48e+04 <code>test_bulk_bands[small-mean-median]</code> 2981 133.06 362.87 144.16 139.24 18.35 6.94e+03 <code>test_bulk_bands[small-mean-mode]</code> 2380 346.71 619.51 363.67 356.96 22.21 2.75e+03 <code>test_bulk_bands[small-median-simple]</code> 5392 130.39 324.06 136.80 133.11 10.21 7.31e+03 <code>test_bulk_bands[small-median-smoothed]</code> 3227 156.85 301.89 167.28 162.04 14.36 5.98e+03 <code>test_bulk_bands[small-median-exponential]</code> 4048 158.06 305.45 168.53 163.59 14.12 5.93e+03 <code>test_bulk_bands[small-median-median]</code> 2448 223.56 570.23 240.04 233.71 21.91 4.17e+03 <code>test_bulk_bands[small-median-mode]</code> 1767 445.19 658.41 472.24 466.23 26.77 2.12e+03 <code>test_bulk_bands[small-mode-simple]</code> 1803 342.26 572.06 368.36 362.30 24.63 2.71e+03 <code>test_bulk_bands[small-mode-smoothed]</code> 1876 369.58 1908.52 413.27 405.18 68.26 2.42e+03 <code>test_bulk_bands[small-mode-exponential]</code> 1791 369.15 678.89 406.34 402.17 27.49 2.46e+03 <code>test_bulk_bands[small-mode-median]</code> 1806 443.26 686.36 477.03 469.15 30.54 2.10e+03 <code>test_bulk_bands[small-mode-mode]</code> 1401 655.62 1000.14 698.79 694.47 34.93 1.43e+03 <code>test_bulk_bands[small-ulcer-simple]</code> 3092 116.82 401.86 130.80 126.85 18.17 7.65e+03 <code>test_bulk_bands[small-ulcer-smoothed]</code> 5454 143.46 357.85 159.34 155.81 14.85 6.28e+03 <code>test_bulk_bands[small-ulcer-exponential]</code> 3627 144.52 375.24 162.14 157.39 19.44 6.17e+03 <code>test_bulk_bands[small-ulcer-median]</code> 2959 214.91 575.23 242.39 236.24 30.48 4.13e+03 <code>test_bulk_bands[small-ulcer-mode]</code> 1602 430.80 3330.51 501.20 489.79 122.87 2.00e+03 <code>test_single_mcginley_bands[small-standard]</code> 41926 4.48 60.56 4.74 4.61 1.00 2.11e+05 <code>test_single_mcginley_bands[small-mean]</code> 46391 4.35 90.35 4.58 4.48 1.00 2.18e+05 <code>test_single_mcginley_bands[small-median]</code> 42122 8.04 80.28 8.26 8.17 1.01 1.21e+05 <code>test_single_mcginley_bands[small-mode]</code> 33541 15.24 63.32 16.58 16.50 1.00 6.03e+04 <code>test_single_mcginley_bands[small-ulcer]</code> 12806 68.20 155.78 68.63 68.31 1.75 1.46e+04 <code>test_bulk_mcginley_bands[small-standard]</code> 15925 38.18 129.22 39.59 39.13 2.40 2.53e+04 <code>test_bulk_mcginley_bands[small-mean]</code> 13149 33.63 86.76 35.30 34.69 2.61 2.83e+04 <code>test_bulk_mcginley_bands[small-median]</code> 4817 137.70 257.35 142.64 139.74 8.17 7.01e+03 <code>test_bulk_mcginley_bands[small-mode]</code> 2192 344.84 827.49 367.55 359.25 27.19 2.72e+03 <code>test_bulk_mcginley_bands[small-ulcer]</code> 5495 113.13 210.54 118.78 115.70 8.00 8.42e+03 <code>test_single_ichimoku[small]</code> 47660 11.00 113.87 11.56 11.44 0.97 8.65e+04 <code>test_bulk_ichimoku[small]</code> 7484 90.72 155.56 92.78 91.56 3.71 1.08e+04 <code>test_single_donchian[small]</code> 65536 8.35 60.02 8.58 8.52 0.67 1.17e+05 <code>test_bulk_donchian[small]</code> 14647 38.13 107.59 39.72 39.24 2.14 2.52e+04 <code>test_single_keltner[small-simple-simple]</code> 45532 12.06 69.74 12.69 12.57 1.04 7.88e+04 <code>test_single_keltner[small-simple-smoothed]</code> 32201 14.56 104.44 15.59 15.33 1.54 6.42e+04 <code>test_single_keltner[small-simple-exponential]</code> 28406 14.94 89.41 15.49 15.28 1.38 6.46e+04 <code>test_single_keltner[small-simple-median]</code> 20089 16.18 87.19 16.81 16.52 1.69 5.95e+04 <code>test_single_keltner[small-simple-mode]</code> 23705 23.78 107.15 25.30 25.06 1.78 3.95e+04 <code>test_single_keltner[small-smoothed-simple]</code> 32143 15.11 70.74 15.52 15.35 1.19 6.44e+04 <code>test_single_keltner[small-smoothed-smoothed]</code> 35110 17.70 56.30 18.14 17.96 1.27 5.51e+04 <code>test_single_keltner[small-smoothed-exponential]</code> 36145 17.72 68.91 18.17 17.98 1.25 5.50e+04 <code>test_single_keltner[small-smoothed-median]</code> 26137 18.80 85.02 19.40 19.15 1.62 5.15e+04 <code>test_single_keltner[small-smoothed-mode]</code> 24140 26.35 68.26 27.78 27.59 1.53 3.60e+04 <code>test_single_keltner[small-exponential-simple]</code> 40419 15.17 77.98 15.53 15.37 1.16 6.44e+04 <code>test_single_keltner[small-exponential-smoothed]</code> 35180 17.63 72.17 18.18 18.00 1.24 5.50e+04 <code>test_single_keltner[small-exponential-exponential]</code> 37190 17.72 83.07 18.35 18.07 1.49 5.45e+04 <code>test_single_keltner[small-exponential-median]</code> 26342 18.93 91.80 19.54 19.26 1.62 5.12e+04 <code>test_single_keltner[small-exponential-mode]</code> 16072 26.20 80.65 27.73 27.50 1.80 3.61e+04 <code>test_single_keltner[small-median-simple]</code> 30822 16.41 75.95 16.96 16.70 1.57 5.90e+04 <code>test_single_keltner[small-median-smoothed]</code> 29205 18.95 113.39 19.59 19.35 1.64 5.10e+04 <code>test_single_keltner[small-median-exponential]</code> 29269 19.02 91.37 19.72 19.35 1.99 5.07e+04 <code>test_single_keltner[small-median-median]</code> 26680 19.87 81.94 20.51 20.26 1.62 4.88e+04 <code>test_single_keltner[small-median-mode]</code> 18757 27.46 73.04 29.14 28.81 2.08 3.43e+04 <code>test_single_keltner[small-mode-simple]</code> 28199 19.09 79.24 20.34 20.26 1.53 4.92e+04 <code>test_single_keltner[small-mode-smoothed]</code> 15643 21.59 181.72 23.14 22.82 2.49 4.32e+04 <code>test_single_keltner[small-mode-exponential]</code> 28587 21.57 99.11 22.85 22.74 1.64 4.38e+04 <code>test_single_keltner[small-mode-median]</code> 24248 22.59 100.46 24.19 24.02 1.94 4.13e+04 <code>test_single_keltner[small-mode-mode]</code> 21506 30.46 104.15 32.82 32.65 1.90 3.05e+04 <code>test_bulk_keltner[small-simple-simple]</code> 9755 68.91 140.58 70.90 69.85 3.65 1.41e+04 <code>test_bulk_keltner[small-simple-smoothed]</code> 8338 95.32 216.96 98.33 96.45 6.27 1.02e+04 <code>test_bulk_keltner[small-simple-exponential]</code> 7585 96.02 228.93 99.21 97.30 6.37 1.01e+04 <code>test_bulk_keltner[small-simple-median]</code> 4803 158.43 324.86 163.91 160.72 9.59 6.10e+03 <code>test_bulk_keltner[small-simple-mode]</code> 2171 368.36 527.39 381.82 376.97 13.97 2.62e+03 <code>test_bulk_keltner[small-smoothed-simple]</code> 5050 96.50 194.08 103.36 100.02 9.98 9.67e+03 <code>test_bulk_keltner[small-smoothed-smoothed]</code> 5400 122.96 229.09 128.37 125.93 7.61 7.79e+03 <code>test_bulk_keltner[small-smoothed-exponential]</code> 5296 123.59 207.15 128.71 126.38 7.34 7.77e+03 <code>test_bulk_keltner[small-smoothed-median]</code> 3650 186.15 364.30 194.44 191.59 11.15 5.14e+03 <code>test_bulk_keltner[small-smoothed-mode]</code> 1902 397.82 577.04 413.59 409.37 16.43 2.42e+03 <code>test_bulk_keltner[small-exponential-simple]</code> 5931 98.98 263.87 105.54 102.69 10.96 9.48e+03 <code>test_bulk_keltner[small-exponential-smoothed]</code> 5100 125.54 430.19 134.48 130.72 16.34 7.44e+03 <code>test_bulk_keltner[small-exponential-exponential]</code> 4491 126.00 298.10 135.56 131.96 13.19 7.38e+03 <code>test_bulk_keltner[small-exponential-median]</code> 3579 188.69 359.98 201.76 197.69 15.29 4.96e+03 <code>test_bulk_keltner[small-exponential-mode]</code> 1943 402.84 635.60 427.13 420.54 23.49 2.34e+03 <code>test_bulk_keltner[small-median-simple]</code> 3650 168.89 408.00 181.72 175.57 19.46 5.50e+03 <code>test_bulk_keltner[small-median-smoothed]</code> 3995 195.09 318.21 203.89 198.61 11.80 4.90e+03 <code>test_bulk_keltner[small-median-exponential]</code> 3606 197.06 567.60 212.10 208.52 18.79 4.71e+03 <code>test_bulk_keltner[small-median-median]</code> 2567 272.84 501.86 292.35 288.98 19.18 3.42e+03 <code>test_bulk_keltner[small-median-mode]</code> 1694 478.80 705.69 502.55 498.07 21.03 1.99e+03 <code>test_bulk_keltner[small-mode-simple]</code> 2311 349.52 598.95 372.54 368.15 20.07 2.68e+03 <code>test_bulk_keltner[small-mode-smoothed]</code> 2236 377.84 604.02 401.08 396.67 19.78 2.49e+03 <code>test_bulk_keltner[small-mode-exponential]</code> 1848 377.95 583.34 406.78 398.36 24.94 2.46e+03 <code>test_bulk_keltner[small-mode-median]</code> 1834 444.13 797.45 473.09 464.71 31.08 2.11e+03 <code>test_bulk_keltner[small-mode-mode]</code> 1350 651.21 866.34 677.04 670.89 25.20 1.48e+03 <code>test_single_supertrend[small-simple]</code> 51624 12.67 56.72 12.94 12.83 0.92 7.73e+04 <code>test_single_supertrend[small-smoothed]</code> 37525 15.11 61.46 15.47 15.39 0.93 6.47e+04 <code>test_single_supertrend[small-exponential]</code> 44516 15.24 70.17 15.56 15.43 1.09 6.43e+04 <code>test_single_supertrend[small-median]</code> 29818 16.57 60.37 17.03 16.83 1.30 5.87e+04 <code>test_single_supertrend[small-mode]</code> 33730 19.11 115.43 20.42 20.31 1.40 4.90e+04 <code>test_bulk_supertrend[small-simple]</code> 13716 45.24 123.82 46.27 45.82 2.44 2.16e+04 <code>test_bulk_supertrend[small-smoothed]</code> 11613 70.80 145.83 72.17 71.61 2.72 1.39e+04 <code>test_bulk_supertrend[small-exponential]</code> 11075 71.06 162.84 72.70 71.69 4.32 1.38e+04 <code>test_bulk_supertrend[small-median]</code> 5756 139.82 198.72 141.69 141.00 2.69 7.06e+03 <code>test_bulk_supertrend[small-mode]</code> 2700 314.34 385.78 322.69 320.58 6.51 3.10e+03"},{"location":"benchmarks/chart-trends/large/","title":"Large Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_peaks[1-large]</code> 2388 356.80 427.56 360.25 357.58 9.27 2.78e+03 <code>test_peaks[5-large]</code> 2876 325.56 729.65 335.33 326.46 26.89 2.98e+03 <code>test_peaks[10-large]</code> 2946 320.08 548.11 322.69 320.67 9.22 3.10e+03 <code>test_valleys[1-large]</code> 2446 383.45 660.45 387.26 384.06 12.47 2.58e+03 <code>test_valleys[5-large]</code> 2224 362.45 625.54 365.56 362.95 10.71 2.74e+03 <code>test_valleys[10-large]</code> 2676 358.15 468.00 360.66 358.60 7.87 2.77e+03 <code>test_peak_trend[3-large]</code> 3534 260.46 458.67 262.78 261.15 7.40 3.81e+03 <code>test_peak_trend[5-large]</code> 4236 220.67 357.08 222.92 221.65 6.23 4.49e+03 <code>test_peak_trend[10-large]</code> 4938 184.39 381.43 186.55 185.20 6.97 5.36e+03 <code>test_peak_trend[20-large]</code> 4466 200.87 347.19 203.38 201.76 7.62 4.92e+03 <code>test_valley_trend[3-large]</code> 3417 259.58 8505.53 285.03 261.34 211.46 3.51e+03 <code>test_valley_trend[5-large]</code> 3896 220.80 1791.64 234.96 224.67 37.62 4.26e+03 <code>test_valley_trend[10-large]</code> 4769 183.59 785.30 186.54 184.21 20.32 5.36e+03 <code>test_valley_trend[20-large]</code> 4331 202.06 6384.55 210.91 203.95 96.55 4.74e+03 <code>test_overall_trend[large]</code> 8425 44.26 519.65 46.59 44.94 10.74 2.15e+04 <code>test_break_down_trends[1.0-0.5-0-large]</code> 56 17273.52 18879.34 17429.11 17335.29 276.43 5.74e+01 <code>test_break_down_trends[1.0-0.5-1-large]</code> 57 17443.83 18051.75 17592.42 17498.11 182.57 5.68e+01 <code>test_break_down_trends[1.0-0.5-2-large]</code> 57 17121.68 18236.76 17264.10 17183.40 215.89 5.79e+01 <code>test_break_down_trends[1.0-0.75-0-large]</code> 68 14757.55 15754.47 15042.71 14979.53 251.33 6.65e+01 <code>test_break_down_trends[1.0-0.75-1-large]</code> 68 14769.87 15441.06 14956.81 14857.82 188.39 6.69e+01 <code>test_break_down_trends[1.0-0.75-2-large]</code> 58 17360.57 18006.67 17600.66 17510.30 212.63 5.68e+01 <code>test_break_down_trends[1.5-0.5-0-large]</code> 57 17279.33 18792.32 17543.75 17368.65 305.61 5.70e+01 <code>test_break_down_trends[1.5-0.5-1-large]</code> 57 17440.31 18088.63 17667.48 17593.41 202.04 5.66e+01 <code>test_break_down_trends[1.5-0.5-2-large]</code> 58 17220.59 17571.00 17294.14 17265.08 82.91 5.78e+01 <code>test_break_down_trends[1.5-0.75-0-large]</code> 68 14811.44 15342.11 14855.08 14836.60 82.48 6.73e+01 <code>test_break_down_trends[1.5-0.75-1-large]</code> 67 14840.87 15467.04 15060.37 14954.18 201.82 6.64e+01 <code>test_break_down_trends[1.5-0.75-2-large]</code> 57 17419.70 18119.84 17646.80 17584.76 205.02 5.67e+01"},{"location":"benchmarks/chart-trends/medium/","title":"Medium Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_peaks[1-medium]</code> 4721 167.78 1002.62 176.34 168.71 23.06 5.67e+03 <code>test_peaks[5-medium]</code> 5635 159.11 4246.99 166.19 160.39 96.82 6.02e+03 <code>test_peaks[10-medium]</code> 5871 157.65 284.93 159.20 158.08 4.52 6.28e+03 <code>test_valleys[1-medium]</code> 4977 183.09 213.48 183.68 183.37 1.51 5.44e+03 <code>test_valleys[5-medium]</code> 5277 176.37 243.08 176.90 176.65 1.62 5.65e+03 <code>test_valleys[10-medium]</code> 5307 175.06 265.35 175.67 175.32 1.95 5.69e+03 <code>test_peak_trend[3-medium]</code> 10591 81.57 110.56 82.10 82.00 0.72 1.22e+04 <code>test_peak_trend[5-medium]</code> 11125 73.17 98.20 73.68 73.57 0.76 1.36e+04 <code>test_peak_trend[10-medium]</code> 11068 67.54 96.72 68.01 67.85 0.90 1.47e+04 <code>test_peak_trend[20-medium]</code> 10026 83.61 137.78 84.26 84.09 1.31 1.19e+04 <code>test_valley_trend[3-medium]</code> 10521 80.76 111.61 81.23 81.09 0.87 1.23e+04 <code>test_valley_trend[5-medium]</code> 11229 74.58 98.87 75.07 74.96 0.71 1.33e+04 <code>test_valley_trend[10-medium]</code> 11722 68.76 117.95 69.32 69.17 0.98 1.44e+04 <code>test_valley_trend[20-medium]</code> 9434 88.32 215.58 89.16 89.20 1.55 1.12e+04 <code>test_overall_trend[medium]</code> 21549 21.70 64.02 22.00 21.94 0.68 4.54e+04 <code>test_break_down_trends[1.0-0.5-0-medium]</code> 288 3400.30 3589.99 3416.04 3411.63 21.48 2.93e+02 <code>test_break_down_trends[1.0-0.5-1-medium]</code> 283 3474.84 3644.34 3503.35 3505.76 18.47 2.85e+02 <code>test_break_down_trends[1.0-0.5-2-medium]</code> 293 3346.32 3504.65 3366.73 3361.89 18.66 2.97e+02 <code>test_break_down_trends[1.0-0.75-0-medium]</code> 413 2370.29 2557.37 2392.66 2379.13 32.67 4.18e+02 <code>test_break_down_trends[1.0-0.75-1-medium]</code> 408 2379.22 2626.85 2411.90 2394.79 36.37 4.15e+02 <code>test_break_down_trends[1.0-0.75-2-medium]</code> 290 3429.65 3602.27 3465.19 3444.36 35.51 2.89e+02 <code>test_break_down_trends[1.5-0.5-0-medium]</code> 290 3401.12 3861.42 3438.32 3415.03 48.42 2.91e+02 <code>test_break_down_trends[1.5-0.5-1-medium]</code> 286 3474.65 3871.82 3514.15 3492.16 41.48 2.85e+02 <code>test_break_down_trends[1.5-0.5-2-medium]</code> 294 3359.06 3686.97 3404.93 3382.56 42.42 2.94e+02 <code>test_break_down_trends[1.5-0.75-0-medium]</code> 413 2378.33 2769.87 2411.00 2390.76 46.24 4.15e+02 <code>test_break_down_trends[1.5-0.75-1-medium]</code> 411 2388.07 2731.19 2414.43 2399.09 33.17 4.14e+02 <code>test_break_down_trends[1.5-0.75-2-medium]</code> 282 3435.64 3579.90 3466.66 3446.87 32.69 2.88e+02"},{"location":"benchmarks/chart-trends/small/","title":"Small Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_peaks[1-small]</code> 19875 29.13 76.41 29.33 29.24 1.25 3.41e+04 <code>test_peaks[5-small]</code> 28258 28.83 140.15 29.11 29.00 1.96 3.43e+04 <code>test_peaks[10-small]</code> 28769 28.70 114.44 28.94 28.87 0.89 3.46e+04 <code>test_valleys[1-small]</code> 23716 30.39 56.09 30.56 30.52 0.45 3.27e+04 <code>test_valleys[5-small]</code> 26368 30.11 151.41 30.33 30.24 1.42 3.30e+04 <code>test_valleys[10-small]</code> 27177 29.93 240.13 30.45 30.06 3.11 3.28e+04 <code>test_peak_trend[3-small]</code> 45076 8.13 127.78 8.37 8.26 1.35 1.19e+05 <code>test_peak_trend[5-small]</code> 61226 8.20 211.22 8.41 8.35 1.27 1.19e+05 <code>test_peak_trend[10-small]</code> 53677 9.80 343.63 9.98 9.93 1.65 1.00e+05 <code>test_peak_trend[20-small]</code> 45571 14.39 35.82 14.55 14.52 0.29 6.87e+04 <code>test_valley_trend[3-small]</code> 54219 8.24 183.48 8.41 8.37 0.98 1.19e+05 <code>test_valley_trend[5-small]</code> 57140 8.50 31.37 8.66 8.63 0.26 1.15e+05 <code>test_valley_trend[10-small]</code> 48648 9.78 36.52 10.17 10.15 0.35 9.83e+04 <code>test_valley_trend[20-small]</code> 35880 15.04 36.26 15.18 15.15 0.36 6.59e+04 <code>test_overall_trend[small]</code> 102281 4.65 29.06 4.75 4.74 0.23 2.11e+05 <code>test_break_down_trends[1.0-0.5-0-small]</code> 11763 53.00 150.11 53.81 53.65 1.39 1.86e+04 <code>test_break_down_trends[1.0-0.5-1-small]</code> 11879 57.50 163.37 58.37 58.07 2.72 1.71e+04 <code>test_break_down_trends[1.0-0.5-2-small]</code> 13555 56.85 165.15 57.58 57.39 2.06 1.74e+04 <code>test_break_down_trends[1.0-0.75-0-small]</code> 12538 51.35 148.04 52.51 52.30 1.82 1.90e+04 <code>test_break_down_trends[1.0-0.75-1-small]</code> 13246 51.09 166.96 52.03 51.69 2.78 1.92e+04 <code>test_break_down_trends[1.0-0.75-2-small]</code> 10614 53.44 279.46 54.46 54.06 4.01 1.84e+04 <code>test_break_down_trends[1.5-0.5-0-small]</code> 13126 53.41 169.30 54.66 54.26 3.03 1.83e+04 <code>test_break_down_trends[1.5-0.5-1-small]</code> 10859 58.95 167.43 59.88 59.61 2.57 1.67e+04 <code>test_break_down_trends[1.5-0.5-2-small]</code> 13275 57.09 166.17 57.75 57.63 1.49 1.73e+04 <code>test_break_down_trends[1.5-0.75-0-small]</code> 12671 51.48 114.22 52.31 52.19 1.29 1.91e+04 <code>test_break_down_trends[1.5-0.75-1-small]</code> 12981 50.85 159.30 51.85 51.57 2.34 1.93e+04 <code>test_break_down_trends[1.5-0.75-2-small]</code> 13765 53.52 114.70 54.25 54.09 1.36 1.84e+04"},{"location":"benchmarks/correlation-indicators/large/","title":"Large Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_correlation_large[standard-simple]</code> 8801 82.46 127.17 83.58 83.76 0.93 1.20e+04 <code>test_single_correlation_large[standard-smoothed]</code> 5660 167.98 333.15 169.30 168.72 3.29 5.91e+03 <code>test_single_correlation_large[standard-exponential]</code> 5643 166.67 270.80 167.92 167.54 2.52 5.96e+03 <code>test_single_correlation_large[standard-median]</code> 4193 181.08 287.54 182.99 181.93 4.07 5.46e+03 <code>test_single_correlation_large[standard-mode]</code> 3012 307.28 404.93 314.87 314.28 4.98 3.18e+03 <code>test_single_correlation_large[mean-simple]</code> 10963 81.46 130.04 82.03 81.85 1.38 1.22e+04 <code>test_single_correlation_large[mean-smoothed]</code> 5735 164.20 226.61 165.21 164.89 2.15 6.05e+03 <code>test_single_correlation_large[mean-exponential]</code> 5700 164.85 217.45 166.28 166.06 1.98 6.01e+03 <code>test_single_correlation_large[mean-median]</code> 4039 179.56 257.43 181.55 180.87 4.18 5.51e+03 <code>test_single_correlation_large[mean-mode]</code> 3040 304.93 387.65 312.89 312.35 4.34 3.20e+03 <code>test_single_correlation_large[median-simple]</code> 4494 179.35 279.43 181.21 180.33 3.97 5.52e+03 <code>test_single_correlation_large[median-smoothed]</code> 3423 263.41 327.34 265.45 264.45 3.94 3.77e+03 <code>test_single_correlation_large[median-exponential]</code> 3429 261.48 337.39 263.53 262.76 3.90 3.79e+03 <code>test_single_correlation_large[median-median]</code> 3157 274.63 329.80 276.68 275.72 3.69 3.61e+03 <code>test_single_correlation_large[median-mode]</code> 2204 406.87 522.89 414.53 413.66 5.92 2.41e+03 <code>test_single_correlation_large[ulcer-simple]</code> 74 13580.91 13702.69 13590.45 13585.73 16.39 7.36e+01 <code>test_single_correlation_large[ulcer-smoothed]</code> 73 13666.03 13803.82 13676.76 13670.27 19.96 7.31e+01 <code>test_single_correlation_large[ulcer-exponential]</code> 73 13665.08 13802.71 13677.11 13670.30 22.43 7.31e+01 <code>test_single_correlation_large[ulcer-median]</code> 73 13686.73 13876.03 13701.95 13692.95 28.37 7.30e+01 <code>test_single_correlation_large[ulcer-mode]</code> 73 13810.40 13977.29 13824.72 13818.36 22.49 7.23e+01 <code>test_single_correlation_large[mode-simple]</code> 3081 302.84 368.60 312.39 312.02 3.64 3.20e+03 <code>test_single_correlation_large[mode-smoothed]</code> 2470 387.93 533.37 397.22 396.78 4.94 2.52e+03 <code>test_single_correlation_large[mode-exponential]</code> 2473 388.63 456.78 395.93 395.46 4.00 2.53e+03 <code>test_single_correlation_large[mode-median]</code> 2114 406.87 537.15 418.19 417.00 6.51 2.39e+03 <code>test_single_correlation_large[mode-mode]</code> 1802 531.54 647.06 542.77 542.03 5.92 1.84e+03 <code>test_bulk_correlation_large[standard-simple]</code> 1766 533.56 631.45 538.06 537.24 4.88 1.86e+03 <code>test_bulk_correlation_large[standard-smoothed]</code> 870 1133.21 1214.04 1142.11 1140.87 6.47 8.76e+02 <code>test_bulk_correlation_large[standard-exponential]</code> 877 1123.43 1241.29 1133.64 1132.78 7.88 8.82e+02 <code>test_bulk_correlation_large[standard-median]</code> 360 2705.33 2930.78 2728.09 2726.09 15.74 3.67e+02 <code>test_bulk_correlation_large[standard-mode]</code> 138 7216.02 7409.04 7241.90 7237.60 25.37 1.38e+02 <code>test_bulk_correlation_large[mean-simple]</code> 2190 442.34 555.39 445.89 444.91 5.45 2.24e+03 <code>test_bulk_correlation_large[mean-smoothed]</code> 939 1048.01 1198.17 1051.51 1050.06 8.27 9.51e+02 <code>test_bulk_correlation_large[mean-exponential]</code> 943 1039.49 1188.73 1044.67 1042.82 9.09 9.57e+02 <code>test_bulk_correlation_large[mean-median]</code> 374 2609.33 2833.44 2631.86 2629.84 18.12 3.80e+02 <code>test_bulk_correlation_large[mean-mode]</code> 139 7123.88 7346.40 7146.70 7141.28 27.30 1.40e+02 <code>test_bulk_correlation_large[median-simple]</code> 376 2584.68 2787.09 2605.77 2603.27 16.97 3.84e+02 <code>test_bulk_correlation_large[median-smoothed]</code> 309 3188.96 3531.17 3212.08 3208.57 23.24 3.11e+02 <code>test_bulk_correlation_large[median-exponential]</code> 310 3187.39 3417.41 3206.27 3203.66 18.41 3.12e+02 <code>test_bulk_correlation_large[median-median]</code> 224 4439.60 4698.05 4465.19 4462.18 24.36 2.24e+02 <code>test_bulk_correlation_large[median-mode]</code> 107 9309.22 9541.26 9344.42 9338.20 30.01 1.07e+02 <code>test_bulk_correlation_large[ulcer-simple]</code> 485 2035.09 2200.57 2044.38 2042.64 11.54 4.89e+02 <code>test_bulk_correlation_large[ulcer-smoothed]</code> 374 2638.70 2831.98 2651.73 2649.65 16.38 3.77e+02 <code>test_bulk_correlation_large[ulcer-exponential]</code> 373 2625.27 2784.65 2639.81 2638.20 11.90 3.79e+02 <code>test_bulk_correlation_large[ulcer-median]</code> 233 4207.88 4385.56 4225.92 4222.93 17.38 2.37e+02 <code>test_bulk_correlation_large[ulcer-mode]</code> 114 8697.09 8895.87 8728.47 8723.59 26.34 1.15e+02 <code>test_bulk_correlation_large[mode-simple]</code> 140 7110.95 7303.17 7129.58 7124.84 23.50 1.40e+02 <code>test_bulk_correlation_large[mode-smoothed]</code> 129 7708.03 7998.34 7734.52 7728.56 31.77 1.29e+02 <code>test_bulk_correlation_large[mode-exponential]</code> 129 7707.18 7977.32 7736.88 7729.69 35.74 1.29e+02 <code>test_bulk_correlation_large[mode-median]</code> 106 9383.63 9614.54 9414.33 9403.75 34.23 1.06e+02 <code>test_bulk_correlation_large[mode-mode]</code> 72 13795.45 14098.01 13832.91 13823.53 42.28 7.23e+01 <code>test_bulk_correlation_different_periods_large[5]</code> 2730 343.00 528.17 345.76 344.65 7.79 2.89e+03 <code>test_bulk_correlation_different_periods_large[10]</code> 2316 405.76 593.67 408.72 407.30 9.85 2.45e+03 <code>test_bulk_correlation_different_periods_large[20]</code> 1790 536.00 747.06 541.17 539.58 11.59 1.85e+03 <code>test_bulk_correlation_different_periods_large[50]</code> 949 1014.77 1335.79 1021.13 1018.67 15.12 9.79e+02"},{"location":"benchmarks/correlation-indicators/medium/","title":"Medium Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_correlation_medium[standard-simple]</code> 17330 42.00 84.48 42.94 42.91 0.53 2.33e+04 <code>test_single_correlation_medium[standard-smoothed]</code> 11524 79.76 237.87 80.45 80.33 1.78 1.24e+04 <code>test_single_correlation_medium[standard-exponential]</code> 11451 78.72 120.87 79.16 79.04 0.97 1.26e+04 <code>test_single_correlation_medium[standard-median]</code> 7978 84.04 158.28 85.49 85.11 2.01 1.17e+04 <code>test_single_correlation_medium[standard-mode]</code> 5828 150.58 207.72 156.48 156.26 2.51 6.39e+03 <code>test_single_correlation_medium[mean-simple]</code> 20256 41.22 96.63 41.81 41.80 0.79 2.39e+04 <code>test_single_correlation_medium[mean-smoothed]</code> 11524 78.68 114.26 79.30 79.15 0.99 1.26e+04 <code>test_single_correlation_medium[mean-exponential]</code> 11422 77.83 161.15 78.30 78.17 1.22 1.28e+04 <code>test_single_correlation_medium[mean-median]</code> 8034 82.59 132.00 83.43 83.09 1.61 1.20e+04 <code>test_single_correlation_medium[mean-mode]</code> 5853 148.61 233.74 155.55 155.37 2.21 6.43e+03 <code>test_single_correlation_medium[median-simple]</code> 8671 81.87 131.50 82.80 82.43 1.65 1.21e+04 <code>test_single_correlation_medium[median-smoothed]</code> 7083 118.24 283.30 119.12 118.83 2.60 8.39e+03 <code>test_single_correlation_medium[median-exponential]</code> 7157 118.83 176.65 119.62 119.33 1.73 8.36e+03 <code>test_single_correlation_medium[median-median]</code> 6756 120.00 160.56 120.95 120.61 1.56 8.27e+03 <code>test_single_correlation_medium[median-mode]</code> 4527 190.26 244.80 197.04 196.74 2.50 5.08e+03 <code>test_single_correlation_medium[ulcer-simple]</code> 294 3396.00 3482.82 3400.71 3398.52 10.06 2.94e+02 <code>test_single_correlation_medium[ulcer-smoothed]</code> 290 3433.63 3499.36 3437.87 3436.09 7.61 2.91e+02 <code>test_single_correlation_medium[ulcer-exponential]</code> 290 3432.54 3502.50 3436.64 3435.06 7.13 2.91e+02 <code>test_single_correlation_medium[ulcer-median]</code> 288 3439.95 3629.78 3446.26 3443.25 14.62 2.90e+02 <code>test_single_correlation_medium[ulcer-mode]</code> 284 3506.58 3584.71 3513.89 3512.27 8.48 2.85e+02 <code>test_single_correlation_medium[mode-simple]</code> 6075 148.93 201.00 155.60 155.43 2.04 6.43e+03 <code>test_single_correlation_medium[mode-smoothed]</code> 4943 184.78 362.65 191.53 191.24 3.48 5.22e+03 <code>test_single_correlation_medium[mode-exponential]</code> 4931 185.76 233.87 192.38 192.19 2.16 5.20e+03 <code>test_single_correlation_medium[mode-median]</code> 4357 188.89 265.95 197.30 196.91 2.88 5.07e+03 <code>test_single_correlation_medium[mode-mode]</code> 3472 257.83 903.34 268.56 267.96 11.59 3.72e+03 <code>test_bulk_correlation_medium[standard-simple]</code> 3435 264.84 311.35 266.90 266.52 2.24 3.75e+03 <code>test_bulk_correlation_medium[standard-smoothed]</code> 1725 562.17 901.01 567.26 566.26 9.18 1.76e+03 <code>test_bulk_correlation_medium[standard-exponential]</code> 1727 557.93 634.45 562.64 561.99 4.40 1.78e+03 <code>test_bulk_correlation_medium[standard-median]</code> 719 1330.99 1435.47 1341.51 1340.29 8.47 7.45e+02 <code>test_bulk_correlation_medium[standard-mode]</code> 284 3472.06 3643.26 3494.70 3493.01 15.90 2.86e+02 <code>test_bulk_correlation_medium[mean-simple]</code> 4208 220.67 278.96 222.67 222.19 2.77 4.49e+03 <code>test_bulk_correlation_medium[mean-smoothed]</code> 1823 521.06 601.02 523.34 522.37 4.54 1.91e+03 <code>test_bulk_correlation_medium[mean-exponential]</code> 1843 519.06 651.39 521.49 520.37 5.28 1.92e+03 <code>test_bulk_correlation_medium[mean-median]</code> 745 1287.38 1407.47 1298.19 1296.73 9.67 7.70e+02 <code>test_bulk_correlation_medium[mean-mode]</code> 287 3411.21 3607.54 3439.89 3438.78 16.97 2.91e+02 <code>test_bulk_correlation_medium[median-simple]</code> 747 1273.67 1441.73 1285.19 1283.40 11.76 7.78e+02 <code>test_bulk_correlation_medium[median-smoothed]</code> 621 1576.44 1716.10 1587.60 1585.73 12.47 6.30e+02 <code>test_bulk_correlation_medium[median-exponential]</code> 620 1570.92 1752.62 1582.74 1581.01 12.68 6.32e+02 <code>test_bulk_correlation_medium[median-median]</code> 444 2215.64 2425.68 2228.95 2226.37 16.14 4.49e+02 <code>test_bulk_correlation_medium[median-mode]</code> 218 4515.68 4848.62 4549.49 4546.43 26.25 2.20e+02 <code>test_bulk_correlation_medium[ulcer-simple]</code> 964 1013.77 1122.41 1016.94 1015.15 7.94 9.83e+02 <code>test_bulk_correlation_medium[ulcer-smoothed]</code> 746 1311.82 1443.99 1317.24 1315.71 9.36 7.59e+02 <code>test_bulk_correlation_medium[ulcer-exponential]</code> 742 1304.23 1448.66 1312.84 1310.90 11.23 7.62e+02 <code>test_bulk_correlation_medium[ulcer-median]</code> 468 2075.48 2304.27 2087.59 2085.07 15.87 4.79e+02 <code>test_bulk_correlation_medium[ulcer-mode]</code> 235 4195.91 4429.32 4225.55 4221.91 21.50 2.37e+02 <code>test_bulk_correlation_medium[mode-simple]</code> 287 3427.63 3681.87 3450.96 3449.21 18.23 2.90e+02 <code>test_bulk_correlation_medium[mode-smoothed]</code> 259 3718.30 3968.69 3747.98 3745.97 18.04 2.67e+02 <code>test_bulk_correlation_medium[mode-exponential]</code> 265 3717.78 3953.65 3747.37 3745.47 20.23 2.67e+02 <code>test_bulk_correlation_medium[mode-median]</code> 218 4515.36 4792.84 4546.07 4542.42 25.65 2.20e+02 <code>test_bulk_correlation_medium[mode-mode]</code> 149 6593.78 6792.52 6642.85 6640.10 23.93 1.51e+02"},{"location":"benchmarks/correlation-indicators/small/","title":"Small Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_correlation_small[standard-simple]</code> 32317 8.22 209.04 8.89 8.87 1.14 1.13e+05 <code>test_single_correlation_small[standard-smoothed]</code> 50046 14.17 271.43 14.35 14.32 1.43 6.97e+04 <code>test_single_correlation_small[standard-exponential]</code> 47660 14.04 275.54 14.24 14.20 1.45 7.02e+04 <code>test_single_correlation_small[standard-median]</code> 31728 15.81 55.87 16.06 16.00 0.48 6.23e+04 <code>test_single_correlation_small[standard-mode]</code> 19934 31.20 106.30 33.22 33.17 1.44 3.01e+04 <code>test_single_correlation_small[mean-simple]</code> 73470 7.87 937.45 8.60 8.57 3.44 1.16e+05 <code>test_single_correlation_small[mean-smoothed]</code> 48781 13.76 45.35 13.95 13.93 0.37 7.17e+04 <code>test_single_correlation_small[mean-exponential]</code> 48431 13.61 59.72 14.00 13.94 0.58 7.15e+04 <code>test_single_correlation_small[mean-median]</code> 29917 15.82 70.15 16.05 16.00 0.52 6.23e+04 <code>test_single_correlation_small[mean-mode]</code> 23377 30.78 65.74 32.92 32.89 0.67 3.04e+04 <code>test_single_correlation_small[median-simple]</code> 30134 15.80 68.83 16.09 16.04 0.69 6.21e+04 <code>test_single_correlation_small[median-smoothed]</code> 31896 20.93 61.80 21.18 21.13 0.54 4.72e+04 <code>test_single_correlation_small[median-exponential]</code> 31821 21.04 88.58 21.34 21.28 0.69 4.69e+04 <code>test_single_correlation_small[median-median]</code> 30629 23.04 61.63 23.34 23.28 0.59 4.28e+04 <code>test_single_correlation_small[median-mode]</code> 19021 38.24 137.93 40.49 40.37 1.46 2.47e+04 <code>test_single_correlation_small[ulcer-simple]</code> 6802 135.94 168.93 136.31 136.11 1.12 7.34e+03 <code>test_single_correlation_small[ulcer-smoothed]</code> 6399 141.35 168.78 141.65 141.48 0.93 7.06e+03 <code>test_single_correlation_small[ulcer-exponential]</code> 6727 141.31 189.22 141.66 141.46 1.26 7.06e+03 <code>test_single_correlation_small[ulcer-median]</code> 6231 143.46 293.09 144.02 143.74 2.47 6.94e+03 <code>test_single_correlation_small[ulcer-mode]</code> 5536 158.56 200.52 160.62 160.44 1.37 6.23e+03 <code>test_single_correlation_small[mode-simple]</code> 24413 30.78 71.19 32.91 32.89 0.74 3.04e+04 <code>test_single_correlation_small[mode-smoothed]</code> 21169 36.46 168.78 38.64 38.52 1.75 2.59e+04 <code>test_single_correlation_small[mode-exponential]</code> 21480 36.56 5675.33 40.75 38.57 70.32 2.45e+04 <code>test_single_correlation_small[mode-median]</code> 9416 38.74 2754.78 44.02 41.13 40.71 2.27e+04 <code>test_single_correlation_small[mode-mode]</code> 14934 53.78 180.37 58.87 57.70 5.62 1.70e+04 <code>test_bulk_correlation_small[standard-simple]</code> 14067 50.41 151.46 52.07 51.04 4.40 1.92e+04 <code>test_bulk_correlation_small[standard-smoothed]</code> 7396 106.22 242.06 107.68 107.15 3.08 9.29e+03 <code>test_bulk_correlation_small[standard-exponential]</code> 8335 105.58 214.67 108.00 106.78 4.95 9.26e+03 <code>test_bulk_correlation_small[standard-median]</code> 3404 244.32 1426.84 254.34 247.57 31.89 3.93e+03 <code>test_bulk_correlation_small[standard-mode]</code> 1360 666.04 2356.89 690.04 678.82 74.23 1.45e+03 <code>test_bulk_correlation_small[mean-simple]</code> 16217 42.28 93.78 42.96 42.69 1.40 2.33e+04 <code>test_bulk_correlation_small[mean-smoothed]</code> 8951 98.78 150.52 99.77 99.22 2.46 1.00e+04 <code>test_bulk_correlation_small[mean-exponential]</code> 8917 98.41 696.75 99.12 98.80 6.47 1.01e+04 <code>test_bulk_correlation_small[mean-median]</code> 3639 235.74 266.11 238.27 237.61 2.22 4.20e+03 <code>test_bulk_correlation_small[mean-mode]</code> 1466 655.67 4695.31 666.63 661.00 135.61 1.50e+03 <code>test_bulk_correlation_small[median-simple]</code> 3746 233.43 896.43 237.56 235.57 16.70 4.21e+03 <code>test_bulk_correlation_small[median-smoothed]</code> 3160 289.74 331.10 292.91 292.10 3.12 3.41e+03 <code>test_bulk_correlation_small[median-exponential]</code> 3016 288.91 334.93 292.98 291.72 4.31 3.41e+03 <code>test_bulk_correlation_small[median-median]</code> 2226 426.60 485.89 430.44 429.94 2.85 2.32e+03 <code>test_bulk_correlation_small[median-mode]</code> 1104 859.58 916.02 865.37 864.25 4.84 1.16e+03 <code>test_bulk_correlation_small[ulcer-simple]</code> 4930 191.45 231.85 192.33 191.98 1.76 5.20e+03 <code>test_bulk_correlation_small[ulcer-smoothed]</code> 3834 247.37 287.41 248.88 248.26 2.73 4.02e+03 <code>test_bulk_correlation_small[ulcer-exponential]</code> 3840 246.02 281.78 247.97 247.24 2.71 4.03e+03 <code>test_bulk_correlation_small[ulcer-median]</code> 2179 385.76 441.06 389.51 388.04 4.62 2.57e+03 <code>test_bulk_correlation_small[ulcer-mode]</code> 1192 804.45 1003.82 812.52 809.95 13.64 1.23e+03 <code>test_bulk_correlation_small[mode-simple]</code> 1467 655.52 714.24 661.10 660.25 4.18 1.51e+03 <code>test_bulk_correlation_small[mode-smoothed]</code> 1341 709.54 785.25 717.12 715.74 5.64 1.39e+03 <code>test_bulk_correlation_small[mode-exponential]</code> 1349 711.10 918.23 719.89 716.47 13.61 1.39e+03 <code>test_bulk_correlation_small[mode-median]</code> 1061 859.54 944.30 866.81 864.39 8.37 1.15e+03 <code>test_bulk_correlation_small[mode-mode]</code> 765 1269.60 1500.97 1284.95 1281.16 14.94 7.78e+02"},{"location":"benchmarks/momentum-indicators/large/","title":"Large Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_rsi[large-simple]</code> 10963 45.72 76.15 46.25 46.18 0.59 2.16e+04 <code>test_single_rsi[large-smoothed]</code> 10738 79.83 158.72 80.60 80.26 2.12 1.24e+04 <code>test_single_rsi[large-exponential]</code> 10251 79.93 232.37 81.17 80.52 3.57 1.23e+04 <code>test_single_rsi[large-median]</code> 6542 91.39 198.70 93.63 92.33 5.22 1.07e+04 <code>test_single_rsi[large-mode]</code> 7146 104.70 437.30 115.43 115.11 5.31 8.66e+03 <code>test_bulk_rsi[large-simple]</code> 1537 555.41 791.43 562.07 559.38 12.04 1.78e+03 <code>test_bulk_rsi[large-smoothed]</code> 1261 774.10 910.49 789.05 780.99 18.02 1.27e+03 <code>test_bulk_rsi[large-exponential]</code> 1242 789.84 9074.98 859.13 795.62 443.24 1.16e+03 <code>test_bulk_rsi[large-median]</code> 547 1776.18 2144.39 1829.41 1809.13 54.48 5.47e+02 <code>test_bulk_rsi[large-mode]</code> 280 3506.66 3787.75 3550.75 3536.83 46.49 2.82e+02 <code>test_single_stoch[large]</code> 6790 95.39 263.26 99.22 98.63 4.04 1.01e+04 <code>test_bulk_stoch[large]</code> 817 1149.92 1242.60 1160.56 1157.55 10.41 8.62e+02 <code>test_single_slow_stoch[large-simple]</code> 24725 36.56 150.91 37.65 37.07 2.46 2.66e+04 <code>test_single_slow_stoch[large-smoothed]</code> 11618 75.59 318.48 77.33 76.21 6.24 1.29e+04 <code>test_single_slow_stoch[large-exponential]</code> 10790 75.65 246.04 77.78 76.48 4.75 1.29e+04 <code>test_single_slow_stoch[large-median]</code> 9619 66.78 160.04 68.15 67.41 2.74 1.47e+04 <code>test_single_slow_stoch[large-mode]</code> 9477 86.37 309.48 99.86 98.37 7.04 1.00e+04 <code>test_bulk_slow_stoch[large-simple]</code> 5996 122.50 233.30 125.11 124.11 4.57 7.99e+03 <code>test_bulk_slow_stoch[large-smoothed]</code> 2439 392.17 721.84 408.44 396.58 26.86 2.45e+03 <code>test_bulk_slow_stoch[large-exponential]</code> 2323 400.32 1043.97 411.13 402.32 23.11 2.43e+03 <code>test_bulk_slow_stoch[large-median]</code> 713 1301.79 2388.48 1323.85 1314.10 48.71 7.55e+02 <code>test_bulk_slow_stoch[large-mode]</code> 376 2548.36 2788.67 2618.12 2616.76 23.64 3.82e+02 <code>test_single_slowest_stoch[large-simple]</code> 24524 36.59 132.91 37.05 36.93 1.14 2.70e+04 <code>test_single_slowest_stoch[large-smoothed]</code> 12559 75.59 126.17 76.08 75.89 1.34 1.31e+04 <code>test_single_slowest_stoch[large-exponential]</code> 12321 75.76 716.91 76.61 76.28 6.04 1.31e+04 <code>test_single_slowest_stoch[large-median]</code> 8108 79.56 210.48 80.68 80.22 2.71 1.24e+04 <code>test_single_slowest_stoch[large-mode]</code> 10417 85.78 164.00 96.85 96.70 2.26 1.03e+04 <code>test_bulk_slowest_stoch[large-simple]</code> 6776 108.85 188.89 110.37 109.89 2.62 9.06e+03 <code>test_bulk_slowest_stoch[large-smoothed]</code> 4128 223.45 304.34 226.50 225.39 4.88 4.41e+03 <code>test_bulk_slowest_stoch[large-exponential]</code> 4011 227.32 321.58 230.46 229.13 5.96 4.34e+03 <code>test_bulk_slowest_stoch[large-median]</code> 1320 715.12 1009.23 722.96 720.20 15.64 1.38e+03 <code>test_bulk_slowest_stoch[large-mode]</code> 648 1472.42 1726.66 1502.69 1498.99 23.80 6.65e+02 <code>test_single_williams_r[large]</code> 11712 79.33 180.02 80.45 80.15 2.05 1.24e+04 <code>test_bulk_williams_r[large]</code> 2991 299.95 379.37 302.36 301.69 3.98 3.31e+03 <code>test_single_mfi[large]</code> 10813 76.65 288.71 77.76 77.32 3.20 1.29e+04 <code>test_bulk_mfi[large]</code> 1991 466.15 606.73 469.43 468.58 5.03 2.13e+03 <code>test_single_roc[large]</code> 86259 0.11 0.97 0.11 0.11 0.00 8.81e+06 <code>test_bulk_roc[large]</code> 7652 85.00 125.61 86.26 86.13 1.41 1.16e+04 <code>test_single_obv[large]</code> 77036 0.12 0.43 0.12 0.12 0.00 8.00e+06 <code>test_bulk_obv[large]</code> 5529 131.82 222.32 133.78 133.30 2.81 7.47e+03 <code>test_single_cci[large-standard-simple]</code> 21086 41.46 192.45 41.98 41.89 1.32 2.38e+04 <code>test_single_cci[large-standard-smoothed]</code> 11190 80.87 870.42 81.60 81.30 7.66 1.23e+04 <code>test_single_cci[large-standard-exponential]</code> 11243 81.28 169.33 81.82 81.70 1.35 1.22e+04 <code>test_single_cci[large-standard-median]</code> 7123 85.28 115.00 86.49 86.15 1.51 1.16e+04 <code>test_single_cci[large-standard-mode]</code> 5401 150.39 229.34 157.68 157.35 3.01 6.34e+03 <code>test_single_cci[large-mean-simple]</code> 20548 40.46 134.78 40.96 40.87 1.04 2.44e+04 <code>test_single_cci[large-mean-smoothed]</code> 11456 80.04 125.71 80.56 80.45 0.93 1.24e+04 <code>test_single_cci[large-mean-exponential]</code> 11427 79.87 114.50 80.70 80.61 0.79 1.24e+04 <code>test_single_cci[large-mean-median]</code> 7118 84.50 143.46 85.34 84.98 1.74 1.17e+04 <code>test_single_cci[large-mean-mode]</code> 6035 150.72 219.37 156.67 156.45 2.57 6.38e+03 <code>test_single_cci[large-median-simple]</code> 8649 84.94 129.45 85.97 85.48 2.11 1.16e+04 <code>test_single_cci[large-median-smoothed]</code> 6919 123.24 165.39 124.47 124.19 1.61 8.03e+03 <code>test_single_cci[large-median-exponential]</code> 6967 123.07 256.98 124.06 123.63 2.23 8.06e+03 <code>test_single_cci[large-median-median]</code> 6468 125.61 174.76 126.50 126.20 1.53 7.91e+03 <code>test_single_cci[large-median-mode]</code> 4222 194.10 249.08 201.26 201.06 2.56 4.97e+03 <code>test_single_cci[large-ulcer-simple]</code> 147 6790.89 6884.54 6797.22 6793.13 12.70 1.47e+02 <code>test_single_cci[large-ulcer-smoothed]</code> 146 6830.48 6901.61 6835.17 6832.41 10.85 1.46e+02 <code>test_single_cci[large-ulcer-exponential]</code> 146 6830.41 6911.86 6835.62 6832.56 11.59 1.46e+02 <code>test_single_cci[large-ulcer-median]</code> 145 6836.19 6910.28 6841.87 6838.63 11.23 1.46e+02 <code>test_single_cci[large-ulcer-mode]</code> 145 6902.11 6976.02 6910.82 6908.23 10.17 1.45e+02 <code>test_single_cci[large-mode-simple]</code> 6072 149.46 186.50 156.12 155.98 2.02 6.41e+03 <code>test_single_cci[large-mode-smoothed]</code> 4954 189.17 241.93 195.64 195.48 2.40 5.11e+03 <code>test_single_cci[large-mode-exponential]</code> 4892 188.87 268.87 195.95 195.76 2.39 5.10e+03 <code>test_single_cci[large-mode-median]</code> 4306 194.52 327.65 201.70 201.35 3.71 4.96e+03 <code>test_single_cci[large-mode-mode]</code> 3406 261.84 307.24 271.28 271.13 2.80 3.69e+03 <code>test_bulk_cci[large-standard-simple]</code> 3148 273.98 335.71 277.56 277.02 3.19 3.60e+03 <code>test_bulk_cci[large-standard-smoothed]</code> 1792 541.60 595.28 547.72 548.05 4.76 1.83e+03 <code>test_bulk_cci[large-standard-exponential]</code> 1753 549.97 627.56 554.72 554.25 4.36 1.80e+03 <code>test_bulk_cci[large-standard-median]</code> 725 1319.60 1420.72 1330.71 1329.42 8.37 7.51e+02 <code>test_bulk_cci[large-standard-mode]</code> 282 3463.18 3575.36 3493.46 3492.84 19.62 2.86e+02 <code>test_bulk_cci[large-mean-simple]</code> 3758 233.24 431.36 235.86 235.24 4.78 4.24e+03 <code>test_bulk_cci[large-mean-smoothed]</code> 1811 500.78 577.26 503.52 502.34 5.26 1.99e+03 <code>test_bulk_cci[large-mean-exponential]</code> 1900 506.80 574.21 510.30 509.72 4.21 1.96e+03 <code>test_bulk_cci[large-mean-median]</code> 748 1288.40 1761.13 1301.38 1298.25 23.20 7.68e+02 <code>test_bulk_cci[large-mean-mode]</code> 282 3427.92 3610.07 3471.43 3471.71 29.46 2.88e+02 <code>test_bulk_cci[large-median-simple]</code> 765 1254.62 1363.33 1267.23 1266.16 8.01 7.89e+02 <code>test_bulk_cci[large-median-smoothed]</code> 631 1541.25 1652.90 1552.07 1549.66 11.08 6.44e+02 <code>test_bulk_cci[large-median-exponential]</code> 631 1546.90 1664.79 1556.67 1555.53 9.01 6.42e+02 <code>test_bulk_cci[large-median-median]</code> 452 2179.15 2477.21 2195.82 2193.58 16.73 4.55e+02 <code>test_bulk_cci[large-median-mode]</code> 220 4474.61 4657.65 4519.93 4518.70 32.86 2.21e+02 <code>test_bulk_cci[large-ulcer-simple]</code> 945 1031.69 1163.92 1036.80 1035.08 9.12 9.65e+02 <code>test_bulk_cci[large-ulcer-smoothed]</code> 753 1307.64 1430.90 1311.82 1309.44 10.16 7.62e+02 <code>test_bulk_cci[large-ulcer-exponential]</code> 745 1316.23 1412.83 1321.31 1319.53 8.08 7.57e+02 <code>test_bulk_cci[large-ulcer-median]</code> 460 2097.11 2247.83 2108.96 2106.80 12.01 4.74e+02 <code>test_bulk_cci[large-ulcer-mode]</code> 234 4223.24 4443.50 4276.53 4273.68 30.22 2.34e+02 <code>test_bulk_cci[large-mode-simple]</code> 291 3400.70 3601.81 3431.89 3425.51 24.75 2.91e+02 <code>test_bulk_cci[large-mode-smoothed]</code> 268 3684.66 3859.24 3714.66 3709.91 25.11 2.69e+02 <code>test_bulk_cci[large-mode-exponential]</code> 268 3689.57 3865.81 3723.56 3721.13 24.46 2.69e+02 <code>test_bulk_cci[large-mode-median]</code> 219 4484.07 4614.80 4507.02 4502.24 18.55 2.22e+02 <code>test_bulk_cci[large-mode-mode]</code> 150 6595.52 6891.28 6714.50 6719.94 39.20 1.49e+02 <code>test_single_mcginley_cci[large-standard]</code> 22005 39.96 105.69 40.61 40.59 0.83 2.46e+04 <code>test_single_mcginley_cci[large-mean]</code> 21463 39.07 88.56 39.41 39.33 0.68 2.54e+04 <code>test_single_mcginley_cci[large-median]</code> 7816 82.04 166.08 83.38 83.15 2.06 1.20e+04 <code>test_single_mcginley_cci[large-ulcer]</code> 148 6786.93 6856.22 6791.40 6788.85 10.10 1.47e+02 <code>test_single_mcginley_cci[large-mode]</code> 5835 148.35 221.32 154.95 154.69 2.60 6.45e+03 <code>test_bulk_mcginley_cci[large-standard]</code> 1557 357.50 446.84 361.87 361.74 6.79 2.76e+03 <code>test_bulk_mcginley_cci[large-mean]</code> 3122 294.47 371.17 296.88 295.89 4.85 3.37e+03 <code>test_bulk_mcginley_cci[large-median]</code> 719 1344.34 1543.50 1355.51 1353.12 14.66 7.38e+02 <code>test_bulk_mcginley_cci[large-ulcer]</code> 884 1118.38 1280.01 1122.16 1119.81 11.94 8.91e+02 <code>test_bulk_mcginley_cci[large-mode]</code> 279 3486.64 3724.12 3525.94 3517.77 33.65 2.84e+02 <code>test_single_macd_line[large-simple-simple]</code> 23550 36.61 65.43 37.03 36.98 0.58 2.70e+04 <code>test_single_macd_line[large-simple-smoothed]</code> 22278 36.80 61.43 37.10 37.06 0.55 2.70e+04 <code>test_single_macd_line[large-simple-exponential]</code> 22804 36.43 73.39 37.00 36.94 0.58 2.70e+04 <code>test_single_macd_line[large-simple-median]</code> 22014 36.76 60.26 37.27 37.22 0.58 2.68e+04 <code>test_single_macd_line[large-simple-mode]</code> 21540 37.33 140.69 37.71 37.65 0.96 2.65e+04 <code>test_single_macd_line[large-smoothed-simple]</code> 11840 75.59 103.61 76.25 76.28 0.76 1.31e+04 <code>test_single_macd_line[large-smoothed-smoothed]</code> 11871 76.17 1827.42 76.89 76.52 16.95 1.30e+04 <code>test_single_macd_line[large-smoothed-exponential]</code> 12081 76.06 186.06 76.61 76.50 1.49 1.31e+04 <code>test_single_macd_line[large-smoothed-median]</code> 11939 76.45 227.82 76.95 76.83 2.21 1.30e+04 <code>test_single_macd_line[large-smoothed-mode]</code> 11564 76.56 615.49 77.27 77.13 5.43 1.29e+04 <code>test_single_macd_line[large-exponential-simple]</code> 12152 76.37 159.50 77.02 76.93 1.29 1.30e+04 <code>test_single_macd_line[large-exponential-smoothed]</code> 12067 76.45 592.50 77.14 76.96 5.41 1.30e+04 <code>test_single_macd_line[large-exponential-exponential]</code> 12265 76.46 259.67 77.04 76.94 1.79 1.30e+04 <code>test_single_macd_line[large-exponential-median]</code> 11819 76.81 2416.13 77.56 77.22 21.64 1.29e+04 <code>test_single_macd_line[large-exponential-mode]</code> 11439 76.98 106.37 77.42 77.32 0.88 1.29e+04 <code>test_single_macd_line[large-median-simple]</code> 7990 80.63 109.98 81.48 81.19 1.25 1.23e+04 <code>test_single_macd_line[large-median-smoothed]</code> 9856 79.69 146.67 80.37 80.15 1.24 1.24e+04 <code>test_single_macd_line[large-median-exponential]</code> 9912 79.46 260.46 80.20 79.96 2.27 1.25e+04 <code>test_single_macd_line[large-median-median]</code> 10145 79.56 108.41 80.36 80.20 0.94 1.24e+04 <code>test_single_macd_line[large-median-mode]</code> 9749 79.98 173.58 80.80 80.65 1.40 1.24e+04 <code>test_single_macd_line[large-mode-simple]</code> 6124 144.67 185.20 152.30 152.13 2.08 6.57e+03 <code>test_single_macd_line[large-mode-smoothed]</code> 5880 146.24 238.35 152.67 152.22 4.47 6.55e+03 <code>test_single_macd_line[large-mode-exponential]</code> 6108 144.84 198.69 152.28 152.15 2.11 6.57e+03 <code>test_single_macd_line[large-mode-median]</code> 6092 145.56 232.72 152.61 152.49 2.27 6.55e+03 <code>test_single_macd_line[large-mode-mode]</code> 5768 144.85 208.87 152.76 152.65 2.13 6.55e+03 <code>test_bulk_macd_line[large-simple-simple]</code> 4366 169.41 274.04 171.58 171.56 2.46 5.83e+03 <code>test_bulk_macd_line[large-simple-smoothed]</code> 3031 304.72 1073.14 311.20 306.39 19.19 3.21e+03 <code>test_bulk_macd_line[large-simple-exponential]</code> 1924 309.80 426.10 317.52 311.52 13.72 3.15e+03 <code>test_bulk_macd_line[large-simple-median]</code> 993 888.14 1055.07 908.56 896.45 25.29 1.10e+03 <code>test_bulk_macd_line[large-simple-mode]</code> 469 2053.52 2171.07 2065.68 2061.26 14.50 4.84e+02 <code>test_bulk_macd_line[large-smoothed-simple]</code> 1766 541.49 639.51 550.98 545.12 12.54 1.81e+03 <code>test_bulk_macd_line[large-smoothed-smoothed]</code> 1312 694.23 863.43 713.40 703.06 23.41 1.40e+03 <code>test_bulk_macd_line[large-smoothed-exponential]</code> 1395 689.58 832.93 697.99 693.93 11.01 1.43e+03 <code>test_bulk_macd_line[large-smoothed-median]</code> 721 1266.96 1518.48 1311.26 1303.47 23.48 7.63e+02 <code>test_bulk_macd_line[large-smoothed-mode]</code> 398 2422.80 2579.23 2447.19 2440.92 20.31 4.09e+02 <code>test_bulk_macd_line[large-exponential-simple]</code> 1681 549.63 636.01 557.30 553.63 8.88 1.79e+03 <code>test_bulk_macd_line[large-exponential-smoothed]</code> 1397 691.84 832.73 698.23 694.93 9.95 1.43e+03 <code>test_bulk_macd_line[large-exponential-exponential]</code> 1339 708.25 893.03 721.75 718.08 16.12 1.39e+03 <code>test_bulk_macd_line[large-exponential-median]</code> 744 1282.68 1519.66 1299.98 1293.29 20.29 7.69e+02 <code>test_bulk_macd_line[large-exponential-mode]</code> 396 2433.96 2698.37 2457.14 2452.43 20.20 4.07e+02 <code>test_bulk_macd_line[large-median-simple]</code> 622 1467.03 1704.35 1546.60 1544.75 23.48 6.47e+02 <code>test_bulk_macd_line[large-median-smoothed]</code> 571 1605.03 1864.76 1690.61 1684.46 31.36 5.92e+02 <code>test_bulk_macd_line[large-median-exponential]</code> 559 1615.22 2193.61 1704.56 1697.18 42.85 5.87e+02 <code>test_bulk_macd_line[large-median-median]</code> 436 2327.82 2549.19 2365.34 2356.17 26.47 4.23e+02 <code>test_bulk_macd_line[large-median-mode]</code> 283 3450.44 3692.77 3499.30 3492.14 32.84 2.86e+02 <code>test_bulk_macd_line[large-mode-simple]</code> 260 3754.40 4055.31 3828.50 3831.03 27.73 2.61e+02 <code>test_bulk_macd_line[large-mode-smoothed]</code> 251 3898.85 4100.50 3949.78 3943.57 36.80 2.53e+02 <code>test_bulk_macd_line[large-mode-exponential]</code> 245 3908.33 4356.39 3956.88 3955.09 39.56 2.53e+02 <code>test_bulk_macd_line[large-mode-median]</code> 220 4485.11 4987.12 4529.19 4519.19 47.36 2.21e+02 <code>test_bulk_macd_line[large-mode-mode]</code> 170 5744.79 6164.66 5807.54 5789.61 61.04 1.72e+02 <code>test_single_signal_line[large-simple]</code> 23884 36.43 77.87 37.20 36.81 1.65 2.69e+04 <code>test_single_signal_line[large-smoothed]</code> 12446 75.04 126.74 75.70 75.43 1.60 1.32e+04 <code>test_single_signal_line[large-exponential]</code> 9932 75.31 176.04 76.43 75.74 2.74 1.31e+04 <code>test_single_signal_line[large-median]</code> 5458 80.67 235.22 84.11 81.89 7.09 1.19e+04 <code>test_single_signal_line[large-mode]</code> 6038 99.56 221.69 111.37 110.44 6.51 8.98e+03 <code>test_bulk_signal_line[large-simple]</code> 6184 122.09 184.87 123.67 123.34 3.00 8.09e+03 <code>test_bulk_signal_line[large-smoothed]</code> 2345 389.08 534.50 392.92 390.71 9.71 2.55e+03 <code>test_bulk_signal_line[large-exponential]</code> 2270 395.78 578.51 408.39 398.68 20.48 2.45e+03 <code>test_bulk_signal_line[large-median]</code> 839 1093.31 3112.95 1191.52 1182.05 113.36 8.39e+02 <code>test_bulk_signal_line[large-mode]</code> 296 3148.12 3934.15 3279.79 3267.17 79.23 3.05e+02 <code>test_single_mcginley_macd_line[large]</code> 16998 34.43 113.56 35.62 35.02 2.86 2.81e+04 <code>test_bulk_mcginley_macd_line[large]</code> 786 299.78 929.34 328.26 313.38 49.88 3.05e+03 <code>test_single_chaikin_osc[large-simple-simple]</code> 4551 148.15 385.49 157.96 151.63 16.15 6.33e+03 <code>test_single_chaikin_osc[large-simple-smoothed]</code> 4871 148.06 281.69 158.10 151.95 12.74 6.33e+03 <code>test_single_chaikin_osc[large-simple-exponential]</code> 4979 147.82 360.22 158.25 152.21 15.96 6.32e+03 <code>test_single_chaikin_osc[large-simple-median]</code> 5551 148.54 340.34 157.05 151.89 14.39 6.37e+03 <code>test_single_chaikin_osc[large-simple-mode]</code> 5515 147.76 370.91 157.59 151.26 15.94 6.35e+03 <code>test_single_chaikin_osc[large-smoothed-simple]</code> 4967 187.39 711.62 197.38 191.67 17.41 5.07e+03 <code>test_single_chaikin_osc[large-smoothed-smoothed]</code> 4590 187.15 483.19 197.58 191.43 18.08 5.06e+03 <code>test_single_chaikin_osc[large-smoothed-exponential]</code> 4886 187.63 5385.38 201.34 191.48 85.46 4.97e+03 <code>test_single_chaikin_osc[large-smoothed-median]</code> 4627 187.58 390.08 197.35 192.00 15.17 5.07e+03 <code>test_single_chaikin_osc[large-smoothed-mode]</code> 4426 188.08 444.50 198.26 192.21 15.28 5.04e+03 <code>test_single_chaikin_osc[large-exponential-simple]</code> 4183 187.26 391.65 195.85 190.52 14.90 5.11e+03 <code>test_single_chaikin_osc[large-exponential-smoothed]</code> 4401 187.65 920.38 198.11 191.95 20.62 5.05e+03 <code>test_single_chaikin_osc[large-exponential-exponential]</code> 4531 187.13 1360.55 199.42 190.17 31.44 5.01e+03 <code>test_single_chaikin_osc[large-exponential-median]</code> 4118 187.28 429.41 198.35 190.45 16.38 5.04e+03 <code>test_single_chaikin_osc[large-exponential-mode]</code> 3425 187.93 487.08 200.47 191.83 19.93 4.99e+03 <code>test_single_chaikin_osc[large-median-simple]</code> 2430 190.76 528.82 206.61 195.59 24.30 4.84e+03 <code>test_single_chaikin_osc[large-median-smoothed]</code> 4217 189.32 443.95 204.37 194.02 21.66 4.89e+03 <code>test_single_chaikin_osc[large-median-exponential]</code> 4042 188.67 490.28 204.04 193.78 20.73 4.90e+03 <code>test_single_chaikin_osc[large-median-median]</code> 3966 188.48 532.13 204.42 194.21 22.82 4.89e+03 <code>test_single_chaikin_osc[large-median-mode]</code> 4652 189.28 444.23 204.59 194.11 21.87 4.89e+03 <code>test_single_chaikin_osc[large-mode-simple]</code> 2768 295.80 789.43 316.39 307.80 28.91 3.16e+03 <code>test_single_chaikin_osc[large-mode-smoothed]</code> 3112 294.82 778.62 320.03 307.19 30.45 3.12e+03 <code>test_single_chaikin_osc[large-mode-exponential]</code> 2628 296.56 866.97 320.32 306.53 33.98 3.12e+03 <code>test_single_chaikin_osc[large-mode-median]</code> 2878 294.58 903.56 315.98 306.34 30.36 3.16e+03 <code>test_single_chaikin_osc[large-mode-mode]</code> 3049 295.19 646.99 315.02 307.41 26.99 3.17e+03 <code>test_bulk_chaikin_osc[large-simple-simple]</code> 259 515.38 1393.49 597.14 563.97 127.72 1.67e+03 <code>test_bulk_chaikin_osc[large-simple-smoothed]</code> 1729 543.58 1387.96 590.97 576.23 65.03 1.69e+03 <code>test_bulk_chaikin_osc[large-simple-exponential]</code> 1407 539.62 1392.83 596.18 579.01 72.74 1.68e+03 <code>test_bulk_chaikin_osc[large-simple-median]</code> 1155 632.87 1808.53 737.94 728.28 86.51 1.36e+03 <code>test_bulk_chaikin_osc[large-simple-mode]</code> 891 932.88 2324.35 1021.50 989.69 115.38 9.79e+02 <code>test_bulk_chaikin_osc[large-smoothed-simple]</code> 913 640.54 1238.73 693.64 680.76 57.18 1.44e+03 <code>test_bulk_chaikin_osc[large-smoothed-smoothed]</code> 1334 669.62 5147.25 701.21 686.14 129.39 1.43e+03 <code>test_bulk_chaikin_osc[large-smoothed-exponential]</code> 1311 665.10 1425.96 733.98 705.97 77.86 1.36e+03 <code>test_bulk_chaikin_osc[large-smoothed-median]</code> 981 757.02 2376.35 887.47 861.28 139.79 1.13e+03 <code>test_bulk_chaikin_osc[large-smoothed-mode]</code> 883 1042.27 1966.63 1121.88 1095.68 85.95 8.91e+02 <code>test_bulk_chaikin_osc[large-exponential-simple]</code> 87 652.54 1538.48 778.16 701.97 199.82 1.29e+03 <code>test_bulk_chaikin_osc[large-exponential-smoothed]</code> 1277 676.34 2085.89 760.26 731.43 115.49 1.32e+03 <code>test_bulk_chaikin_osc[large-exponential-exponential]</code> 1197 674.84 1842.63 745.07 716.97 90.18 1.34e+03 <code>test_bulk_chaikin_osc[large-exponential-median]</code> 941 768.36 2184.20 854.08 823.08 116.01 1.17e+03 <code>test_bulk_chaikin_osc[large-exponential-mode]</code> 663 1046.60 2129.94 1129.92 1101.12 98.57 8.85e+02 <code>test_bulk_chaikin_osc[large-median-simple]</code> 486 1199.60 2821.21 1379.86 1325.21 176.82 7.25e+02 <code>test_bulk_chaikin_osc[large-median-smoothed]</code> 600 1256.20 3062.19 1461.28 1425.95 168.08 6.84e+02 <code>test_bulk_chaikin_osc[large-median-exponential]</code> 624 1264.77 2859.15 1472.26 1456.73 160.30 6.79e+02 <code>test_bulk_chaikin_osc[large-median-median]</code> 654 1348.64 2976.10 1436.76 1397.16 149.97 6.96e+02 <code>test_bulk_chaikin_osc[large-median-mode]</code> 563 1610.72 2972.06 1666.31 1651.72 90.25 6.00e+02 <code>test_bulk_chaikin_osc[large-mode-simple]</code> 326 2455.71 3881.33 2636.11 2575.77 198.56 3.79e+02 <code>test_bulk_chaikin_osc[large-mode-smoothed]</code> 379 2465.82 3414.21 2647.32 2614.23 121.20 3.78e+02 <code>test_bulk_chaikin_osc[large-mode-exponential]</code> 372 2502.41 3810.35 2765.58 2748.34 156.95 3.62e+02 <code>test_bulk_chaikin_osc[large-mode-median]</code> 333 2547.98 4216.81 2787.08 2715.30 212.88 3.59e+02 <code>test_bulk_chaikin_osc[large-mode-mode]</code> 332 2893.47 3775.57 2974.67 2959.25 78.65 3.36e+02 <code>test_single_ppo[large-simple]</code> 21110 36.78 174.58 37.42 37.11 2.12 2.67e+04 <code>test_single_ppo[large-smoothed]</code> 11390 76.08 217.10 77.12 76.61 2.99 1.30e+04 <code>test_single_ppo[large-exponential]</code> 10870 76.41 1569.83 78.76 76.96 27.28 1.27e+04 <code>test_single_ppo[large-median]</code> 5862 80.22 372.86 86.70 84.39 9.57 1.15e+04 <code>test_single_ppo[large-mode]</code> 4999 146.91 268.06 157.99 155.41 8.64 6.33e+03 <code>test_bulk_ppo[large-simple]</code> 4574 180.76 292.17 189.88 186.05 9.28 5.27e+03 <code>test_bulk_ppo[large-smoothed]</code> 1287 701.25 1023.66 731.61 724.73 26.60 1.37e+03 <code>test_bulk_ppo[large-exponential]</code> 1131 717.15 1104.27 741.75 731.54 30.20 1.35e+03 <code>test_bulk_ppo[large-median]</code> 417 2302.00 2652.97 2375.88 2358.48 64.91 4.21e+02 <code>test_bulk_ppo[large-mode]</code> 169 5745.96 6195.52 5857.82 5836.55 69.54 1.71e+02 <code>test_single_cmo[large]</code> 12582 44.95 88.39 45.89 45.57 1.73 2.18e+04 <code>test_bulk_cmo[large]</code> 1627 520.47 627.45 533.30 530.17 10.08 1.88e+03"},{"location":"benchmarks/momentum-indicators/medium/","title":"Medium Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_rsi[medium-simple]</code> 14599 25.30 781.45 26.42 25.95 8.93 3.79e+04 <code>test_single_rsi[medium-smoothed]</code> 18311 41.02 99.71 41.68 41.41 1.51 2.40e+04 <code>test_single_rsi[medium-exponential]</code> 18206 41.26 101.72 41.89 41.61 1.58 2.39e+04 <code>test_single_rsi[medium-median]</code> 12882 45.63 541.21 48.24 46.91 6.43 2.07e+04 <code>test_single_rsi[medium-mode]</code> 10702 55.58 152.41 62.02 61.24 3.66 1.61e+04 <code>test_bulk_rsi[medium-simple]</code> 3107 283.54 852.62 288.86 286.45 13.23 3.46e+03 <code>test_bulk_rsi[medium-smoothed]</code> 2187 430.23 522.41 437.45 433.99 8.45 2.29e+03 <code>test_bulk_rsi[medium-exponential]</code> 2142 437.47 522.78 444.78 441.28 8.64 2.25e+03 <code>test_bulk_rsi[medium-median]</code> 1012 917.67 1065.68 932.32 927.90 14.87 1.07e+03 <code>test_bulk_rsi[medium-mode]</code> 549 1736.74 1928.35 1773.89 1770.09 21.58 5.64e+02 <code>test_single_stoch[medium]</code> 9539 42.48 155.65 44.05 43.22 3.39 2.27e+04 <code>test_bulk_stoch[medium]</code> 1545 580.00 764.82 591.85 586.89 13.97 1.69e+03 <code>test_single_slow_stoch[medium-simple]</code> 37345 22.41 89.52 24.00 23.43 2.45 4.17e+04 <code>test_single_slow_stoch[medium-smoothed]</code> 17319 39.96 115.26 41.37 40.74 2.72 2.42e+04 <code>test_single_slow_stoch[medium-exponential]</code> 16897 40.09 933.77 41.41 40.89 7.23 2.41e+04 <code>test_single_slow_stoch[medium-median]</code> 12293 38.08 122.37 39.58 38.87 2.89 2.53e+04 <code>test_single_slow_stoch[medium-mode]</code> 15859 49.61 106.95 56.05 55.54 2.72 1.78e+04 <code>test_bulk_slow_stoch[medium-simple]</code> 10015 68.54 8276.59 80.94 72.72 140.71 1.24e+04 <code>test_bulk_slow_stoch[medium-smoothed]</code> 3711 234.23 768.34 247.38 240.00 21.72 4.04e+03 <code>test_bulk_slow_stoch[medium-exponential]</code> 3829 240.15 392.63 246.16 243.54 7.61 4.06e+03 <code>test_bulk_slow_stoch[medium-median]</code> 1404 641.80 908.62 658.90 653.69 17.98 1.52e+03 <code>test_bulk_slow_stoch[medium-mode]</code> 709 1364.40 1559.49 1379.03 1373.86 16.75 7.25e+02 <code>test_single_slowest_stoch[medium-simple]</code> 36861 22.50 50.93 23.04 22.89 1.07 4.34e+04 <code>test_single_slowest_stoch[medium-smoothed]</code> 13699 39.24 69.13 39.85 39.69 0.92 2.51e+04 <code>test_single_slowest_stoch[medium-exponential]</code> 22969 39.61 85.17 40.22 39.91 1.43 2.49e+04 <code>test_single_slowest_stoch[medium-median]</code> 11050 42.37 73.67 43.10 42.87 1.17 2.32e+04 <code>test_single_slowest_stoch[medium-mode]</code> 17504 48.54 102.06 54.37 54.13 1.84 1.84e+04 <code>test_bulk_slowest_stoch[medium-simple]</code> 11809 60.67 210.37 62.39 62.13 2.07 1.60e+04 <code>test_bulk_slowest_stoch[medium-smoothed]</code> 6274 136.89 207.85 139.31 138.33 3.62 7.18e+03 <code>test_bulk_slowest_stoch[medium-exponential]</code> 5982 141.37 223.26 145.74 143.08 7.35 6.86e+03 <code>test_bulk_slowest_stoch[medium-median]</code> 2700 334.74 455.82 343.55 338.99 12.29 2.91e+03 <code>test_bulk_slowest_stoch[medium-mode]</code> 1162 752.36 1107.94 797.91 788.45 39.01 1.25e+03 <code>test_single_williams_r[medium]</code> 14670 48.06 139.20 49.00 48.70 2.18 2.04e+04 <code>test_bulk_williams_r[medium]</code> 4944 165.69 283.11 168.76 167.41 5.07 5.93e+03 <code>test_single_mfi[medium]</code> 17330 46.58 135.35 47.45 47.39 1.73 2.11e+04 <code>test_bulk_mfi[medium]</code> 3497 238.17 310.21 241.90 240.33 5.57 4.13e+03 <code>test_single_roc[medium]</code> 132997 0.22 26.91 0.24 0.24 0.10 4.08e+06 <code>test_bulk_roc[medium]</code> 12641 50.35 85.04 51.70 51.45 1.49 1.93e+04 <code>test_single_obv[medium]</code> 197083 0.13 4.80 0.13 0.13 0.01 7.50e+06 <code>test_bulk_obv[medium]</code> 9364 77.39 170.56 82.58 80.37 5.83 1.21e+04 <code>test_single_cci[medium-standard-simple]</code> 27721 25.46 246.58 26.08 26.09 1.59 3.83e+04 <code>test_single_cci[medium-standard-smoothed]</code> 19680 42.82 93.61 43.48 43.31 1.32 2.30e+04 <code>test_single_cci[medium-standard-exponential]</code> 19362 42.96 95.58 43.58 43.52 0.96 2.29e+04 <code>test_single_cci[medium-standard-median]</code> 13661 45.18 109.63 46.45 46.02 2.14 2.15e+04 <code>test_single_cci[medium-standard-mode]</code> 10465 78.48 264.13 82.97 82.63 2.89 1.21e+04 <code>test_single_cci[medium-mean-simple]</code> 21243 24.68 104.52 25.43 25.04 1.96 3.93e+04 <code>test_single_cci[medium-mean-smoothed]</code> 14045 42.22 86.26 42.77 42.67 0.84 2.34e+04 <code>test_single_cci[medium-mean-exponential]</code> 19411 42.35 103.65 42.94 42.72 1.27 2.33e+04 <code>test_single_cci[medium-mean-median]</code> 10300 44.61 113.89 46.57 45.82 3.25 2.15e+04 <code>test_single_cci[medium-mean-mode]</code> 8925 77.35 132.39 82.09 81.91 1.66 1.22e+04 <code>test_single_cci[medium-median-simple]</code> 14702 44.57 100.93 45.49 45.20 1.60 2.20e+04 <code>test_single_cci[medium-median-smoothed]</code> 9062 61.89 112.93 62.85 62.50 1.89 1.59e+04 <code>test_single_cci[medium-median-exponential]</code> 12588 62.11 112.43 63.20 62.74 1.96 1.58e+04 <code>test_single_cci[medium-median-median]</code> 12035 63.89 119.32 65.39 64.65 2.80 1.53e+04 <code>test_single_cci[medium-median-mode]</code> 6678 97.33 175.69 103.47 102.22 4.94 9.66e+03 <code>test_single_cci[medium-ulcer-simple]</code> 581 1702.75 1778.37 1707.06 1705.35 7.19 5.86e+02 <code>test_single_cci[medium-ulcer-smoothed]</code> 568 1720.46 3429.32 1747.73 1728.76 123.65 5.72e+02 <code>test_single_cci[medium-ulcer-exponential]</code> 526 1720.44 7657.06 1762.95 1725.98 363.42 5.67e+02 <code>test_single_cci[medium-ulcer-median]</code> 567 1723.27 1818.74 1730.45 1726.88 10.77 5.78e+02 <code>test_single_cci[medium-ulcer-mode]</code> 553 1756.79 1941.46 1769.70 1763.00 19.43 5.65e+02 <code>test_single_cci[medium-mode-simple]</code> 10533 77.74 129.67 82.22 82.02 1.86 1.22e+04 <code>test_single_cci[medium-mode-smoothed]</code> 8864 94.96 221.69 99.75 99.48 2.44 1.00e+04 <code>test_single_cci[medium-mode-exponential]</code> 8041 95.00 157.21 100.20 99.69 2.98 9.98e+03 <code>test_single_cci[medium-mode-median]</code> 7781 97.32 209.52 102.47 101.87 3.30 9.76e+03 <code>test_single_cci[medium-mode-mode]</code> 6682 130.82 164.56 138.37 138.28 1.83 7.23e+03 <code>test_bulk_cci[medium-standard-simple]</code> 5704 143.78 186.17 146.10 145.74 1.89 6.84e+03 <code>test_bulk_cci[medium-standard-smoothed]</code> 2791 307.11 375.78 313.01 312.39 5.20 3.19e+03 <code>test_bulk_cci[medium-standard-exponential]</code> 3010 315.95 378.65 319.68 318.91 3.73 3.13e+03 <code>test_bulk_cci[medium-standard-median]</code> 1359 659.91 919.16 671.63 667.62 17.01 1.49e+03 <code>test_bulk_cci[medium-standard-mode]</code> 548 1776.39 1889.48 1786.02 1784.52 8.68 5.60e+02 <code>test_bulk_cci[medium-mean-simple]</code> 6825 124.96 183.21 126.24 126.00 1.82 7.92e+03 <code>test_bulk_cci[medium-mean-smoothed]</code> 3207 289.50 448.48 291.61 290.78 4.31 3.43e+03 <code>test_bulk_cci[medium-mean-exponential]</code> 2813 294.82 1250.29 299.55 296.65 22.08 3.34e+03 <code>test_bulk_cci[medium-mean-median]</code> 1420 644.12 819.60 657.08 651.76 14.11 1.52e+03 <code>test_bulk_cci[medium-mean-mode]</code> 549 1759.81 1924.35 1793.90 1776.53 34.66 5.57e+02 <code>test_bulk_cci[medium-median-simple]</code> 1339 634.43 775.54 646.60 642.30 13.80 1.55e+03 <code>test_bulk_cci[medium-median-smoothed]</code> 1185 800.47 973.05 833.07 824.78 26.92 1.20e+03 <code>test_bulk_cci[medium-median-exponential]</code> 970 809.23 1061.07 854.87 851.67 29.86 1.17e+03 <code>test_bulk_cci[medium-median-median]</code> 821 1111.05 1434.27 1157.12 1151.77 34.48 8.64e+02 <code>test_bulk_cci[medium-median-mode]</code> 405 2297.48 2841.91 2362.88 2350.47 57.03 4.23e+02 <code>test_bulk_cci[medium-ulcer-simple]</code> 1442 522.45 869.06 549.67 543.02 29.56 1.82e+03 <code>test_bulk_cci[medium-ulcer-smoothed]</code> 1166 693.10 2905.10 730.39 721.23 81.11 1.37e+03 <code>test_bulk_cci[medium-ulcer-exponential]</code> 1259 697.12 1036.42 725.33 719.78 28.11 1.38e+03 <code>test_bulk_cci[medium-ulcer-median]</code> 848 1047.95 1567.55 1090.80 1082.62 40.97 9.17e+02 <code>test_bulk_cci[medium-ulcer-mode]</code> 411 2162.44 2525.41 2229.87 2217.94 51.69 4.48e+02 <code>test_bulk_cci[medium-mode-simple]</code> 488 1752.05 2242.69 1813.41 1807.25 46.48 5.51e+02 <code>test_bulk_cci[medium-mode-smoothed]</code> 508 1903.92 2295.56 1970.16 1962.12 47.95 5.08e+02 <code>test_bulk_cci[medium-mode-exponential]</code> 471 1908.24 2438.74 1964.13 1953.05 48.91 5.09e+02 <code>test_bulk_cci[medium-mode-median]</code> 405 2292.22 2998.99 2356.07 2342.67 61.28 4.24e+02 <code>test_bulk_cci[medium-mode-mode]</code> 279 3396.88 3897.85 3484.24 3469.57 56.97 2.87e+02 <code>test_single_mcginley_cci[medium-standard]</code> 23726 24.48 143.54 25.52 25.22 2.23 3.92e+04 <code>test_single_mcginley_cci[medium-mean]</code> 30252 23.91 99.67 24.79 24.44 2.05 4.03e+04 <code>test_single_mcginley_cci[medium-median]</code> 5950 43.69 652.52 48.11 45.85 18.14 2.08e+04 <code>test_single_mcginley_cci[medium-ulcer]</code> 579 1701.18 1927.61 1717.86 1711.83 19.31 5.82e+02 <code>test_single_mcginley_cci[medium-mode]</code> 9590 76.52 207.56 81.90 81.30 3.61 1.22e+04 <code>test_bulk_mcginley_cci[medium-standard]</code> 2620 190.72 296.06 195.71 193.96 6.74 5.11e+03 <code>test_bulk_mcginley_cci[medium-mean]</code> 4927 160.58 288.45 164.39 162.00 7.93 6.08e+03 <code>test_bulk_mcginley_cci[medium-median]</code> 1329 676.19 1015.40 690.37 683.08 24.65 1.45e+03 <code>test_bulk_mcginley_cci[medium-ulcer]</code> 1618 569.93 856.95 595.05 588.34 26.35 1.68e+03 <code>test_bulk_mcginley_cci[medium-mode]</code> 500 1799.05 2219.80 1845.37 1829.62 52.47 5.42e+02 <code>test_single_macd_line[medium-simple-simple]</code> 30788 22.52 154.22 23.56 23.33 1.93 4.24e+04 <code>test_single_macd_line[medium-simple-smoothed]</code> 21489 22.63 131.98 23.68 23.43 2.16 4.22e+04 <code>test_single_macd_line[medium-simple-exponential]</code> 23458 22.72 97.54 23.92 23.52 2.33 4.18e+04 <code>test_single_macd_line[medium-simple-median]</code> 20955 22.85 116.43 23.90 23.41 2.33 4.18e+04 <code>test_single_macd_line[medium-simple-mode]</code> 20874 23.46 84.61 24.18 23.91 1.70 4.14e+04 <code>test_single_macd_line[medium-smoothed-simple]</code> 19722 40.06 105.41 40.75 40.52 1.53 2.45e+04 <code>test_single_macd_line[medium-smoothed-smoothed]</code> 18849 40.22 124.59 41.26 40.91 2.32 2.42e+04 <code>test_single_macd_line[medium-smoothed-exponential]</code> 15411 40.04 108.65 41.08 40.59 2.49 2.43e+04 <code>test_single_macd_line[medium-smoothed-median]</code> 19041 40.33 96.82 41.38 40.89 2.40 2.42e+04 <code>test_single_macd_line[medium-smoothed-mode]</code> 16580 40.89 126.72 41.97 41.56 2.58 2.38e+04 <code>test_single_macd_line[medium-exponential-simple]</code> 19530 40.17 107.00 41.04 40.70 2.06 2.44e+04 <code>test_single_macd_line[medium-exponential-smoothed]</code> 17964 40.20 112.41 41.02 40.72 1.91 2.44e+04 <code>test_single_macd_line[medium-exponential-exponential]</code> 19170 40.35 105.50 41.24 41.04 1.83 2.42e+04 <code>test_single_macd_line[medium-exponential-median]</code> 18551 40.50 178.54 41.46 41.22 2.03 2.41e+04 <code>test_single_macd_line[medium-exponential-mode]</code> 18158 41.07 89.83 41.75 41.50 1.50 2.40e+04 <code>test_single_macd_line[medium-median-simple]</code> 12377 42.20 122.93 43.18 42.80 2.09 2.32e+04 <code>test_single_macd_line[medium-median-smoothed]</code> 13400 42.50 97.74 43.49 43.06 2.17 2.30e+04 <code>test_single_macd_line[medium-median-exponential]</code> 14848 42.65 102.74 43.93 43.50 2.62 2.28e+04 <code>test_single_macd_line[medium-median-median]</code> 15294 42.78 120.33 44.39 43.50 3.48 2.25e+04 <code>test_single_macd_line[medium-median-mode]</code> 15118 43.13 116.37 44.23 43.69 2.63 2.26e+04 <code>test_single_macd_line[medium-mode-simple]</code> 10274 75.32 163.56 80.81 80.13 3.79 1.24e+04 <code>test_single_macd_line[medium-mode-smoothed]</code> 8592 75.26 182.76 81.56 80.33 5.11 1.23e+04 <code>test_single_macd_line[medium-mode-exponential]</code> 10553 75.83 147.83 80.36 80.02 2.33 1.24e+04 <code>test_single_macd_line[medium-mode-median]</code> 10463 75.58 157.74 80.97 80.39 3.17 1.23e+04 <code>test_single_macd_line[medium-mode-mode]</code> 10757 75.78 179.00 82.68 81.83 4.02 1.21e+04 <code>test_bulk_macd_line[medium-simple-simple]</code> 7808 91.59 229.93 94.50 93.54 3.92 1.06e+04 <code>test_bulk_macd_line[medium-simple-smoothed]</code> 5018 182.07 238.06 183.52 183.11 2.27 5.45e+03 <code>test_bulk_macd_line[medium-simple-exponential]</code> 4910 185.87 235.96 188.10 188.13 2.22 5.32e+03 <code>test_bulk_macd_line[medium-simple-median]</code> 2102 436.67 535.89 439.92 439.00 4.55 2.27e+03 <code>test_bulk_macd_line[medium-simple-mode]</code> 921 1025.16 1262.82 1049.34 1043.25 21.92 9.53e+02 <code>test_bulk_macd_line[medium-smoothed-simple]</code> 2274 317.06 606.56 323.38 318.13 19.52 3.09e+03 <code>test_bulk_macd_line[medium-smoothed-smoothed]</code> 2160 414.60 492.71 417.31 416.39 5.02 2.40e+03 <code>test_bulk_macd_line[medium-smoothed-exponential]</code> 2301 412.39 725.95 419.56 414.04 13.81 2.38e+03 <code>test_bulk_macd_line[medium-smoothed-median]</code> 1396 667.10 783.51 671.32 670.02 6.55 1.49e+03 <code>test_bulk_macd_line[medium-smoothed-mode]</code> 771 1251.03 1412.29 1260.31 1256.73 12.33 7.93e+02 <code>test_bulk_macd_line[medium-exponential-simple]</code> 2868 323.13 401.56 328.06 326.56 5.62 3.05e+03 <code>test_bulk_macd_line[medium-exponential-smoothed]</code> 2264 414.67 486.95 416.70 415.86 4.35 2.40e+03 <code>test_bulk_macd_line[medium-exponential-exponential]</code> 2183 423.89 509.99 429.63 430.28 5.11 2.33e+03 <code>test_bulk_macd_line[medium-exponential-median]</code> 1326 684.19 789.36 696.67 695.70 7.05 1.44e+03 <code>test_bulk_macd_line[medium-exponential-mode]</code> 758 1260.38 1371.09 1267.18 1264.42 10.52 7.89e+02 <code>test_bulk_macd_line[medium-median-simple]</code> 1263 734.93 831.69 740.24 738.97 6.53 1.35e+03 <code>test_bulk_macd_line[medium-median-smoothed]</code> 1154 825.04 914.84 829.10 827.80 6.90 1.21e+03 <code>test_bulk_macd_line[medium-median-exponential]</code> 1142 827.80 927.73 832.87 831.17 7.45 1.20e+03 <code>test_bulk_macd_line[medium-median-median]</code> 815 1178.10 1352.53 1207.44 1200.44 18.26 8.28e+02 <code>test_bulk_macd_line[medium-median-mode]</code> 560 1673.96 1862.50 1728.23 1722.84 24.69 5.79e+02 <code>test_bulk_macd_line[medium-mode-simple]</code> 502 1937.59 2298.98 1962.35 1951.51 29.05 5.10e+02 <code>test_bulk_macd_line[medium-mode-smoothed]</code> 481 2034.53 2331.91 2065.86 2055.50 29.32 4.84e+02 <code>test_bulk_macd_line[medium-mode-exponential]</code> 454 2034.66 2507.41 2056.96 2047.04 32.79 4.86e+02 <code>test_bulk_macd_line[medium-mode-median]</code> 401 2305.69 2498.80 2348.67 2339.41 28.54 4.26e+02 <code>test_bulk_macd_line[medium-mode-mode]</code> 327 2889.41 3168.71 2906.98 2898.95 28.52 3.44e+02 <code>test_single_signal_line[medium-simple]</code> 36072 22.76 70.94 23.50 23.24 1.23 4.25e+04 <code>test_single_signal_line[medium-smoothed]</code> 15976 39.45 89.61 40.43 39.98 1.89 2.47e+04 <code>test_single_signal_line[medium-exponential]</code> 11566 39.65 109.59 40.99 40.26 3.07 2.44e+04 <code>test_single_signal_line[medium-median]</code> 15887 42.35 141.59 44.02 43.15 3.42 2.27e+04 <code>test_single_signal_line[medium-mode]</code> 12273 58.26 476.86 64.49 64.02 4.62 1.55e+04 <code>test_bulk_signal_line[medium-simple]</code> 11314 67.28 174.95 69.64 68.87 3.52 1.44e+04 <code>test_bulk_signal_line[medium-smoothed]</code> 2485 229.21 352.60 232.90 231.50 7.02 4.29e+03 <code>test_bulk_signal_line[medium-exponential]</code> 4000 235.54 328.50 238.41 237.10 5.76 4.19e+03 <code>test_bulk_signal_line[medium-median]</code> 1749 508.97 677.43 520.58 515.30 14.85 1.92e+03 <code>test_bulk_signal_line[medium-mode]</code> 638 1525.40 1899.65 1546.25 1535.82 31.08 6.47e+02 <code>test_single_mcginley_macd_line[medium]</code> 35619 21.61 55.24 22.26 22.39 0.51 4.49e+04 <code>test_bulk_mcginley_macd_line[medium]</code> 1509 160.80 215.69 163.15 162.32 3.91 6.13e+03 <code>test_single_chaikin_osc[medium-simple-simple]</code> 9697 91.24 141.78 92.65 92.95 1.59 1.08e+04 <code>test_single_chaikin_osc[medium-simple-smoothed]</code> 9643 91.17 887.42 92.68 91.78 8.33 1.08e+04 <code>test_single_chaikin_osc[medium-simple-exponential]</code> 9587 91.28 145.02 93.16 93.11 1.90 1.07e+04 <code>test_single_chaikin_osc[medium-simple-median]</code> 10054 91.17 140.24 92.99 93.06 2.06 1.08e+04 <code>test_single_chaikin_osc[medium-simple-mode]</code> 9865 91.46 130.15 92.62 91.82 1.69 1.08e+04 <code>test_single_chaikin_osc[medium-smoothed-simple]</code> 8438 108.57 154.45 109.62 109.08 1.66 9.12e+03 <code>test_single_chaikin_osc[medium-smoothed-smoothed]</code> 8420 108.76 145.00 109.96 109.17 1.64 9.09e+03 <code>test_single_chaikin_osc[medium-smoothed-exponential]</code> 8470 108.74 194.26 109.95 109.19 2.11 9.10e+03 <code>test_single_chaikin_osc[medium-smoothed-median]</code> 8384 108.74 152.72 110.20 109.48 2.24 9.07e+03 <code>test_single_chaikin_osc[medium-smoothed-mode]</code> 8200 108.91 178.87 110.61 109.82 2.98 9.04e+03 <code>test_single_chaikin_osc[medium-exponential-simple]</code> 8295 108.72 191.22 110.17 110.34 2.09 9.08e+03 <code>test_single_chaikin_osc[medium-exponential-smoothed]</code> 8448 108.71 161.22 111.64 111.63 2.79 8.96e+03 <code>test_single_chaikin_osc[medium-exponential-exponential]</code> 8384 108.76 178.82 111.45 110.98 2.89 8.97e+03 <code>test_single_chaikin_osc[medium-exponential-median]</code> 8470 108.69 152.65 111.98 111.59 2.64 8.93e+03 <code>test_single_chaikin_osc[medium-exponential-mode]</code> 7954 108.89 204.95 111.99 111.63 4.06 8.93e+03 <code>test_single_chaikin_osc[medium-median-simple]</code> 6280 110.70 371.10 116.46 113.96 7.97 8.59e+03 <code>test_single_chaikin_osc[medium-median-smoothed]</code> 7021 110.46 174.82 113.66 112.37 5.45 8.80e+03 <code>test_single_chaikin_osc[medium-median-exponential]</code> 6562 110.48 253.84 116.67 113.41 10.33 8.57e+03 <code>test_single_chaikin_osc[medium-median-median]</code> 7865 110.54 273.93 112.93 112.17 4.37 8.86e+03 <code>test_single_chaikin_osc[medium-median-mode]</code> 6506 110.63 219.13 112.54 111.80 4.19 8.89e+03 <code>test_single_chaikin_osc[medium-mode-simple]</code> 5311 163.59 287.65 169.30 167.37 6.47 5.91e+03 <code>test_single_chaikin_osc[medium-mode-smoothed]</code> 4599 163.59 329.37 170.73 167.96 11.45 5.86e+03 <code>test_single_chaikin_osc[medium-mode-exponential]</code> 5177 164.26 298.65 171.83 169.20 8.44 5.82e+03 <code>test_single_chaikin_osc[medium-mode-median]</code> 5664 163.70 237.02 169.35 168.37 4.45 5.90e+03 <code>test_single_chaikin_osc[medium-mode-mode]</code> 5217 163.11 311.47 168.62 167.69 5.22 5.93e+03 <code>test_bulk_chaikin_osc[medium-simple-simple]</code> 3078 293.13 416.80 297.99 296.03 7.44 3.36e+03 <code>test_bulk_chaikin_osc[medium-simple-smoothed]</code> 3067 308.74 424.19 314.52 311.85 8.93 3.18e+03 <code>test_bulk_chaikin_osc[medium-simple-exponential]</code> 2899 306.43 451.69 313.05 310.30 10.10 3.19e+03 <code>test_bulk_chaikin_osc[medium-simple-median]</code> 2548 367.35 611.51 372.69 369.95 16.19 2.68e+03 <code>test_bulk_chaikin_osc[medium-simple-mode]</code> 1862 507.49 703.63 518.47 517.82 10.07 1.93e+03 <code>test_bulk_chaikin_osc[medium-smoothed-simple]</code> 2615 355.08 532.97 361.57 359.15 10.27 2.77e+03 <code>test_bulk_chaikin_osc[medium-smoothed-smoothed]</code> 2475 369.52 560.60 377.97 374.47 12.03 2.65e+03 <code>test_bulk_chaikin_osc[medium-smoothed-exponential]</code> 2297 368.69 535.26 373.65 371.47 10.08 2.68e+03 <code>test_bulk_chaikin_osc[medium-smoothed-median]</code> 2091 428.65 849.43 432.96 430.97 13.37 2.31e+03 <code>test_bulk_chaikin_osc[medium-smoothed-mode]</code> 1658 567.67 841.71 582.62 580.10 14.62 1.72e+03 <code>test_bulk_chaikin_osc[medium-exponential-simple]</code> 2526 359.02 548.89 363.87 361.67 10.63 2.75e+03 <code>test_bulk_chaikin_osc[medium-exponential-smoothed]</code> 2407 373.61 587.49 396.57 386.73 27.01 2.52e+03 <code>test_bulk_chaikin_osc[medium-exponential-exponential]</code> 1735 376.89 4571.54 445.50 429.74 129.22 2.24e+03 <code>test_bulk_chaikin_osc[medium-exponential-median]</code> 2003 433.08 1080.29 485.49 470.48 55.30 2.06e+03 <code>test_bulk_chaikin_osc[medium-exponential-mode]</code> 1520 577.19 1269.77 642.75 628.22 64.55 1.56e+03 <code>test_bulk_chaikin_osc[medium-median-simple]</code> 978 634.02 1197.08 695.75 682.72 56.88 1.44e+03 <code>test_bulk_chaikin_osc[medium-median-smoothed]</code> 1182 659.28 1507.23 726.79 713.69 73.51 1.38e+03 <code>test_bulk_chaikin_osc[medium-median-exponential]</code> 1055 657.84 1575.66 736.15 725.78 81.89 1.36e+03 <code>test_bulk_chaikin_osc[medium-median-median]</code> 1031 717.41 1933.05 800.24 772.66 100.50 1.25e+03 <code>test_bulk_chaikin_osc[medium-median-mode]</code> 919 864.86 1808.02 952.00 927.23 86.61 1.05e+03 <code>test_bulk_chaikin_osc[medium-mode-simple]</code> 723 1284.60 2617.28 1431.57 1413.07 127.27 6.99e+02 <code>test_bulk_chaikin_osc[medium-mode-smoothed]</code> 714 1254.31 2238.02 1349.99 1322.85 88.53 7.41e+02 <code>test_bulk_chaikin_osc[medium-mode-exponential]</code> 661 1252.55 2098.31 1353.13 1321.29 97.73 7.39e+02 <code>test_bulk_chaikin_osc[medium-mode-median]</code> 594 1322.66 2306.43 1433.35 1400.24 100.27 6.98e+02 <code>test_bulk_chaikin_osc[medium-mode-mode]</code> 609 1464.75 2404.63 1559.45 1536.18 88.37 6.41e+02 <code>test_single_ppo[medium-simple]</code> 26037 22.65 127.58 23.74 23.35 2.01 4.21e+04 <code>test_single_ppo[medium-smoothed]</code> 14416 40.11 126.69 41.47 40.98 2.48 2.41e+04 <code>test_single_ppo[medium-exponential]</code> 20746 40.37 135.21 41.56 41.15 2.24 2.41e+04 <code>test_single_ppo[medium-median]</code> 11740 42.91 108.65 44.20 43.48 2.92 2.26e+04 <code>test_single_ppo[medium-mode]</code> 10096 76.76 273.11 82.25 81.37 4.46 1.22e+04 <code>test_bulk_ppo[medium-simple]</code> 7643 97.74 215.50 102.07 100.06 6.01 9.80e+03 <code>test_bulk_ppo[medium-smoothed]</code> 2208 420.60 523.37 431.53 427.59 11.48 2.32e+03 <code>test_bulk_ppo[medium-exponential]</code> 1975 429.10 642.45 443.27 439.06 15.45 2.26e+03 <code>test_bulk_ppo[medium-median]</code> 823 1082.29 1364.12 1187.67 1186.60 33.11 8.42e+02 <code>test_bulk_ppo[medium-mode]</code> 333 2887.36 3242.45 2945.77 2935.82 47.15 3.39e+02 <code>test_single_cmo[medium]</code> 10687 25.43 104.67 26.49 26.02 2.25 3.77e+04 <code>test_bulk_cmo[medium]</code> 2714 256.28 404.30 262.24 259.80 7.60 3.81e+03"},{"location":"benchmarks/momentum-indicators/small/","title":"Small Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_rsi[small-simple]</code> 13744 4.74 34.98 4.93 4.87 0.61 2.03e+05 <code>test_single_rsi[small-smoothed]</code> 66419 6.70 47.20 7.18 7.09 0.87 1.39e+05 <code>test_single_rsi[small-exponential]</code> 37345 7.09 197.87 7.33 7.22 1.31 1.36e+05 <code>test_single_rsi[small-median]</code> 41001 8.83 89.91 9.24 9.09 1.18 1.08e+05 <code>test_single_rsi[small-mode]</code> 25401 12.93 65.06 14.15 14.06 1.21 7.07e+04 <code>test_bulk_rsi[small-simple]</code> 15093 47.76 112.02 48.93 48.35 2.34 2.04e+04 <code>test_bulk_rsi[small-smoothed]</code> 11881 69.21 133.97 70.79 69.95 2.88 1.41e+04 <code>test_bulk_rsi[small-exponential]</code> 8134 70.82 161.93 72.54 71.54 3.52 1.38e+04 <code>test_bulk_rsi[small-median]</code> 5198 152.37 234.91 156.19 154.06 5.85 6.40e+03 <code>test_bulk_rsi[small-mode]</code> 2584 319.61 411.45 327.23 324.98 7.57 3.06e+03 <code>test_single_stoch[small]</code> 47244 7.59 103.89 7.92 7.74 1.22 1.26e+05 <code>test_bulk_stoch[small]</code> 6755 100.58 165.26 102.07 101.43 2.71 9.80e+03 <code>test_single_slow_stoch[small-simple]</code> 88810 3.98 61.41 4.15 4.09 0.65 2.41e+05 <code>test_single_slow_stoch[small-smoothed]</code> 64442 6.46 87.89 6.71 6.57 1.07 1.49e+05 <code>test_single_slow_stoch[small-exponential]</code> 83592 6.48 61.69 6.75 6.61 1.07 1.48e+05 <code>test_single_slow_stoch[small-median]</code> 55553 7.13 1529.35 7.68 7.41 9.42 1.30e+05 <code>test_single_slow_stoch[small-mode]</code> 37423 12.07 129.56 13.40 13.24 1.46 7.46e+04 <code>test_bulk_slow_stoch[small-simple]</code> 14400 11.19 80.83 11.99 11.63 1.93 8.34e+04 <code>test_bulk_slow_stoch[small-smoothed]</code> 23905 35.56 128.02 36.80 36.13 2.76 2.72e+04 <code>test_bulk_slow_stoch[small-exponential]</code> 24172 36.17 715.19 37.38 36.80 4.95 2.67e+04 <code>test_bulk_slow_stoch[small-median]</code> 7105 102.59 200.91 105.84 104.46 4.89 9.45e+03 <code>test_bulk_slow_stoch[small-mode]</code> 3672 246.78 532.02 258.57 256.54 11.22 3.87e+03 <code>test_single_slowest_stoch[small-simple]</code> 141004 3.55 66.54 3.72 3.67 0.61 2.69e+05 <code>test_single_slowest_stoch[small-smoothed]</code> 45416 6.13 56.72 6.56 6.30 1.45 1.52e+05 <code>test_single_slowest_stoch[small-exponential]</code> 70493 6.31 80.87 6.82 6.52 1.69 1.47e+05 <code>test_single_slowest_stoch[small-median]</code> 41284 7.22 201.41 7.67 7.37 1.66 1.30e+05 <code>test_single_slowest_stoch[small-mode]</code> 42995 9.74 67.94 10.98 10.85 1.16 9.11e+04 <code>test_bulk_slowest_stoch[small-simple]</code> 40390 9.39 76.02 9.90 9.70 1.44 1.01e+05 <code>test_bulk_slowest_stoch[small-smoothed]</code> 25678 19.35 1469.86 20.41 19.91 9.29 4.90e+04 <code>test_bulk_slowest_stoch[small-exponential]</code> 38709 19.74 82.11 20.84 20.35 2.13 4.80e+04 <code>test_bulk_slowest_stoch[small-median]</code> 11470 59.96 121.30 62.15 60.98 3.59 1.61e+04 <code>test_bulk_slowest_stoch[small-mode]</code> 7364 121.26 259.59 127.34 125.84 5.31 7.85e+03 <code>test_single_williams_r[small]</code> 71809 8.30 597.62 8.57 8.44 2.76 1.17e+05 <code>test_bulk_williams_r[small]</code> 14470 28.93 106.22 29.81 29.43 2.06 3.35e+04 <code>test_single_mfi[small]</code> 56546 8.08 55.48 8.35 8.26 0.82 1.20e+05 <code>test_bulk_mfi[small]</code> 12885 38.59 79.52 39.63 39.20 2.02 2.52e+04 <code>test_single_roc[small]</code> 116891 0.22 35.57 0.26 0.24 0.24 3.91e+06 <code>test_bulk_roc[small]</code> 31323 8.33 75.26 9.29 9.07 1.48 1.08e+05 <code>test_single_obv[small]</code> 133673 0.24 45.63 0.26 0.24 0.22 3.87e+06 <code>test_bulk_obv[small]</code> 23499 12.44 84.96 13.31 13.04 1.64 7.51e+04 <code>test_single_cci[small-standard-simple]</code> 39562 4.41 106.41 4.78 4.67 0.99 2.09e+05 <code>test_single_cci[small-standard-smoothed]</code> 47121 7.18 64.95 7.39 7.30 0.92 1.35e+05 <code>test_single_cci[small-standard-exponential]</code> 43549 7.18 132.28 7.44 7.32 1.09 1.34e+05 <code>test_single_cci[small-standard-median]</code> 47244 8.41 1490.83 9.00 8.57 8.98 1.11e+05 <code>test_single_cci[small-standard-mode]</code> 38461 15.70 295.59 17.58 16.96 7.61 5.69e+04 <code>test_single_cci[small-mean-simple]</code> 47660 4.35 345.97 4.70 4.54 3.64 2.13e+05 <code>test_single_cci[small-mean-smoothed]</code> 38217 7.02 299.32 7.40 7.15 4.30 1.35e+05 <code>test_single_cci[small-mean-exponential]</code> 26893 7.22 241.45 7.58 7.35 4.05 1.32e+05 <code>test_single_cci[small-mean-median]</code> 49136 8.33 359.99 8.87 8.50 5.23 1.13e+05 <code>test_single_cci[small-mean-mode]</code> 26536 15.48 351.17 17.09 16.67 6.64 5.85e+04 <code>test_single_cci[small-median-simple]</code> 23296 8.06 720.53 8.72 8.31 6.95 1.15e+05 <code>test_single_cci[small-median-smoothed]</code> 28986 10.80 362.06 11.44 11.00 5.67 8.74e+04 <code>test_single_cci[small-median-exponential]</code> 21872 10.74 563.67 11.43 10.98 6.79 8.75e+04 <code>test_single_cci[small-median-median]</code> 25496 11.67 416.17 12.49 12.00 5.85 8.01e+04 <code>test_single_cci[small-median-mode]</code> 30753 19.19 452.02 21.01 20.41 7.22 4.76e+04 <code>test_single_cci[small-ulcer-simple]</code> 12193 68.35 322.87 70.19 68.54 11.18 1.42e+04 <code>test_single_cci[small-ulcer-smoothed]</code> 11819 70.78 534.19 72.75 70.96 12.53 1.37e+04 <code>test_single_cci[small-ulcer-exponential]</code> 10353 70.80 631.88 72.70 70.98 12.71 1.38e+04 <code>test_single_cci[small-ulcer-median]</code> 9984 71.96 545.71 74.46 72.32 13.32 1.34e+04 <code>test_single_cci[small-ulcer-mode]</code> 8656 79.22 458.30 82.55 80.56 13.40 1.21e+04 <code>test_single_cci[small-mode-simple]</code> 27509 15.48 259.19 17.14 16.70 6.34 5.83e+04 <code>test_single_cci[small-mode-smoothed]</code> 20955 18.00 383.95 19.79 19.26 7.08 5.05e+04 <code>test_single_cci[small-mode-exponential]</code> 24794 18.11 560.04 19.89 19.33 7.84 5.03e+04 <code>test_single_cci[small-mode-median]</code> 26720 19.09 403.56 21.00 20.41 7.45 4.76e+04 <code>test_single_cci[small-mode-mode]</code> 18731 26.83 320.23 29.50 28.87 8.10 3.39e+04 <code>test_bulk_cci[small-standard-simple]</code> 11257 25.95 342.56 27.27 26.37 8.34 3.67e+04 <code>test_bulk_cci[small-standard-smoothed]</code> 10455 50.93 464.34 53.31 51.78 11.52 1.88e+04 <code>test_bulk_cci[small-standard-exponential]</code> 10302 51.80 309.56 54.10 52.54 10.96 1.85e+04 <code>test_bulk_cci[small-standard-median]</code> 5882 120.02 382.21 125.52 122.06 17.66 7.97e+03 <code>test_bulk_cci[small-standard-mode]</code> 2714 321.72 562.99 335.81 327.88 28.97 2.98e+03 <code>test_bulk_cci[small-mean-simple]</code> 18468 22.26 277.84 23.60 22.70 7.65 4.24e+04 <code>test_bulk_cci[small-mean-smoothed]</code> 16902 47.20 476.12 49.52 47.85 11.68 2.02e+04 <code>test_bulk_cci[small-mean-exponential]</code> 11495 47.93 341.61 50.32 48.52 11.66 1.99e+04 <code>test_bulk_cci[small-mean-median]</code> 6621 116.67 441.37 122.25 118.76 17.55 8.18e+03 <code>test_bulk_cci[small-mean-mode]</code> 2461 318.30 1870.87 334.37 327.04 43.53 2.99e+03 <code>test_bulk_cci[small-median-simple]</code> 6923 113.11 458.08 118.90 115.24 17.87 8.41e+03 <code>test_bulk_cci[small-median-smoothed]</code> 5029 139.93 498.56 146.20 141.89 19.57 6.84e+03 <code>test_bulk_cci[small-median-exponential]</code> 5512 140.67 417.13 149.23 146.26 20.40 6.70e+03 <code>test_bulk_cci[small-median-median]</code> 4082 207.98 491.02 217.36 211.70 23.67 4.60e+03 <code>test_bulk_cci[small-median-mode]</code> 2072 414.73 828.58 433.18 423.90 34.20 2.31e+03 <code>test_bulk_cci[small-ulcer-simple]</code> 9236 96.96 762.91 100.71 97.70 17.20 9.93e+03 <code>test_bulk_cci[small-ulcer-smoothed]</code> 6679 122.59 915.06 128.14 123.70 22.83 7.80e+03 <code>test_bulk_cci[small-ulcer-exponential]</code> 6486 123.41 580.71 127.53 124.26 17.74 7.84e+03 <code>test_bulk_cci[small-ulcer-median]</code> 4443 193.28 500.50 200.25 195.35 21.13 4.99e+03 <code>test_bulk_cci[small-ulcer-mode]</code> 2394 391.93 5282.06 426.44 404.97 157.37 2.34e+03 <code>test_bulk_cci[small-mode-simple]</code> 2755 315.82 3497.86 335.18 321.89 109.53 2.98e+03 <code>test_bulk_cci[small-mode-smoothed]</code> 2544 341.74 959.25 357.74 348.44 34.08 2.80e+03 <code>test_bulk_cci[small-mode-exponential]</code> 2640 341.56 819.64 354.35 346.91 27.28 2.82e+03 <code>test_bulk_cci[small-mode-median]</code> 2024 415.28 915.93 431.34 421.63 33.99 2.32e+03 <code>test_bulk_cci[small-mode-mode]</code> 1498 611.06 992.16 638.83 628.70 39.60 1.57e+03 <code>test_single_mcginley_cci[small-standard]</code> 8132 4.44 149.46 4.92 4.59 3.08 2.03e+05 <code>test_single_mcginley_cci[small-mean]</code> 44227 4.33 341.08 4.64 4.43 3.52 2.16e+05 <code>test_single_mcginley_cci[small-median]</code> 30134 7.96 292.19 8.47 8.13 4.20 1.18e+05 <code>test_single_mcginley_cci[small-ulcer]</code> 11968 67.91 318.06 69.83 68.06 9.41 1.43e+04 <code>test_single_mcginley_cci[small-mode]</code> 28601 15.17 200.48 16.94 16.46 5.33 5.90e+04 <code>test_bulk_mcginley_cci[small-standard]</code> 11564 32.81 314.24 35.11 33.55 9.01 2.85e+04 <code>test_bulk_mcginley_cci[small-mean]</code> 20393 27.33 229.76 29.94 28.57 8.00 3.34e+04 <code>test_bulk_mcginley_cci[small-median]</code> 5007 118.13 477.63 126.17 120.46 19.13 7.93e+03 <code>test_bulk_mcginley_cci[small-ulcer]</code> 7099 105.54 420.32 113.48 107.72 18.33 8.81e+03 <code>test_bulk_mcginley_cci[small-mode]</code> 2011 324.85 828.01 353.14 341.22 40.78 2.83e+03 <code>test_single_macd_line[small-simple-simple]</code> 43619 4.06 210.08 4.31 4.15 2.77 2.32e+05 <code>test_single_macd_line[small-simple-smoothed]</code> 60541 4.20 275.93 4.47 4.31 3.10 2.24e+05 <code>test_single_macd_line[small-simple-exponential]</code> 52735 4.22 258.65 4.50 4.35 2.72 2.22e+05 <code>test_single_macd_line[small-simple-median]</code> 40270 4.44 427.80 4.75 4.56 3.49 2.10e+05 <code>test_single_macd_line[small-simple-mode]</code> 41410 4.96 302.08 5.29 5.09 3.04 1.89e+05 <code>test_single_macd_line[small-smoothed-simple]</code> 78377 6.63 223.52 6.92 6.72 3.06 1.44e+05 <code>test_single_macd_line[small-smoothed-smoothed]</code> 35762 6.81 248.98 7.15 6.93 3.50 1.40e+05 <code>test_single_macd_line[small-smoothed-exponential]</code> 37421 6.80 317.00 7.15 6.93 3.52 1.40e+05 <code>test_single_macd_line[small-smoothed-median]</code> 33293 7.04 253.30 7.47 7.19 3.86 1.34e+05 <code>test_single_macd_line[small-smoothed-mode]</code> 30101 7.48 237.76 7.97 7.63 3.98 1.25e+05 <code>test_single_macd_line[small-exponential-simple]</code> 61641 6.81 236.58 7.16 6.93 3.34 1.40e+05 <code>test_single_macd_line[small-exponential-smoothed]</code> 37976 6.81 228.78 7.19 6.94 3.44 1.39e+05 <code>test_single_macd_line[small-exponential-exponential]</code> 40119 6.85 158.50 7.20 6.96 3.14 1.39e+05 <code>test_single_macd_line[small-exponential-median]</code> 51726 7.09 224.72 7.45 7.20 3.41 1.34e+05 <code>test_single_macd_line[small-exponential-mode]</code> 33415 7.56 239.11 8.01 7.74 3.83 1.25e+05 <code>test_single_macd_line[small-median-simple]</code> 19978 7.65 323.74 8.22 7.78 4.76 1.22e+05 <code>test_single_macd_line[small-median-smoothed]</code> 43549 7.81 273.72 8.32 7.98 3.91 1.20e+05 <code>test_single_macd_line[small-median-exponential]</code> 33561 7.76 160.61 8.17 7.89 3.45 1.22e+05 <code>test_single_macd_line[small-median-median]</code> 39130 8.06 255.76 8.58 8.24 4.03 1.17e+05 <code>test_single_macd_line[small-median-mode]</code> 18928 8.54 134.24 9.07 8.68 4.08 1.10e+05 <code>test_single_macd_line[small-mode-simple]</code> 23873 14.93 259.95 16.60 16.15 5.41 6.03e+04 <code>test_single_macd_line[small-mode-smoothed]</code> 22708 14.96 381.84 16.65 16.18 5.73 6.00e+04 <code>test_single_macd_line[small-mode-exponential]</code> 34728 14.98 173.58 16.63 16.22 4.78 6.01e+04 <code>test_single_macd_line[small-mode-median]</code> 42756 15.35 369.78 17.03 16.56 5.34 5.87e+04 <code>test_single_macd_line[small-mode-mode]</code> 38793 15.83 342.02 17.56 17.07 5.52 5.70e+04 <code>test_bulk_macd_line[small-simple-simple]</code> 29525 15.78 317.39 17.07 16.41 6.24 5.86e+04 <code>test_bulk_macd_line[small-simple-smoothed]</code> 16807 28.32 323.11 29.93 28.70 8.18 3.34e+04 <code>test_bulk_macd_line[small-simple-exponential]</code> 25093 28.93 323.78 30.59 29.39 7.54 3.27e+04 <code>test_bulk_macd_line[small-simple-median]</code> 9338 74.63 391.15 78.25 75.68 12.13 1.28e+04 <code>test_bulk_macd_line[small-simple-mode]</code> 3736 188.22 467.00 196.33 190.93 20.39 5.09e+03 <code>test_bulk_macd_line[small-smoothed-simple]</code> 13239 49.98 392.26 52.19 50.59 9.25 1.92e+04 <code>test_bulk_macd_line[small-smoothed-smoothed]</code> 9159 63.54 309.13 66.37 64.61 10.15 1.51e+04 <code>test_bulk_macd_line[small-smoothed-exponential]</code> 10519 63.44 372.71 66.01 64.06 10.14 1.51e+04 <code>test_bulk_macd_line[small-smoothed-median]</code> 7408 109.06 374.02 113.09 110.24 13.24 8.84e+03 <code>test_bulk_macd_line[small-smoothed-mode]</code> 4143 220.24 646.91 229.12 222.47 24.88 4.36e+03 <code>test_bulk_macd_line[small-exponential-simple]</code> 10294 50.76 244.19 53.19 51.24 9.82 1.88e+04 <code>test_bulk_macd_line[small-exponential-smoothed]</code> 10351 63.52 209.17 66.25 64.00 10.51 1.51e+04 <code>test_bulk_macd_line[small-exponential-exponential]</code> 13053 64.93 410.87 67.82 65.85 11.15 1.47e+04 <code>test_bulk_macd_line[small-exponential-median]</code> 7066 111.33 363.17 116.43 112.92 14.72 8.59e+03 <code>test_bulk_macd_line[small-exponential-mode]</code> 3082 222.78 600.97 233.23 226.19 24.75 4.29e+03 <code>test_bulk_macd_line[small-median-simple]</code> 4728 130.56 395.78 136.68 132.20 17.28 7.32e+03 <code>test_bulk_macd_line[small-median-smoothed]</code> 4642 138.15 448.13 149.34 144.71 18.65 6.70e+03 <code>test_bulk_macd_line[small-median-exponential]</code> 5011 139.35 499.45 151.23 146.00 19.03 6.61e+03 <code>test_bulk_macd_line[small-median-median]</code> 3928 199.76 504.28 209.29 202.80 23.05 4.78e+03 <code>test_bulk_macd_line[small-median-mode]</code> 2764 303.52 617.49 321.79 312.35 29.54 3.11e+03 <code>test_bulk_macd_line[small-mode-simple]</code> 2761 342.97 636.67 359.22 350.43 31.77 2.78e+03 <code>test_bulk_macd_line[small-mode-smoothed]</code> 2694 355.56 719.86 371.92 362.73 31.64 2.69e+03 <code>test_bulk_macd_line[small-mode-exponential]</code> 2258 355.04 681.95 372.12 362.79 33.52 2.69e+03 <code>test_bulk_macd_line[small-mode-median]</code> 2173 403.43 936.64 421.47 410.37 34.79 2.37e+03 <code>test_bulk_macd_line[small-mode-mode]</code> 1783 526.63 809.01 547.46 533.86 37.98 1.83e+03 <code>test_single_signal_line[small-simple]</code> 49092 3.26 258.69 3.54 3.37 3.03 2.82e+05 <code>test_single_signal_line[small-smoothed]</code> 101123 5.26 335.45 5.57 5.37 3.18 1.80e+05 <code>test_single_signal_line[small-exponential]</code> 64906 5.31 325.54 5.63 5.43 3.30 1.77e+05 <code>test_single_signal_line[small-median]</code> 39677 6.39 141.30 6.84 6.52 3.45 1.46e+05 <code>test_single_signal_line[small-mode]</code> 40662 10.52 190.58 11.82 11.48 4.53 8.46e+04 <code>test_bulk_signal_line[small-simple]</code> 24314 9.07 234.78 10.12 9.67 4.86 9.89e+04 <code>test_bulk_signal_line[small-smoothed]</code> 21889 29.28 349.56 31.27 29.87 8.38 3.20e+04 <code>test_bulk_signal_line[small-exponential]</code> 10047 30.13 418.13 32.49 30.57 9.67 3.08e+04 <code>test_bulk_signal_line[small-median]</code> 8380 74.30 305.30 78.88 75.45 13.24 1.27e+04 <code>test_bulk_signal_line[small-mode]</code> 4295 213.35 453.25 230.11 222.74 24.35 4.35e+03 <code>test_single_mcginley_macd_line[small]</code> 107136 3.72 250.87 3.99 3.85 2.76 2.50e+05 <code>test_bulk_mcginley_macd_line[small]</code> 8245 26.50 243.34 28.57 27.11 7.62 3.50e+04 <code>test_single_chaikin_osc[small-simple-simple]</code> 17653 15.85 316.76 16.95 16.09 6.48 5.90e+04 <code>test_single_chaikin_osc[small-simple-smoothed]</code> 24737 15.89 352.69 17.05 16.13 6.64 5.86e+04 <code>test_single_chaikin_osc[small-simple-exponential]</code> 26188 15.72 293.17 17.00 16.11 6.65 5.88e+04 <code>test_single_chaikin_osc[small-simple-median]</code> 42519 15.89 229.19 16.90 16.17 5.66 5.92e+04 <code>test_single_chaikin_osc[small-simple-mode]</code> 24557 16.04 236.43 17.24 16.32 6.29 5.80e+04 <code>test_single_chaikin_osc[small-smoothed-simple]</code> 23540 18.30 329.45 19.53 18.56 6.86 5.12e+04 <code>test_single_chaikin_osc[small-smoothed-smoothed]</code> 33750 18.33 297.37 19.53 18.72 6.21 5.12e+04 <code>test_single_chaikin_osc[small-smoothed-exponential]</code> 26866 18.50 249.82 19.58 18.72 6.20 5.11e+04 <code>test_single_chaikin_osc[small-smoothed-median]</code> 18647 18.52 302.11 19.71 18.78 6.83 5.07e+04 <code>test_single_chaikin_osc[small-smoothed-mode]</code> 23196 18.63 167.87 19.81 18.89 6.12 5.05e+04 <code>test_single_chaikin_osc[small-exponential-simple]</code> 30596 18.43 171.39 19.58 18.74 5.93 5.11e+04 <code>test_single_chaikin_osc[small-exponential-smoothed]</code> 23979 18.35 352.23 19.46 18.70 6.01 5.14e+04 <code>test_single_chaikin_osc[small-exponential-exponential]</code> 27965 18.31 296.04 19.55 18.70 6.37 5.12e+04 <code>test_single_chaikin_osc[small-exponential-median]</code> 22168 18.54 355.74 19.70 18.83 6.36 5.08e+04 <code>test_single_chaikin_osc[small-exponential-mode]</code> 20105 18.52 324.67 19.91 18.91 7.20 5.02e+04 <code>test_single_chaikin_osc[small-median-simple]</code> 17659 19.48 372.19 20.72 19.74 7.00 4.83e+04 <code>test_single_chaikin_osc[small-median-smoothed]</code> 27735 19.35 558.41 20.61 19.74 7.23 4.85e+04 <code>test_single_chaikin_osc[small-median-exponential]</code> 26406 19.44 444.89 20.71 19.72 7.03 4.83e+04 <code>test_single_chaikin_osc[small-median-median]</code> 32510 19.35 445.80 20.82 19.72 7.42 4.80e+04 <code>test_single_chaikin_osc[small-median-mode]</code> 20509 19.46 343.76 20.93 19.74 7.27 4.78e+04 <code>test_single_chaikin_osc[small-mode-simple]</code> 13893 32.74 369.74 35.91 34.28 9.38 2.78e+04 <code>test_single_chaikin_osc[small-mode-smoothed]</code> 17482 32.78 245.50 35.98 34.37 8.98 2.78e+04 <code>test_single_chaikin_osc[small-mode-exponential]</code> 19265 32.59 323.91 36.22 34.46 9.81 2.76e+04 <code>test_single_chaikin_osc[small-mode-median]</code> 11055 33.00 336.02 36.33 34.61 10.19 2.75e+04 <code>test_single_chaikin_osc[small-mode-mode]</code> 11641 33.00 368.97 36.32 34.61 9.70 2.75e+04 <code>test_bulk_chaikin_osc[small-simple-simple]</code> 10363 49.21 432.71 52.91 50.13 12.07 1.89e+04 <code>test_bulk_chaikin_osc[small-simple-smoothed]</code> 6752 52.63 542.23 57.89 53.83 16.29 1.73e+04 <code>test_bulk_chaikin_osc[small-simple-exponential]</code> 6965 52.58 668.17 57.77 53.70 16.87 1.73e+04 <code>test_bulk_chaikin_osc[small-simple-median]</code> 5351 61.89 477.95 67.91 63.76 15.77 1.47e+04 <code>test_bulk_chaikin_osc[small-simple-mode]</code> 5996 88.67 470.95 95.98 91.20 17.96 1.04e+04 <code>test_bulk_chaikin_osc[small-smoothed-simple]</code> 6101 62.74 398.08 68.70 64.37 16.67 1.46e+04 <code>test_bulk_chaikin_osc[small-smoothed-smoothed]</code> 5661 65.45 594.80 72.88 67.65 20.21 1.37e+04 <code>test_bulk_chaikin_osc[small-smoothed-exponential]</code> 10391 65.52 473.76 72.86 68.43 17.25 1.37e+04 <code>test_bulk_chaikin_osc[small-smoothed-median]</code> 5250 75.19 555.23 84.75 79.28 21.26 1.18e+04 <code>test_bulk_chaikin_osc[small-smoothed-mode]</code> 4904 102.30 663.67 115.87 109.33 25.64 8.63e+03 <code>test_bulk_chaikin_osc[small-exponential-simple]</code> 7868 65.65 418.52 75.75 70.93 19.33 1.32e+04 <code>test_bulk_chaikin_osc[small-exponential-smoothed]</code> 9220 68.56 486.32 82.63 76.37 22.04 1.21e+04 <code>test_bulk_chaikin_osc[small-exponential-exponential]</code> 5717 68.50 379.89 84.05 77.08 23.71 1.19e+04 <code>test_bulk_chaikin_osc[small-exponential-median]</code> 4508 78.45 599.88 101.06 94.20 28.33 9.90e+03 <code>test_bulk_chaikin_osc[small-exponential-mode]</code> 4129 104.83 850.30 125.42 116.70 31.98 7.97e+03 <code>test_bulk_chaikin_osc[small-median-simple]</code> 3335 108.41 1296.92 126.65 119.78 33.25 7.90e+03 <code>test_bulk_chaikin_osc[small-median-smoothed]</code> 3553 111.45 781.60 140.52 133.56 33.71 7.12e+03 <code>test_bulk_chaikin_osc[small-median-exponential]</code> 4455 110.19 572.47 127.58 120.82 26.14 7.84e+03 <code>test_bulk_chaikin_osc[small-median-median]</code> 4251 118.89 663.77 138.04 129.02 32.16 7.24e+03 <code>test_bulk_chaikin_osc[small-median-mode]</code> 3623 144.48 705.89 167.15 156.57 33.36 5.98e+03 <code>test_bulk_chaikin_osc[small-mode-simple]</code> 2729 231.08 625.30 261.49 249.50 40.70 3.82e+03 <code>test_bulk_chaikin_osc[small-mode-smoothed]</code> 2889 229.85 707.43 264.89 256.02 41.60 3.78e+03 <code>test_bulk_chaikin_osc[small-mode-exponential]</code> 1782 230.84 905.08 264.71 254.08 46.70 3.78e+03 <code>test_bulk_chaikin_osc[small-mode-median]</code> 2097 240.37 888.43 276.74 266.22 44.60 3.61e+03 <code>test_bulk_chaikin_osc[small-mode-mode]</code> 2548 266.87 639.10 314.27 305.17 44.45 3.18e+03 <code>test_single_ppo[small-simple]</code> 39824 4.11 194.91 4.42 4.20 3.24 2.26e+05 <code>test_single_ppo[small-smoothed]</code> 61641 6.63 178.80 6.99 6.74 3.44 1.43e+05 <code>test_single_ppo[small-exponential]</code> 54768 6.76 263.19 7.16 6.91 3.76 1.40e+05 <code>test_single_ppo[small-median]</code> 31053 7.87 280.61 8.42 8.02 4.52 1.19e+05 <code>test_single_ppo[small-mode]</code> 37113 15.78 233.96 17.59 17.06 5.56 5.68e+04 <code>test_bulk_ppo[small-simple]</code> 11603 16.89 222.89 18.11 17.32 6.40 5.52e+04 <code>test_bulk_ppo[small-smoothed]</code> 10387 64.19 327.87 67.94 65.83 11.27 1.47e+04 <code>test_bulk_ppo[small-exponential]</code> 10668 65.67 219.93 69.12 67.02 10.95 1.45e+04 <code>test_bulk_ppo[small-median]</code> 3102 191.37 541.30 202.70 196.44 21.79 4.93e+03 <code>test_bulk_ppo[small-mode]</code> 1588 511.52 1054.69 537.73 527.93 38.75 1.86e+03 <code>test_single_cmo[small]</code> 33252 4.44 310.67 4.81 4.59 3.57 2.08e+05 <code>test_bulk_cmo[small]</code> 14552 41.89 293.78 44.09 42.57 9.03 2.27e+04"},{"location":"benchmarks/moving-average/large/","title":"Large Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_ma[large-simple]</code> 16818 34.63 53.24 35.64 35.61 0.32 2.81e+04 <code>test_single_ma[large-smoothed]</code> 11897 76.83 110.46 77.76 77.69 0.78 1.29e+04 <code>test_single_ma[large-exponential]</code> 11913 76.85 125.93 77.47 77.43 0.79 1.29e+04 <code>test_bulk_ma[large-simple]</code> 6242 114.74 160.09 115.62 115.39 1.53 8.65e+03 <code>test_bulk_ma[large-smoothed]</code> 2310 410.50 478.28 415.83 414.47 4.02 2.40e+03 <code>test_bulk_ma[large-exponential]</code> 2226 412.89 492.30 416.53 415.67 4.24 2.40e+03 <code>test_single_mcginley_dynamic[large]</code> 197785 0.13 2.72 0.13 0.13 0.01 7.71e+06 <code>test_bulk_mcginley_dynamic[large]</code> 6778 118.04 174.87 118.98 118.74 1.61 8.41e+03"},{"location":"benchmarks/moving-average/medium/","title":"Medium Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_ma[medium-simple]</code> 31821 17.67 35.67 18.03 18.02 0.23 5.55e+04 <code>test_single_ma[medium-smoothed]</code> 23643 35.87 60.15 36.31 36.28 0.44 2.75e+04 <code>test_single_ma[medium-exponential]</code> 23519 35.91 56.65 36.19 36.15 0.44 2.76e+04 <code>test_bulk_ma[medium-simple]</code> 10670 57.37 141.78 58.10 57.93 1.16 1.72e+04 <code>test_bulk_ma[medium-smoothed]</code> 4525 204.63 257.80 207.80 206.96 2.50 4.81e+03 <code>test_bulk_ma[medium-exponential]</code> 4496 205.98 255.43 207.69 207.35 1.82 4.81e+03 <code>test_single_mcginley_dynamic[medium]</code> 192197 0.13 0.77 0.13 0.13 0.00 7.77e+06 <code>test_bulk_mcginley_dynamic[medium]</code> 12483 58.39 99.87 59.23 59.17 0.87 1.69e+04"},{"location":"benchmarks/moving-average/small/","title":"Small Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_ma[small-simple]</code> 50373 3.72 22.50 3.82 3.82 0.13 2.62e+05 <code>test_single_ma[small-smoothed]</code> 76811 6.52 36.76 6.64 6.63 0.24 1.51e+05 <code>test_single_ma[small-exponential]</code> 77586 6.43 30.41 6.55 6.54 0.21 1.53e+05 <code>test_bulk_ma[small-simple]</code> 54272 10.67 54.72 11.56 11.59 0.49 8.65e+04 <code>test_bulk_ma[small-smoothed]</code> 19362 39.02 140.22 39.65 39.54 1.08 2.52e+04 <code>test_bulk_ma[small-exponential]</code> 19839 39.31 83.11 39.75 39.65 0.80 2.52e+04 <code>test_single_mcginley_dynamic[small]</code> 195657 0.13 3.70 0.13 0.13 0.01 7.51e+06 <code>test_bulk_mcginley_dynamic[small]</code> 55216 10.93 52.00 11.63 11.69 0.44 8.60e+04"},{"location":"benchmarks/other-indicators/large/","title":"Large Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_roi[large]</code> 192160 0.26 10.13 0.29 0.28 0.05 3.51e+06 <code>test_bulk_roi[large]</code> 460 228.78 353.78 235.49 230.30 18.80 4.25e+03 <code>test_single_true_range[large]</code> 200000 0.12 1.64 0.12 0.12 0.01 8.40e+06 <code>test_bulk_true_range[large]</code> 4738 148.94 251.78 150.73 149.96 5.05 6.63e+03 <code>test_single_atr[large-simple]</code> 8875 103.32 158.67 104.43 104.28 1.92 9.58e+03 <code>test_single_atr[large-smoothed]</code> 6435 145.81 208.69 147.59 147.43 2.55 6.78e+03 <code>test_single_atr[large-exponential]</code> 6453 146.52 389.63 147.85 147.45 4.02 6.76e+03 <code>test_single_atr[large-median]</code> 5488 149.00 227.15 150.68 150.04 3.51 6.64e+03 <code>test_single_atr[large-mode]</code> 5384 157.67 258.91 168.48 168.40 3.67 5.94e+03 <code>test_bulk_atr[large-simple]</code> 2744 329.19 426.97 335.06 334.32 5.66 2.98e+03 <code>test_bulk_atr[large-smoothed]</code> 1524 631.65 815.67 634.68 633.17 9.54 1.58e+03 <code>test_bulk_atr[large-exponential]</code> 1542 627.74 786.24 631.21 629.71 9.31 1.58e+03 <code>test_bulk_atr[large-median]</code> 639 1515.10 1809.07 1526.91 1524.04 20.12 6.55e+02 <code>test_bulk_atr[large-mode]</code> 301 3259.09 3539.54 3304.23 3281.72 41.93 3.03e+02 <code>test_single_ibs[large]</code> 197084 0.12 1.09 0.12 0.12 0.00 8.43e+06 <code>test_bulk_ibs[large]</code> 4570 150.93 2043.16 153.95 153.13 28.36 6.50e+03 <code>test_bulk_positivity[large-simple]</code> 244 253.93 608.54 275.95 256.04 68.12 3.62e+03 <code>test_bulk_positivity[large-smoothed]</code> 2366 379.30 781.15 384.66 382.45 21.65 2.60e+03 <code>test_bulk_positivity[large-exponential]</code> 2393 382.87 830.52 387.75 385.24 24.10 2.58e+03 <code>test_bulk_positivity[large-median]</code> 1052 867.43 1534.42 879.54 874.63 41.79 1.14e+03 <code>test_bulk_positivity[large-mode]</code> 788 1171.91 1896.51 1183.23 1177.15 49.04 8.45e+02"},{"location":"benchmarks/other-indicators/medium/","title":"Medium Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_roi[medium]</code> 186847 0.16 1.32 0.16 0.16 0.01 6.07e+06 <code>test_bulk_roi[medium]</code> 576 109.70 188.32 112.24 110.46 5.87 8.91e+03 <code>test_single_true_range[medium]</code> 185564 0.12 1.06 0.12 0.12 0.00 8.41e+06 <code>test_bulk_true_range[medium]</code> 10181 73.98 121.31 74.92 74.72 1.39 1.33e+04 <code>test_single_atr[medium-simple]</code> 16034 52.52 99.19 53.07 52.94 0.92 1.88e+04 <code>test_single_atr[medium-smoothed]</code> 12570 70.61 157.98 71.22 71.09 1.24 1.40e+04 <code>test_single_atr[medium-exponential]</code> 12544 70.74 263.85 71.33 71.17 2.14 1.40e+04 <code>test_single_atr[medium-median]</code> 9431 71.93 133.37 72.90 72.69 1.55 1.37e+04 <code>test_single_atr[medium-mode]</code> 10347 79.56 139.59 85.30 85.26 1.71 1.17e+04 <code>test_bulk_atr[medium-simple]</code> 4905 165.11 219.00 167.87 167.61 2.05 5.96e+03 <code>test_bulk_atr[medium-smoothed]</code> 3035 314.32 400.87 315.83 315.19 3.68 3.17e+03 <code>test_bulk_atr[medium-exponential]</code> 3038 312.59 406.09 314.35 313.58 4.69 3.18e+03 <code>test_bulk_atr[medium-median]</code> 1197 754.47 899.52 760.61 759.21 8.53 1.31e+03 <code>test_bulk_atr[medium-mode]</code> 617 1569.29 1744.64 1591.80 1592.21 13.98 6.28e+02 <code>test_single_ibs[medium]</code> 194932 0.12 0.91 0.12 0.12 0.00 8.35e+06 <code>test_bulk_ibs[medium]</code> 10178 75.93 159.61 76.89 76.67 1.48 1.30e+04 <code>test_bulk_positivity[medium-simple]</code> 6103 120.11 218.93 122.39 121.96 3.80 8.17e+03 <code>test_bulk_positivity[medium-smoothed]</code> 4772 184.45 356.15 187.41 186.37 8.24 5.34e+03 <code>test_bulk_positivity[medium-exponential]</code> 4595 186.19 334.71 189.31 187.59 9.36 5.28e+03 <code>test_bulk_positivity[medium-median]</code> 1999 443.41 2071.18 477.39 449.11 79.89 2.09e+03 <code>test_bulk_positivity[medium-mode]</code> 1671 560.35 812.63 569.23 563.00 25.19 1.76e+03"},{"location":"benchmarks/other-indicators/small/","title":"Small Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_roi[small]</code> 163640 0.16 2.39 0.16 0.16 0.03 6.18e+06 <code>test_bulk_roi[small]</code> 23716 21.74 139.43 22.60 22.33 2.22 4.42e+04 <code>test_single_true_range[small]</code> 86394 0.11 2.24 0.12 0.11 0.01 8.68e+06 <code>test_bulk_true_range[small]</code> 45377 14.94 115.06 15.92 15.93 1.76 6.28e+04 <code>test_single_atr[small-simple]</code> 55670 11.24 112.91 11.52 11.46 1.32 8.68e+04 <code>test_single_atr[small-smoothed]</code> 52122 13.81 112.30 14.20 14.13 1.48 7.04e+04 <code>test_single_atr[small-exponential]</code> 55901 13.78 110.93 14.19 14.13 1.46 7.05e+04 <code>test_single_atr[small-median]</code> 37371 15.04 124.21 15.52 15.43 1.75 6.44e+04 <code>test_single_atr[small-mode]</code> 35043 17.70 123.54 18.96 18.89 1.70 5.28e+04 <code>test_bulk_atr[small-simple]</code> 26484 31.56 116.78 32.65 32.49 2.21 3.06e+04 <code>test_bulk_atr[small-smoothed]</code> 14400 59.76 159.26 60.58 60.24 3.02 1.65e+04 <code>test_bulk_atr[small-exponential]</code> 14309 59.81 157.89 60.65 60.28 3.06 1.65e+04 <code>test_bulk_atr[small-median]</code> 5813 131.83 285.19 134.05 133.09 5.08 7.46e+03 <code>test_bulk_atr[small-mode]</code> 2584 295.24 407.24 300.18 298.62 7.37 3.33e+03 <code>test_single_ibs[small]</code> 80594 0.11 1.22 0.11 0.11 0.01 8.71e+06 <code>test_bulk_ibs[small]</code> 42454 15.02 217.67 16.10 16.11 1.95 6.21e+04 <code>test_bulk_positivity[small-simple]</code> 24435 24.70 290.37 26.04 25.80 2.93 3.84e+04 <code>test_bulk_positivity[small-smoothed]</code> 15005 38.33 162.87 40.32 39.89 3.87 2.48e+04 <code>test_bulk_positivity[small-exponential]</code> 14297 40.33 172.72 42.09 41.52 4.39 2.38e+04 <code>test_bulk_positivity[small-median]</code> 8271 81.50 219.52 84.04 83.11 5.87 1.19e+04 <code>test_bulk_positivity[small-mode]</code> 6495 116.24 224.85 122.02 121.02 6.63 8.20e+03"},{"location":"benchmarks/standard-indicators/large/","title":"Large Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_sma[large]</code> 14631 36.19 104.61 36.75 36.48 3.33 2.72e+04 <code>test_bulk_sma[large]</code> 6357 115.37 216.06 117.48 116.41 7.20 8.51e+03 <code>test_single_smma[large]</code> 12154 78.04 264.19 79.42 78.83 5.63 1.26e+04 <code>test_bulk_smma[large]</code> 2228 408.34 602.71 416.07 413.32 14.81 2.40e+03 <code>test_single_ema[large]</code> 12492 77.96 255.22 79.29 78.72 5.44 1.26e+04 <code>test_bulk_ema[large]</code> 2185 412.97 719.08 420.28 417.06 15.11 2.38e+03 <code>test_single_bollinger[large]</code> 164637 0.67 58.98 0.72 0.70 0.53 1.38e+06 <code>test_bulk_bollinger[large]</code> 376 395.41 695.60 405.92 396.95 30.66 2.46e+03 <code>test_single_macd[large]</code> 100181 3.17 183.57 3.28 3.26 1.11 3.05e+05 <code>test_bulk_macd[large]</code> 158 6278.97 6910.83 6359.96 6353.39 68.80 1.57e+02 <code>test_single_rsi[large]</code> 156986 0.65 57.35 0.70 0.69 0.49 1.43e+06 <code>test_bulk_rsi[large]</code> 1475 647.78 780.19 656.96 651.97 17.29 1.52e+03"},{"location":"benchmarks/standard-indicators/medium/","title":"Medium Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_sma[medium]</code> 33068 17.54 37.93 17.89 17.89 0.28 5.59e+04 <code>test_bulk_sma[medium]</code> 12700 57.65 93.39 58.42 58.32 0.92 1.71e+04 <code>test_single_smma[medium]</code> 23852 35.82 90.22 36.09 36.04 0.63 2.77e+04 <code>test_bulk_smma[medium]</code> 4272 202.37 304.20 204.88 204.61 2.61 4.88e+03 <code>test_single_ema[medium]</code> 22728 35.82 64.35 36.21 36.17 0.52 2.76e+04 <code>test_bulk_ema[medium]</code> 4445 204.93 246.65 207.10 207.17 1.73 4.83e+03 <code>test_single_bollinger[medium]</code> 165646 0.68 27.69 0.73 0.72 0.12 1.37e+06 <code>test_bulk_bollinger[medium]</code> 381 192.50 251.08 196.26 193.45 8.02 5.10e+03 <code>test_single_macd[medium]</code> 104855 3.18 80.74 3.27 3.26 0.33 3.06e+05 <code>test_bulk_macd[medium]</code> 318 3092.46 3294.79 3136.57 3146.56 23.73 3.19e+02 <code>test_single_rsi[medium]</code> 174734 0.65 25.80 0.70 0.69 0.12 1.44e+06 <code>test_bulk_rsi[medium]</code> 2969 317.91 367.97 320.73 320.35 2.19 3.12e+03"},{"location":"benchmarks/standard-indicators/small/","title":"Small Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_sma[small]</code> 50610 3.72 49.04 3.83 3.81 0.73 2.61e+05 <code>test_bulk_sma[small]</code> 39301 10.74 225.91 11.45 11.41 2.04 8.74e+04 <code>test_single_smma[small]</code> 86814 6.37 345.80 6.66 6.50 3.50 1.50e+05 <code>test_bulk_smma[small]</code> 22959 38.07 280.78 39.13 38.93 2.77 2.56e+04 <code>test_single_ema[small]</code> 98184 6.43 256.67 6.57 6.54 1.22 1.52e+05 <code>test_bulk_ema[small]</code> 20165 38.59 126.68 39.55 39.28 2.39 2.53e+04 <code>test_single_bollinger[small]</code> 82190 0.57 5.90 0.61 0.61 0.06 1.63e+06 <code>test_bulk_bollinger[small]</code> 17292 36.22 258.06 37.40 37.20 2.88 2.67e+04 <code>test_single_macd[small]</code> 118428 3.18 282.65 3.27 3.24 1.06 3.06e+05 <code>test_bulk_macd[small]</code> 1729 552.22 687.36 558.35 555.80 9.94 1.79e+03 <code>test_single_rsi[small]</code> 88379 0.54 5.60 0.58 0.58 0.06 1.72e+06 <code>test_bulk_rsi[small]</code> 14336 59.07 181.28 60.00 59.68 3.08 1.67e+04"},{"location":"benchmarks/strength-indicators/large/","title":"Large Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_accumulation_distribution[large]</code> 185564 0.22 43.57 0.25 0.24 0.20 4.07e+06 <code>test_bulk_accumulation_distribution[large]</code> 4041 188.59 472.28 191.33 189.65 9.85 5.23e+03 <code>test_single_volume_index[large]</code> 83592 0.11 1.43 0.12 0.12 0.01 8.63e+06 <code>test_bulk_positive_volume_index[large]</code> 6318 120.74 312.89 122.40 121.46 5.99 8.17e+03 <code>test_bulk_negative_volume_index[large]</code> 6885 121.89 305.13 124.05 123.17 6.47 8.06e+03 <code>test_single_rvi[large-simple]</code> 5609 161.59 332.09 166.62 165.28 8.08 6.00e+03 <code>test_single_rvi[large-smoothed]</code> 3797 247.08 542.09 252.97 251.06 10.27 3.95e+03 <code>test_single_rvi[large-exponential]</code> 3871 244.17 394.35 250.83 249.00 9.53 3.99e+03 <code>test_single_rvi[large-median]</code> 3066 258.78 525.72 266.46 263.59 14.35 3.75e+03 <code>test_single_rvi[large-mode]</code> 3229 272.63 441.61 295.38 293.63 10.96 3.39e+03 <code>test_bulk_rvi[large-simple]</code> 859 1059.65 1309.60 1116.23 1109.76 20.01 8.96e+02 <code>test_bulk_rvi[large-smoothed]</code> 631 1552.53 1993.08 1611.38 1603.38 25.68 6.21e+02 <code>test_bulk_rvi[large-exponential]</code> 604 1593.45 1773.27 1607.70 1599.88 20.31 6.22e+02 <code>test_bulk_rvi[large-median]</code> 317 3063.53 3505.44 3163.21 3155.57 40.78 3.16e+02 <code>test_bulk_rvi[large-mode]</code> 178 5553.12 6108.55 5652.71 5648.68 48.61 1.77e+02"},{"location":"benchmarks/strength-indicators/medium/","title":"Medium Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_accumulation_distribution[medium]</code> 179986 0.24 8.35 0.25 0.24 0.04 4.02e+06 <code>test_bulk_accumulation_distribution[medium]</code> 8294 92.22 271.93 94.05 93.80 2.78 1.06e+04 <code>test_single_volume_index[medium]</code> 196348 0.12 3.88 0.12 0.12 0.01 8.08e+06 <code>test_bulk_positive_volume_index[medium]</code> 11576 60.46 228.58 61.13 60.93 2.09 1.64e+04 <code>test_bulk_negative_volume_index[medium]</code> 12800 61.41 111.11 62.36 62.19 1.36 1.60e+04 <code>test_single_rvi[medium-simple]</code> 10456 82.78 162.70 84.92 84.72 1.85 1.18e+04 <code>test_single_rvi[medium-smoothed]</code> 7662 118.57 156.26 120.81 120.72 1.58 8.28e+03 <code>test_single_rvi[medium-exponential]</code> 7686 118.24 161.04 120.41 120.20 1.71 8.30e+03 <code>test_single_rvi[medium-median]</code> 5799 125.69 171.24 128.60 128.11 2.50 7.78e+03 <code>test_single_rvi[medium-mode]</code> 6171 135.72 219.11 148.00 148.00 3.03 6.76e+03 <code>test_bulk_rvi[medium-simple]</code> 1757 523.52 667.93 550.46 549.78 6.59 1.82e+03 <code>test_bulk_rvi[medium-smoothed]</code> 1266 767.95 888.84 794.60 793.84 6.34 1.26e+03 <code>test_bulk_rvi[medium-exponential]</code> 1268 767.21 976.32 793.73 792.60 8.89 1.26e+03 <code>test_bulk_rvi[medium-median]</code> 618 1550.82 1799.23 1582.92 1581.70 15.22 6.32e+02 <code>test_bulk_rvi[medium-mode]</code> 353 2747.57 2984.01 2791.60 2784.38 21.02 3.58e+02"},{"location":"benchmarks/strength-indicators/small/","title":"Small Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_accumulation_distribution[small]</code> 193574 0.22 44.93 0.25 0.26 0.15 3.96e+06 <code>test_bulk_accumulation_distribution[small]</code> 38083 18.85 137.98 19.99 19.95 1.98 5.00e+04 <code>test_single_volume_index[small]</code> 84374 0.11 1.10 0.12 0.12 0.01 8.65e+06 <code>test_bulk_positive_volume_index[small]</code> 51333 11.63 158.91 12.67 12.74 1.62 7.89e+04 <code>test_bulk_negative_volume_index[small]</code> 39970 12.57 134.24 13.15 13.00 1.78 7.60e+04 <code>test_single_rvi[small-simple]</code> 42286 16.78 126.89 17.44 17.35 1.72 5.73e+04 <code>test_single_rvi[small-smoothed]</code> 37088 22.17 171.98 22.84 22.72 2.02 4.38e+04 <code>test_single_rvi[small-exponential]</code> 35021 22.11 147.13 22.72 22.59 1.90 4.40e+04 <code>test_single_rvi[small-median]</code> 26291 23.87 148.74 24.63 24.48 2.09 4.06e+04 <code>test_single_rvi[small-mode]</code> 24086 29.98 179.82 32.23 32.37 2.48 3.10e+04 <code>test_bulk_rvi[small-simple]</code> 8160 99.41 215.07 105.01 104.48 4.04 9.52e+03 <code>test_bulk_rvi[small-smoothed]</code> 6426 145.52 305.93 151.17 150.43 4.83 6.62e+03 <code>test_bulk_rvi[small-exponential]</code> 6251 145.04 260.72 150.93 150.15 5.04 6.63e+03 <code>test_bulk_rvi[small-median]</code> 2990 273.11 394.08 280.92 279.50 7.40 3.56e+03 <code>test_bulk_rvi[small-mode]</code> 1697 512.82 756.30 523.15 519.10 12.50 1.91e+03"},{"location":"benchmarks/trend-indicators/large/","title":"Large Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_aroon_up[large]</code> 14839 38.44 87.67 38.96 38.76 2.23 2.57e+04 <code>test_bulk_aroon_up[large]</code> 4510 184.37 430.23 186.17 184.91 7.21 5.37e+03 <code>test_single_aroon_down[large]</code> 20809 40.41 248.00 40.95 40.69 2.99 2.44e+04 <code>test_bulk_aroon_down[large]</code> 4272 196.04 487.71 198.27 197.06 7.67 5.04e+03 <code>test_single_aroon_oscillator[large]</code> 85035 0.11 1.70 0.11 0.11 0.01 8.80e+06 <code>test_bulk_aroon_oscillator[large]</code> 7866 110.96 357.93 113.65 113.08 5.61 8.80e+03 <code>test_single_aroon_indicator[large]</code> 11598 78.13 215.50 79.19 78.54 4.64 1.26e+04 <code>test_bulk_aroon_indicator[large]</code> 387 502.49 763.70 536.70 508.14 47.19 1.86e+03 <code>test_single_long_parabolic[large]</code> 194251 0.12 2.56 0.13 0.13 0.02 7.84e+06 <code>test_single_short_parabolic[large]</code> 194251 0.12 5.76 0.13 0.13 0.03 7.75e+06 <code>test_bulk_parabolic[long-large]</code> 2591 338.43 699.57 344.41 341.84 12.85 2.90e+03 <code>test_bulk_parabolic[short-large]</code> 2771 340.28 833.66 347.81 342.64 21.10 2.88e+03 <code>test_bulk_dms[simple-large]</code> 106 481.47 1374.71 541.15 487.58 158.03 1.85e+03 <code>test_bulk_dms[smoothed-large]</code> 1347 671.10 1340.22 685.50 674.64 48.43 1.46e+03 <code>test_bulk_dms[exponential-large]</code> 1388 670.16 1343.02 682.75 674.36 43.38 1.46e+03 <code>test_bulk_dms[median-large]</code> 772 1220.39 1977.57 1240.25 1229.93 41.40 8.06e+02 <code>test_bulk_dms[mode-large]</code> 403 2394.61 3151.40 2424.95 2408.45 53.86 4.12e+02 <code>test_single_vpt[large]</code> 197785 0.12 2.36 0.13 0.13 0.02 7.81e+06 <code>test_bulk_vpt[large]</code> 6288 116.96 321.36 118.75 117.87 6.00 8.42e+03 <code>test_single_tsi[large-simple-simple]</code> 6649 140.91 357.69 142.20 141.39 5.50 7.03e+03 <code>test_single_tsi[large-simple-smoothed]</code> 1064 916.53 1012.02 924.42 920.37 11.54 1.08e+03 <code>test_single_tsi[large-simple-exponential]</code> 1058 918.37 1126.70 928.77 924.83 13.19 1.08e+03 <code>test_single_tsi[large-simple-median]</code> 348 2724.95 2851.52 2749.85 2741.35 20.41 3.64e+02 <code>test_single_tsi[large-simple-mode]</code> 142 7019.85 7282.04 7059.82 7064.77 29.61 1.42e+02 <code>test_single_tsi[large-smoothed-simple]</code> 4212 222.93 295.95 225.13 223.95 5.75 4.44e+03 <code>test_single_tsi[large-smoothed-smoothed]</code> 974 997.48 1134.63 1007.50 1003.32 11.91 9.93e+02 <code>test_single_tsi[large-smoothed-exponential]</code> 987 1000.94 1106.46 1012.30 1007.70 12.40 9.88e+02 <code>test_single_tsi[large-smoothed-median]</code> 333 2931.12 3129.57 2956.15 2944.25 25.62 3.38e+02 <code>test_single_tsi[large-smoothed-mode]</code> 139 7105.89 7328.08 7145.85 7149.94 29.14 1.40e+02 <code>test_single_tsi[large-exponential-simple]</code> 4206 222.84 427.71 225.03 223.80 6.70 4.44e+03 <code>test_single_tsi[large-exponential-smoothed]</code> 991 997.48 1216.22 1007.93 1003.18 14.43 9.92e+02 <code>test_single_tsi[large-exponential-exponential]</code> 975 1001.01 1129.74 1012.27 1007.79 12.99 9.88e+02 <code>test_single_tsi[large-exponential-median]</code> 334 2923.56 3076.95 2950.08 2940.14 22.85 3.39e+02 <code>test_single_tsi[large-exponential-mode]</code> 139 7101.96 7312.43 7142.63 7147.11 27.98 1.40e+02 <code>test_single_tsi[large-median-simple]</code> 3386 236.89 460.40 239.63 237.84 8.32 4.17e+03 <code>test_single_tsi[large-median-smoothed]</code> 894 1013.37 1117.74 1023.19 1018.16 13.71 9.77e+02 <code>test_single_tsi[large-median-exponential]</code> 948 1015.18 1268.18 1027.77 1022.63 16.05 9.73e+02 <code>test_single_tsi[large-median-median]</code> 332 2952.53 3097.88 2980.82 2972.78 20.99 3.35e+02 <code>test_single_tsi[large-median-mode]</code> 139 7101.50 7408.72 7145.56 7147.05 36.83 1.40e+02 <code>test_single_tsi[large-mode-simple]</code> 3796 238.60 404.19 260.43 260.10 7.91 3.84e+03 <code>test_single_tsi[large-mode-smoothed]</code> 961 1017.68 1286.93 1042.73 1038.79 15.41 9.59e+02 <code>test_single_tsi[large-mode-exponential]</code> 945 1021.61 1164.06 1048.39 1044.42 13.78 9.54e+02 <code>test_single_tsi[large-mode-median]</code> 329 2950.62 3327.09 2988.05 2978.84 29.01 3.35e+02 <code>test_single_tsi[large-mode-mode]</code> 140 7131.61 7439.39 7183.38 7186.46 32.61 1.39e+02 <code>test_bulk_tsi[large-simple-simple]</code> 430 2235.64 2547.61 2251.27 2242.19 24.20 4.44e+02 <code>test_bulk_tsi[large-simple-smoothed]</code> 92 10784.13 11030.44 10825.54 10821.34 32.89 9.24e+01 <code>test_bulk_tsi[large-simple-exponential]</code> 92 10899.00 11134.48 10926.57 10917.13 31.32 9.15e+01 <code>test_bulk_tsi[large-simple-median]</code> 28 35610.44 36201.43 35756.86 35709.99 125.33 2.80e+01 <code>test_bulk_tsi[large-simple-mode]</code> 11 95097.01 96275.36 95418.25 95178.38 405.93 1.05e+01 <code>test_bulk_tsi[large-smoothed-simple]</code> 329 3021.64 3239.83 3027.89 3025.34 14.95 3.30e+02 <code>test_bulk_tsi[large-smoothed-smoothed]</code> 87 11557.34 12117.25 11594.80 11595.01 60.94 8.62e+01 <code>test_bulk_tsi[large-smoothed-exponential]</code> 86 11641.97 11998.77 11664.88 11656.53 40.16 8.57e+01 <code>test_bulk_tsi[large-smoothed-median]</code> 28 36245.93 36534.73 36420.91 36457.68 96.18 2.75e+01 <code>test_bulk_tsi[large-smoothed-mode]</code> 11 95886.98 96313.76 96003.19 95914.01 162.24 1.04e+01 <code>test_bulk_tsi[large-exponential-simple]</code> 328 3030.91 3100.92 3038.78 3037.43 7.53 3.29e+02 <code>test_bulk_tsi[large-exponential-smoothed]</code> 87 11527.54 11646.62 11567.91 11567.19 20.11 8.64e+01 <code>test_bulk_tsi[large-exponential-exponential]</code> 86 11686.51 12555.07 11718.19 11699.69 92.97 8.53e+01 <code>test_bulk_tsi[large-exponential-median]</code> 28 36410.67 37133.18 36641.81 36645.52 159.45 2.73e+01 <code>test_bulk_tsi[large-exponential-mode]</code> 11 95923.97 96277.96 95984.07 95951.27 101.03 1.04e+01 <code>test_bulk_tsi[large-median-simple]</code> 209 4745.61 4958.81 4867.32 4874.50 27.43 2.05e+02 <code>test_bulk_tsi[large-median-smoothed]</code> 75 13277.92 13429.79 13296.46 13290.42 24.88 7.52e+01 <code>test_bulk_tsi[large-median-exponential]</code> 75 13369.36 13542.09 13407.63 13410.29 29.45 7.46e+01 <code>test_bulk_tsi[large-median-median]</code> 29 35343.61 35673.97 35461.62 35443.56 80.73 2.82e+01 <code>test_bulk_tsi[large-median-mode]</code> 11 97543.08 97946.27 97679.40 97657.82 100.65 1.02e+01 <code>test_bulk_tsi[large-mode-simple]</code> 128 7797.52 7911.06 7810.17 7807.26 14.21 1.28e+02 <code>test_bulk_tsi[large-mode-smoothed]</code> 61 16473.35 16618.52 16518.38 16515.02 23.84 6.05e+01 <code>test_bulk_tsi[large-mode-exponential]</code> 60 16798.43 16974.86 16835.05 16838.06 28.90 5.94e+01 <code>test_bulk_tsi[large-mode-median]</code> 26 38677.69 39258.76 38877.74 38894.82 163.95 2.57e+01 <code>test_bulk_tsi[large-mode-mode]</code> 10 100009.35 100487.67 100170.17 100101.91 167.42 9.98e+00"},{"location":"benchmarks/trend-indicators/medium/","title":"Medium Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_aroon_up[medium]</code> 28647 19.15 64.98 19.48 19.37 1.53 5.13e+04 <code>test_bulk_aroon_up[medium]</code> 8633 91.09 319.17 92.10 91.56 4.48 1.09e+04 <code>test_single_aroon_down[medium]</code> 41474 20.04 145.06 20.35 20.24 1.80 4.91e+04 <code>test_bulk_aroon_down[medium]</code> 8638 97.52 224.21 98.62 98.02 4.30 1.01e+04 <code>test_single_aroon_oscillator[medium]</code> 91836 0.10 1.22 0.11 0.11 0.01 9.27e+06 <code>test_bulk_aroon_oscillator[medium]</code> 15482 55.02 272.26 56.53 56.19 3.66 1.77e+04 <code>test_single_aroon_indicator[medium]</code> 22795 39.17 159.65 39.70 39.45 2.63 2.52e+04 <code>test_bulk_aroon_indicator[medium]</code> 386 242.04 451.25 247.21 243.03 16.03 4.05e+03 <code>test_single_long_parabolic[medium]</code> 194970 0.12 2.61 0.12 0.12 0.02 8.09e+06 <code>test_single_short_parabolic[medium]</code> 79764 0.12 1.59 0.12 0.12 0.01 8.12e+06 <code>test_bulk_parabolic[long-medium]</code> 5336 155.08 357.64 159.42 158.50 5.91 6.27e+03 <code>test_bulk_parabolic[short-medium]</code> 5828 157.32 344.53 159.65 158.74 6.17 6.26e+03 <code>test_bulk_dms[simple-medium]</code> 362 231.08 523.56 241.76 232.95 29.93 4.14e+03 <code>test_bulk_dms[smoothed-medium]</code> 2292 325.69 566.45 330.08 327.13 13.56 3.03e+03 <code>test_bulk_dms[exponential-medium]</code> 2790 325.23 570.49 331.15 328.12 14.67 3.02e+03 <code>test_bulk_dms[median-medium]</code> 1555 593.99 832.85 602.90 597.79 18.56 1.66e+03 <code>test_bulk_dms[mode-medium]</code> 747 1194.00 1490.38 1212.86 1205.43 26.22 8.25e+02 <code>test_single_vpt[medium]</code> 197785 0.12 3.62 0.12 0.12 0.02 8.03e+06 <code>test_bulk_vpt[medium]</code> 12599 58.54 204.02 59.92 59.65 3.55 1.67e+04 <code>test_single_tsi[medium-simple-simple]</code> 13210 70.02 229.43 70.76 70.37 3.43 1.41e+04 <code>test_single_tsi[medium-simple-smoothed]</code> 2034 453.17 539.14 458.04 455.84 8.02 2.18e+03 <code>test_single_tsi[medium-simple-exponential]</code> 2134 454.97 2887.38 460.85 457.91 53.05 2.17e+03 <code>test_single_tsi[medium-simple-median]</code> 719 1338.58 1424.41 1349.26 1346.17 12.53 7.41e+02 <code>test_single_tsi[medium-simple-mode]</code> 277 3555.73 3656.99 3569.14 3567.65 9.63 2.80e+02 <code>test_single_tsi[medium-smoothed-simple]</code> 8328 105.95 132.26 106.45 106.30 0.94 9.39e+03 <code>test_single_tsi[medium-smoothed-smoothed]</code> 2005 490.90 546.57 492.27 491.75 2.39 2.03e+03 <code>test_single_tsi[medium-smoothed-exponential]</code> 2001 491.05 548.25 494.20 493.58 2.74 2.02e+03 <code>test_single_tsi[medium-smoothed-median]</code> 702 1375.91 1452.32 1385.45 1383.10 10.86 7.22e+02 <code>test_single_tsi[medium-smoothed-mode]</code> 270 3591.65 3729.58 3603.33 3602.78 10.80 2.78e+02 <code>test_single_tsi[medium-exponential-simple]</code> 8745 105.35 135.22 105.88 105.74 1.00 9.44e+03 <code>test_single_tsi[medium-exponential-smoothed]</code> 2002 490.47 542.29 491.91 491.53 2.21 2.03e+03 <code>test_single_tsi[medium-exponential-exponential]</code> 1974 491.19 536.06 494.12 493.62 2.64 2.02e+03 <code>test_single_tsi[medium-exponential-median]</code> 661 1392.71 1513.66 1443.74 1444.45 10.12 6.93e+02 <code>test_single_tsi[medium-exponential-mode]</code> 274 3591.76 3682.60 3604.72 3603.88 7.89 2.77e+02 <code>test_single_tsi[medium-median-simple]</code> 6421 111.22 159.17 112.24 111.98 1.62 8.91e+03 <code>test_single_tsi[medium-median-smoothed]</code> 1911 495.25 563.66 498.10 497.34 3.41 2.01e+03 <code>test_single_tsi[medium-median-exponential]</code> 1894 497.06 551.99 500.56 499.69 3.14 2.00e+03 <code>test_single_tsi[medium-median-median]</code> 665 1406.86 1548.47 1457.54 1457.58 11.43 6.86e+02 <code>test_single_tsi[medium-median-mode]</code> 275 3592.30 3713.88 3604.65 3603.47 9.77 2.77e+02 <code>test_single_tsi[medium-mode-simple]</code> 7070 117.97 160.52 129.21 129.19 1.82 7.74e+03 <code>test_single_tsi[medium-mode-smoothed]</code> 1927 504.71 578.12 515.71 515.40 2.98 1.94e+03 <code>test_single_tsi[medium-mode-exponential]</code> 1904 505.43 582.70 518.64 517.82 3.52 1.93e+03 <code>test_single_tsi[medium-mode-median]</code> 663 1452.01 1533.91 1471.34 1470.84 7.24 6.80e+02 <code>test_single_tsi[medium-mode-mode]</code> 274 3613.86 3703.02 3629.28 3628.39 9.06 2.76e+02 <code>test_bulk_tsi[medium-simple-simple]</code> 896 1100.20 1174.09 1104.37 1103.91 4.31 9.05e+02 <code>test_bulk_tsi[medium-simple-smoothed]</code> 188 5291.92 5392.04 5309.29 5311.26 11.81 1.88e+02 <code>test_bulk_tsi[medium-simple-exponential]</code> 186 5351.83 5454.50 5360.67 5356.06 13.47 1.87e+02 <code>test_bulk_tsi[medium-simple-median]</code> 57 17589.27 17974.71 17722.68 17705.72 88.13 5.64e+01 <code>test_bulk_tsi[medium-simple-mode]</code> 22 46977.34 47163.53 47054.78 47050.67 44.80 2.13e+01 <code>test_bulk_tsi[medium-smoothed-simple]</code> 660 1487.84 1558.73 1491.22 1490.17 4.91 6.71e+02 <code>test_bulk_tsi[medium-smoothed-smoothed]</code> 175 5695.72 5798.71 5714.49 5714.04 11.92 1.75e+02 <code>test_bulk_tsi[medium-smoothed-exponential]</code> 174 5733.41 5842.65 5743.24 5741.59 11.36 1.74e+02 <code>test_bulk_tsi[medium-smoothed-median]</code> 60 16620.70 16812.37 16676.83 16675.23 35.87 6.00e+01 <code>test_bulk_tsi[medium-smoothed-mode]</code> 21 47346.49 47524.71 47461.81 47467.19 46.62 2.11e+01 <code>test_bulk_tsi[medium-exponential-simple]</code> 648 1491.60 1585.23 1495.75 1494.51 6.12 6.69e+02 <code>test_bulk_tsi[medium-exponential-smoothed]</code> 175 5680.28 5800.28 5698.19 5698.46 13.34 1.75e+02 <code>test_bulk_tsi[medium-exponential-exponential]</code> 174 5756.47 5825.82 5763.06 5760.75 9.79 1.74e+02 <code>test_bulk_tsi[medium-exponential-median]</code> 61 16509.83 16688.24 16586.13 16586.20 40.80 6.03e+01 <code>test_bulk_tsi[medium-exponential-mode]</code> 22 47228.18 47362.67 47281.91 47280.68 39.31 2.11e+01 <code>test_bulk_tsi[medium-median-simple]</code> 421 2315.13 2393.39 2331.23 2326.80 11.18 4.29e+02 <code>test_bulk_tsi[medium-median-smoothed]</code> 152 6511.62 6645.72 6530.45 6529.52 17.05 1.53e+02 <code>test_bulk_tsi[medium-median-exponential]</code> 151 6573.55 6684.13 6589.69 6584.18 15.88 1.52e+02 <code>test_bulk_tsi[medium-median-median]</code> 55 18297.97 18538.17 18390.85 18383.15 61.21 5.44e+01 <code>test_bulk_tsi[medium-median-mode]</code> 21 48293.35 48452.89 48358.65 48355.03 38.39 2.07e+01 <code>test_bulk_tsi[medium-mode-simple]</code> 269 3637.37 3762.45 3666.74 3665.99 13.16 2.73e+02 <code>test_bulk_tsi[medium-mode-smoothed]</code> 126 7897.52 8046.74 7934.28 7933.38 19.36 1.26e+02 <code>test_bulk_tsi[medium-mode-exponential]</code> 124 8060.32 8193.23 8087.99 8085.93 18.05 1.24e+02 <code>test_bulk_tsi[medium-mode-median]</code> 55 18315.41 18487.15 18379.36 18375.28 36.93 5.44e+01 <code>test_bulk_tsi[medium-mode-mode]</code> 21 49574.23 49688.07 49627.84 49625.96 31.57 2.01e+01"},{"location":"benchmarks/trend-indicators/small/","title":"Small Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_aroon_up[small]</code> 64363 4.20 74.59 4.33 4.32 0.61 2.31e+05 <code>test_bulk_aroon_up[small]</code> 22529 17.50 54.26 17.99 17.94 0.55 5.56e+04 <code>test_single_aroon_down[small]</code> 124132 4.11 271.76 4.29 4.28 0.87 2.33e+05 <code>test_bulk_aroon_down[small]</code> 38599 17.72 45.70 18.26 18.32 0.45 5.48e+04 <code>test_single_aroon_oscillator[small]</code> 91067 0.10 2.64 0.11 0.11 0.01 9.35e+06 <code>test_bulk_aroon_oscillator[small]</code> 60743 10.39 256.07 11.07 11.09 1.27 9.03e+04 <code>test_single_aroon_indicator[small]</code> 75954 8.22 266.65 8.38 8.35 1.14 1.19e+05 <code>test_bulk_aroon_indicator[small]</code> 12959 45.07 82.41 45.96 45.87 0.74 2.18e+04 <code>test_single_long_parabolic[small]</code> 199243 0.12 7.11 0.12 0.12 0.02 8.06e+06 <code>test_single_short_parabolic[small]</code> 78946 0.12 2.72 0.12 0.12 0.01 8.18e+06 <code>test_bulk_parabolic[long-small]</code> 28816 18.63 43.87 19.42 19.41 0.60 5.15e+04 <code>test_bulk_parabolic[short-small]</code> 29237 19.41 278.65 20.01 19.89 1.90 5.00e+04 <code>test_bulk_dms[simple-small]</code> 12842 44.24 83.98 45.77 45.59 1.75 2.18e+04 <code>test_bulk_dms[smoothed-small]</code> 11073 62.18 128.30 64.06 63.78 2.45 1.56e+04 <code>test_bulk_dms[exponential-small]</code> 9200 63.37 139.63 65.57 65.17 3.73 1.52e+04 <code>test_bulk_dms[median-small]</code> 6276 103.28 177.89 106.26 105.63 4.08 9.41e+03 <code>test_bulk_dms[mode-small]</code> 3677 217.00 310.00 221.43 220.65 5.78 4.52e+03 <code>test_single_vpt[small]</code> 196348 0.12 0.68 0.12 0.12 0.00 8.09e+06 <code>test_bulk_vpt[small]</code> 53203 11.57 45.67 12.50 12.65 0.53 8.00e+04 <code>test_single_tsi[small-simple-simple]</code> 44337 13.69 53.96 14.09 14.07 0.35 7.10e+04 <code>test_single_tsi[small-simple-smoothed]</code> 10855 84.67 106.87 85.01 84.93 0.62 1.18e+04 <code>test_single_tsi[small-simple-exponential]</code> 10576 84.72 106.54 85.38 85.30 0.67 1.17e+04 <code>test_single_tsi[small-simple-median]</code> 3698 241.69 279.99 250.27 250.01 1.73 4.00e+03 <code>test_single_tsi[small-simple-mode]</code> 1479 643.09 696.68 657.60 658.70 5.68 1.52e+03 <code>test_single_tsi[small-smoothed-simple]</code> 38135 18.70 38.26 18.91 18.89 0.26 5.29e+04 <code>test_single_tsi[small-smoothed-smoothed]</code> 10349 89.06 125.17 89.59 89.50 0.64 1.12e+04 <code>test_single_tsi[small-smoothed-exponential]</code> 10276 89.45 129.36 90.13 90.04 0.73 1.11e+04 <code>test_single_tsi[small-smoothed-median]</code> 3408 253.12 291.26 255.24 254.89 1.76 3.92e+03 <code>test_single_tsi[small-smoothed-mode]</code> 1469 646.48 699.16 662.19 663.22 5.63 1.51e+03 <code>test_single_tsi[small-exponential-simple]</code> 31972 18.22 46.17 18.76 18.74 0.34 5.33e+04 <code>test_single_tsi[small-exponential-smoothed]</code> 10343 89.39 159.11 89.76 89.67 0.90 1.11e+04 <code>test_single_tsi[small-exponential-exponential]</code> 10300 89.26 119.74 89.89 89.82 0.71 1.11e+04 <code>test_single_tsi[small-exponential-median]</code> 3476 252.76 288.02 255.28 254.93 1.67 3.92e+03 <code>test_single_tsi[small-exponential-mode]</code> 1473 646.20 701.38 661.99 663.00 5.74 1.51e+03 <code>test_single_tsi[small-median-simple]</code> 28140 20.65 48.89 20.90 20.85 0.40 4.79e+04 <code>test_single_tsi[small-median-smoothed]</code> 8480 91.24 116.19 91.66 91.54 0.73 1.09e+04 <code>test_single_tsi[small-median-exponential]</code> 9209 91.37 116.85 92.06 91.95 0.79 1.09e+04 <code>test_single_tsi[small-median-median]</code> 3463 256.50 297.97 258.83 258.36 1.88 3.86e+03 <code>test_single_tsi[small-median-mode]</code> 1455 649.46 721.01 664.38 665.44 5.92 1.51e+03 <code>test_single_tsi[small-mode-simple]</code> 29380 23.67 48.35 24.40 24.09 0.73 4.10e+04 <code>test_single_tsi[small-mode-smoothed]</code> 9657 94.02 120.69 95.03 94.70 0.93 1.05e+04 <code>test_single_tsi[small-mode-exponential]</code> 9659 94.65 168.34 95.60 95.35 1.14 1.05e+04 <code>test_single_tsi[small-mode-median]</code> 3396 258.25 289.30 260.80 260.37 1.81 3.83e+03 <code>test_single_tsi[small-mode-mode]</code> 1472 654.42 715.42 670.21 671.34 6.24 1.49e+03 <code>test_bulk_tsi[small-simple-simple]</code> 4908 194.23 233.49 195.19 195.02 1.05 5.12e+03 <code>test_bulk_tsi[small-simple-smoothed]</code> 1059 930.89 984.65 935.41 934.94 3.17 1.07e+03 <code>test_bulk_tsi[small-simple-exponential]</code> 1050 940.94 975.85 943.00 942.17 2.40 1.06e+03 <code>test_bulk_tsi[small-simple-median]</code> 319 3049.50 3220.91 3089.71 3067.80 50.59 3.24e+02 <code>test_bulk_tsi[small-simple-mode]</code> 124 8048.56 8163.71 8112.34 8112.27 19.85 1.23e+02 <code>test_bulk_tsi[small-smoothed-simple]</code> 3688 261.89 317.32 262.78 262.52 1.52 3.81e+03 <code>test_bulk_tsi[small-smoothed-smoothed]</code> 976 1002.24 1081.24 1006.41 1006.24 3.81 9.94e+02 <code>test_bulk_tsi[small-smoothed-exponential]</code> 981 1009.43 1050.48 1012.77 1012.94 2.98 9.87e+02 <code>test_bulk_tsi[small-smoothed-median]</code> 311 3134.50 3304.64 3173.65 3153.73 47.36 3.15e+02 <code>test_bulk_tsi[small-smoothed-mode]</code> 122 8087.45 8211.73 8134.50 8133.61 19.17 1.23e+02 <code>test_bulk_tsi[small-exponential-simple]</code> 3659 262.88 321.99 263.73 263.47 1.58 3.79e+03 <code>test_bulk_tsi[small-exponential-smoothed]</code> 990 999.09 1047.11 1003.86 1003.41 2.74 9.96e+02 <code>test_bulk_tsi[small-exponential-exponential]</code> 976 1014.96 1061.45 1017.14 1016.13 2.59 9.83e+02 <code>test_bulk_tsi[small-exponential-median]</code> 316 3121.69 3297.47 3158.93 3142.78 43.02 3.17e+02 <code>test_bulk_tsi[small-exponential-mode]</code> 122 8099.82 8234.32 8163.72 8163.83 21.17 1.22e+02 <code>test_bulk_tsi[small-median-simple]</code> 2198 395.97 437.10 398.02 397.47 2.08 2.51e+03 <code>test_bulk_tsi[small-median-smoothed]</code> 851 1134.73 1184.73 1139.32 1139.04 4.22 8.78e+02 <code>test_bulk_tsi[small-median-exponential]</code> 847 1146.26 1186.26 1149.29 1148.26 3.41 8.70e+02 <code>test_bulk_tsi[small-median-median]</code> 307 3191.86 3371.49 3215.29 3212.28 18.21 3.11e+02 <code>test_bulk_tsi[small-median-mode]</code> 120 8247.34 8416.75 8313.26 8312.72 20.14 1.20e+02 <code>test_bulk_tsi[small-mode-simple]</code> 1551 606.88 667.18 626.84 630.01 9.46 1.60e+03 <code>test_bulk_tsi[small-mode-smoothed]</code> 717 1356.69 1406.42 1373.82 1376.51 9.69 7.28e+02 <code>test_bulk_tsi[small-mode-exponential]</code> 705 1386.40 1452.62 1400.54 1400.88 8.57 7.14e+02 <code>test_bulk_tsi[small-mode-median]</code> 298 3303.69 3530.36 3347.74 3342.38 37.29 2.99e+02 <code>test_bulk_tsi[small-mode-mode]</code> 117 8479.57 8624.20 8553.09 8554.86 18.29 1.17e+02"},{"location":"benchmarks/volatility-indicators/large/","title":"Large Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_ulcer_index[large]</code> 146 6792.26 6883.00 6835.86 6853.75 28.69 1.46e+02 <code>test_bulk_ulcer_index[large]</code> 991 961.92 1105.03 971.76 964.42 19.92 1.03e+03 <code>test_bulk_volatility_system[large-simple]</code> 2600 326.17 520.64 332.47 328.93 15.31 3.01e+03 <code>test_bulk_volatility_system[large-smoothed]</code> 1889 501.56 1047.73 511.87 506.88 22.08 1.95e+03 <code>test_bulk_volatility_system[large-exponential]</code> 1886 509.04 1121.01 517.26 511.63 24.29 1.93e+03 <code>test_bulk_volatility_system[large-median]</code> 867 1096.01 1800.02 1113.09 1102.77 35.81 8.98e+02 <code>test_bulk_volatility_system[large-mode]</code> 432 2255.08 2805.16 2284.26 2267.51 40.47 4.38e+02"},{"location":"benchmarks/volatility-indicators/medium/","title":"Medium Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_ulcer_index[medium]</code> 585 1697.69 2104.08 1721.55 1702.17 53.06 5.81e+02 <code>test_bulk_ulcer_index[medium]</code> 1994 477.67 626.60 482.34 478.99 11.38 2.07e+03 <code>test_bulk_volatility_system[medium-simple]</code> 4961 162.71 527.14 166.19 164.69 9.01 6.02e+03 <code>test_bulk_volatility_system[medium-smoothed]</code> 3723 250.21 665.36 255.31 253.21 11.38 3.92e+03 <code>test_bulk_volatility_system[medium-exponential]</code> 3690 254.52 437.93 257.55 255.71 8.56 3.88e+03 <code>test_bulk_volatility_system[medium-median]</code> 1715 538.56 706.25 545.46 541.41 13.33 1.83e+03 <code>test_bulk_volatility_system[medium-mode]</code> 863 1113.10 1321.52 1126.33 1119.94 19.42 8.88e+02"},{"location":"benchmarks/volatility-indicators/small/","title":"Small Dataset","text":"Run Name Rounds Min (\u00b5s) Max (\u00b5s) Mean (\u00b5s) Median (\u00b5s) Stddev (\u00b5s) Ops/sec <code>test_single_ulcer_index[small]</code> 12591 67.81 110.58 68.21 67.93 2.75 1.47e+04 <code>test_bulk_ulcer_index[small]</code> 10508 90.02 273.06 90.82 90.35 3.86 1.10e+04 <code>test_bulk_volatility_system[small-simple]</code> 18225 32.67 165.74 33.61 33.37 2.58 2.98e+04 <code>test_bulk_volatility_system[small-smoothed]</code> 16504 49.82 183.96 50.94 50.61 3.21 1.96e+04 <code>test_bulk_volatility_system[small-exponential]</code> 16178 50.67 200.04 51.53 51.20 3.15 1.94e+04 <code>test_bulk_volatility_system[small-median]</code> 7536 95.95 349.23 97.84 97.13 5.18 1.02e+04 <code>test_bulk_volatility_system[small-mode]</code> 4074 210.10 306.21 217.65 216.46 6.20 4.59e+03"},{"location":"howto/","title":"How-To Guides","text":"<p>Practical, step-by-step guides for using PyTechnicalIndicators and optimizing your indicator workflows.</p>"},{"location":"howto/#guides","title":"Guides","text":"<ul> <li>Bulk vs Single Functions</li> <li>Choose Constant Model Type</li> <li>Choose Deviation Model</li> <li>Choose Period</li> <li>McGinley Dynamic Bands</li> </ul>"},{"location":"howto/bulk-vs-single/","title":"When to choose bulk vs single functions in PyTechnicalIndicators","text":"<p>This guide shows when to choose the bulk version of a function or the single version of a function using the Python package PyTechnicalIndicators.</p>"},{"location":"howto/bulk-vs-single/#goal","title":"\ud83c\udfaf Goal","text":"<ul> <li>Understand when to use bulk or single functions</li> </ul>"},{"location":"howto/bulk-vs-single/#requirements","title":"\ud83d\udce6 Requirements","text":"<p>Install PyTechnicalIndicators:</p> <pre><code>pip install pytechnicalindicators\n</code></pre>"},{"location":"howto/bulk-vs-single/#step-by-step","title":"\ud83d\udcbb Step-by-Step","text":""},{"location":"howto/bulk-vs-single/#1-what-period-are-you-using","title":"1. What period are you using?","text":"<p>Determine how much time (period) you want to include when computing the indicator (e.g., RSI period = 14).</p>"},{"location":"howto/bulk-vs-single/#2-observe-the-data","title":"2. Observe the data","text":"<p>Do you have just enough data to cover the period?</p> <ul> <li>If yes, you\u2019ll only be able to calculate a single value for the indicator.</li> </ul> <p>Do you have extra data?</p> <ul> <li>If yes, you\u2019ll be able to calculate multiple values over time (historical series).</li> </ul>"},{"location":"howto/bulk-vs-single/#3-what-is-your-goal","title":"3. What is your goal?","text":"<p>Will previous values for the indicator help you make a decision?</p> <ul> <li>If yes, make sure you collect enough data to compute previous values (use bulk).</li> <li>If no (e.g., streaming updates), compute just the latest value (use single).</li> </ul>"},{"location":"howto/bulk-vs-single/#4-example-rsi","title":"4. Example (RSI)","text":"<p>The default RSI often uses 14 previous prices. If you have 53 days of data you can:</p> <ul> <li>Use the bulk function to calculate the historical RSIs.</li> <li>When a new price comes in, use the single function on the latest window.</li> </ul> <pre><code>from pytechnicalindicators import momentum_indicators as mi\n\n# 53 example closing prices\ndata = [\n    6037.59, 5970.84, 5906.94, 5881.63, 5868.55, 5942.47, 5975.38, 5909.03,\n    5918.25, 5827.04, 5836.22, 5842.91, 5949.91, 5937.34, 5996.66, 6049.24,\n    6086.37, 6118.71, 6101.24, 6012.28, 6067.70, 6039.31, 6071.17, 6040.53,\n    5994.57, 6037.88, 6061.48, 6083.57, 6025.99, 6066.44, 6068.50, 6051.97,\n    6115.07, 6114.63, 6129.58, 6144.15, 6117.52, 6013.13, 5983.25, 5955.25,\n    5956.06, 5861.57, 5954.50, 5849.72, 5778.15, 5842.63, 5738.52, 5770.20,\n    5614.56, 5572.07, 5599.30, 5521.52, 5638.94\n]\n\nperiod = 14\nmodel = \"smoothed_moving_average\"  # options: \"simple_moving_average\", \"smoothed_moving_average\",\n                                   #          \"exponential_moving_average\", \"simple_moving_median\",\n                                   #          \"simple_moving_mode\"\n\n# 1) Bulk: compute historical RSI values\nrsi_series = mi.bulk.relative_strength_index(data, model, period)\nprint(\"Bulk RSIs:\", rsi_series)\n\n# 2) Single: compute the next/latest RSI when a new price arrives\nnew_price = 5769.21\ndata.append(new_price)\n\n# For period=14, use the latest 14 prices for single RSI\nlatest_window = data[-period:]\nlatest_rsi = mi.single.relative_strength_index(latest_window, model)\nprint(\"Single RSI:\", latest_rsi)\n</code></pre> <p>Notes:</p> <ul> <li>Valid <code>constant_model_type</code> values:</li> <li><code>simple_moving_average</code></li> <li><code>smoothed_moving_average</code></li> <li><code>exponential_moving_m_average</code></li> <li><code>simple_moving_median</code></li> <li><code>simple_moving_mode</code></li> </ul>"},{"location":"howto/bulk-vs-single/#example-output","title":"\ud83e\uddea Example Output","text":"<p>A runnable sample of the code can be found in <code>bulk_vs_single.py</code></p> <pre><code>Bulk RSIs: [47.49434607156126, 50.3221945432267, ..., 40.34609500741716]\nSingle RSI: 48.00106962275036\n</code></pre> <ul> <li>Use bulk when: calculating many historical values, initial setup, backtesting</li> <li>Use single when: real-time updates, streaming data, memory constraints</li> </ul>"},{"location":"howto/choose-constant-model-type/","title":"How to determine the best <code>constant_model_type</code> for a PyTechnicalIndicators function","text":"<p>This guide shows how to programmatically determine the best <code>constant_model_type</code> for your indicator using the Python package PyTechnicalIndicators.</p> <p>The rating model is overly simplified and should be refined to suit your needs before usage.</p>"},{"location":"howto/choose-constant-model-type/#goal","title":"\ud83c\udfaf Goal","text":"<ul> <li>Determine the best <code>constant_model_type</code> for the RSI from a year of data</li> </ul> <p>This guide assumes you can load price data from a CSV file (see the \"Get data from CSV\" section below).</p>"},{"location":"howto/choose-constant-model-type/#requirements","title":"\ud83d\udce6 Requirements","text":"<p>Install PyTechnicalIndicators:</p> <pre><code>pip install pytechnicalindicators\n</code></pre>"},{"location":"howto/choose-constant-model-type/#step-by-step","title":"\ud83d\udcbb Step-by-Step","text":""},{"location":"howto/choose-constant-model-type/#1-get-data-from-csv","title":"1. Get data from CSV","text":"<p>This example expects a CSV file with either:</p> <ul> <li>a header containing a \"close\" column (case-insensitive), or</li> <li>a single column of prices (no header)</li> </ul> <p>Example loader:</p> <pre><code>import csv\n\ndef load_prices_from_csv(path: str) -&gt; list[float]:\n    prices: list[float] = []\n    with open(path, \"r\", newline=\"\") as f:\n        # Try to read as DictReader first (with a header)\n        sample = f.read(4096)\n        f.seek(0)\n        has_header = \",\" in sample and any(ch.isalpha() for ch in sample.splitlines()[0])\n        if has_header:\n            reader = csv.DictReader(f)\n            # Find a 'close' column in a case-insensitive way\n            close_key = None\n            if reader.fieldnames:\n                for k in reader.fieldnames:\n                    if k and k.lower() == \"close\":\n                        close_key = k\n                        break\n            if close_key is None and reader.fieldnames:\n                # Fallback to the first column if 'close' not found\n                close_key = reader.fieldnames[0]\n            for row in reader:\n                try:\n                    prices.append(float(row[close_key]))\n                except (ValueError, TypeError, KeyError):\n                    continue\n        else:\n            # No header: read first column only\n            f.seek(0)\n            reader = csv.reader(f)\n            for row in reader:\n                if not row:\n                    continue\n                try:\n                    prices.append(float(row[0]))\n                except ValueError:\n                    continue\n    return prices\n</code></pre>"},{"location":"howto/choose-constant-model-type/#2-calculate-the-rsi-for-multiple-constant-models","title":"2. Calculate the RSI for multiple constant models","text":"<p>The default model for the RSI is a smoothed moving average.</p> <p>We\u2019ll test several models and compute the RSI series for each using the bulk function.</p> <pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nperiod = 14\nmodels = [\n    \"simple_moving_average\",\n    \"smoothed_moving_average\",\n    \"exponential_moving_average\",\n    \"simple_moving_median\",\n    \"simple_moving_mode\",\n]\n\n# Example: prices = load_prices_from_csv(\"data.csv\")\n# rsi_series = mi.bulk.relative_strength_index(prices, model, period)\n</code></pre>"},{"location":"howto/choose-constant-model-type/#3-rate-each-rsi-to-find-the-best","title":"3. Rate each RSI to find the best","text":"<p>The logic is overly simple for the purpose of the guide.</p> <ul> <li>If RSI &gt; 70 (overbought) and the next price &lt; current price, the model gets +1</li> <li>If RSI &lt; 30 (oversold) and the next price &gt; current price, the model gets +1</li> </ul> <p>We normalize the score by the number of \"attempts\" (how many times we evaluated a signal).</p> <pre><code>def choose_best_rsi_model(prices: list[float], period: int = 14) -&gt; tuple[str, float]:\n    from pytechnicalindicators import momentum_indicators as mi\n\n    models = [\n        \"simple_moving_average\",\n        \"smoothed_moving_average\",\n        \"exponential_moving_average\",\n        \"simple_moving_median\",\n        \"simple_moving_mode\",\n    ]\n\n    best_rating = -1.0\n    best_model = models[0]\n\n    for m in models:\n        rsi = mi.bulk.relative_strength_index(prices, m, period)\n\n        current_rating = 0.0\n        attempts = 0.0\n\n        # rsi[0] corresponds to prices[period], so align indices accordingly\n        for i in range(period, len(prices) - 1):\n            rsi_val = rsi[i - period]\n\n            # Overbought condition: expect price drop next step\n            if rsi_val &gt; 70.0:\n                attempts += 1.0\n                if prices[i + 1] &lt; prices[i]:\n                    current_rating += 1.0\n\n            # Oversold condition: expect price rise next step\n            if rsi_val &lt; 30.0:\n                attempts += 1.0\n                if prices[i + 1] &gt; prices[i]:\n                    current_rating += 1.0\n\n        average_rating = (current_rating / attempts) if attempts &gt; 0 else 0.0\n        if average_rating &gt; best_rating:\n            best_rating = average_rating\n            best_model = m\n\n    return best_model, best_rating\n</code></pre>"},{"location":"howto/choose-constant-model-type/#4-full-example","title":"4. Full example","text":"<pre><code>import sys\nfrom pytechnicalindicators import momentum_indicators as mi\n\n# Reuse load_prices_from_csv and choose_best_rsi_model from above\n\ndef main():\n    if len(sys.argv) &lt; 2:\n        print(\"Usage: python choose_constant_model_type.py &lt;path_to_csv&gt;\")\n        sys.exit(1)\n\n    csv_path = sys.argv[1]\n    prices = load_prices_from_csv(csv_path)\n\n    print(f\"Loaded {len(prices)} prices\")\n\n    if len(prices) &lt; 15:\n        print(\"Not enough data to compute RSI with period 14.\")\n        sys.exit(1)\n\n    best_model, best_rating = choose_best_rsi_model(prices, period=14)\n    print(f\"Best model for RSI is {best_model} with a rating of {best_rating}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"howto/choose-constant-model-type/#output","title":"\ud83e\uddea Output","text":"<p>A runnable sample of the code can be found in <code>choose_constant_model_type.py</code></p> <pre><code>Loaded 251 prices\nBest model for RSI is simple_moving_average with a rating of 0.5625\n</code></pre>"},{"location":"howto/choose-constant-model-type/#next-steps","title":"\u2705 Next Steps","text":"<ul> <li>Programmatically choose a period (e.g., grid search over common RSI periods like 7, 14, 21)</li> <li>Combine period selection and constant model selection</li> <li>Introduce the notion of punishment to the rating system (e.g., penalize false signals or whipsaws)</li> </ul>"},{"location":"howto/choose-deviation-model/","title":"How to determine the best <code>deviation_model</code> for a PyTechnicalIndicators function","text":"<p>This guide shows how to programmatically determine the best <code>deviation_model</code> for your indicator using the Python package PyTechnicalIndicators.</p> <p>The rating model is overly simplified and should be refined to suit your needs before usage.</p>"},{"location":"howto/choose-deviation-model/#goal","title":"\ud83c\udfaf Goal","text":"<ul> <li>Determine the best <code>deviation_model</code> for the Moving Constant Bands from a year of data</li> </ul> <p>This guide assumes you can load price data from a CSV file (see the \"Get data from CSV\" section below).</p>"},{"location":"howto/choose-deviation-model/#requirements","title":"\ud83d\udce6 Requirements","text":"<p>Install PyTechnicalIndicators:</p> <pre><code>pip install pytechnicalindicators\n</code></pre>"},{"location":"howto/choose-deviation-model/#step-by-step","title":"\ud83d\udcbb Step-by-Step","text":""},{"location":"howto/choose-deviation-model/#1-get-data-from-csv","title":"1. Get data from CSV","text":"<p>This example expects a CSV file with either</p> <ul> <li>a header containing a \"close\" column (case-insensitive), or</li> <li>a single column of prices (no header)</li> </ul> <p>Example loader:</p> <pre><code>import csv\n\ndef load_prices_from_csv(path: str) -&gt; list[float]:\n    prices: list[float] = []\n    with open(path, \"r\", newline=\"\") as f:\n        # Try to read as DictReader first (with a header)\n        sample = f.read(4096)\n        f.seek(0)\n        has_header = \",\" in sample and any(ch.isalpha() for ch in sample.splitlines()[0])\n        if has_header:\n            reader = csv.DictReader(f)\n            # Find a 'close' column in a case-insensitive way\n            close_key = None\n            if reader.fieldnames:\n                for k in reader.fieldnames:\n                    if k and k.lower() == \"close\":\n                        close_key = k\n                        break\n            if close_key is None and reader.fieldnames:\n                # Fallback to the first column if 'close' not found\n                close_key = reader.fieldnames[0]\n            for row in reader:\n                try:\n                    prices.append(float(row[close_key]))\n                except (ValueError, TypeError, KeyError):\n                    continue\n        else:\n            # No header: read first column only\n            f.seek(0)\n            reader = csv.reader(f)\n            for row in reader:\n                if not row:\n                    continue\n                try:\n                    prices.append(float(row[0]))\n                except ValueError:\n                    continue\n    return prices\n</code></pre>"},{"location":"howto/choose-deviation-model/#2-calculate-moving-constant-bands-for-multiple-deviation-models","title":"2. Calculate moving constant bands for multiple deviation models","text":"<p>The default deviation model is the standard deviation; however other models may provide more insight.</p> <p>We\u2019ll test several deviation models while keeping the constant model fixed (e.g., exponential moving average), a deviation multiplier (e.g., 2.0), and a short period (e.g., 5) for illustration.</p> <pre><code>from pytechnicalindicators import candle_indicators as ci\n\nperiod = 5\ndeviation_multiplier = 2.0\nconstant_model = \"exponential\"  # or \"exponential_moving_average\"\n\ndeviation_models = [\n    \"standard\",  # or \"standard_deviation\"\n    \"mean\",      # or \"mean_absolute_deviation\"\n    \"median\",    # or \"median_absolute_deviation\"\n    \"mode\",      # or \"mode_absolute_deviation\"\n    \"ulcer\",     # or \"ulcer_index\"\n]\n\n# Example:\n# bands = ci.bulk.moving_constant_bands(prices, constant_model, dev_model, deviation_multiplier, period)\n</code></pre>"},{"location":"howto/choose-deviation-model/#3-rate-each-model-to-find-the-best","title":"3. Rate each model to find the best","text":"<p>The logic is overly simple for the purpose of the guide.</p> <ul> <li>If price &gt; upper band (overbought) and next price &lt; current price, model gets +1</li> <li>If price &lt; lower band (oversold) and next price &gt; current price, model gets +1</li> </ul> <p>We normalize the score by the number of \"attempts\" (how many times we evaluated a signal).</p> <p>Important: <code>moving_constant_bands</code> returns tuples ordered as (<code>lower_band</code>, <code>moving_constant</code>, <code>upper_band</code>). Align the band window to the price index i using <code>bands_idx = i - (period - 1)</code>.</p> <pre><code>def choose_best_deviation_model(\n    prices: list[float],\n    constant_model_type: str = \"exponential\",\n    deviation_multiplier: float = 2.0,\n    period: int = 5,\n) -&gt; tuple[str, float]:\n    from pytechnicalindicators import candle_indicators as ci\n\n    deviation_models = [\n        \"standard\",  # or \"standard_deviation\"\n        \"mean\",      # or \"mean_absolute_deviation\"\n        \"median\",    # or \"median_absolute_deviation\"\n        \"mode\",      # or \"mode_absolute_deviation\"\n        \"ulcer\",     # or \"ulcer_index\"\n    ]\n\n    best_rating = -1.0\n    best_model = deviation_models[0]\n\n    for dm in deviation_models:\n        bands = ci.bulk.moving_constant_bands(\n            prices,\n            constant_model_type,\n            dm,\n            deviation_multiplier,\n            period,\n        )\n        # bands[k] corresponds to price index i = k + (period - 1)\n\n        current_rating = 0.0\n        attempts = 0.0\n\n        for i in range(period - 1, len(prices) - 1):\n            bands_idx = i - (period - 1)\n            lower_band, _, upper_band = bands[bands_idx]\n\n            # Overbought: expect next price to fall\n            if prices[i] &gt; upper_band:\n                attempts += 1.0\n                if prices[i + 1] &lt; prices[i]:\n                    current_rating += 1.0\n\n            # Oversold: expect next price to rise\n            if prices[i] &lt; lower_band:\n                attempts += 1.0\n                if prices[i + 1] &gt; prices[i]:\n                    current_rating += 1.0\n\n        average_rating = (current_rating / attempts) if attempts &gt; 0 else 0.0\n        if average_rating &gt; best_rating:\n            best_rating = average_rating\n            best_model = dm\n\n    return best_model, best_rating\n</code></pre>"},{"location":"howto/choose-deviation-model/#4-full-example","title":"4. Full example","text":"<pre><code>import sys\n\n# Reuse load_prices_from_csv and choose_best_deviation_model from above\n\ndef main():\n    if len(sys.argv) &lt; 2:\n        print(\"Usage: python choose_deviation_model.py &lt;path_to_csv&gt;\")\n        sys.exit(1)\n\n    csv_path = sys.argv[1]\n    prices = load_prices_from_csv(csv_path)\n\n    print(f\"Loaded {len(prices)} prices\")\n\n    if len(prices) &lt; 5:\n        print(\"Not enough data to compute moving constant bands with period 5.\")\n        sys.exit(1)\n\n    best_model, best_rating = choose_best_deviation_model(\n        prices,\n        constant_model_type=\"exponential\",  # keep constant model fixed for this search\n        deviation_multiplier=2.0,\n        period=5,\n    )\n    print(f\"Best model for moving constant bands is {best_model} with a rating of {best_rating}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"howto/choose-deviation-model/#output","title":"\ud83e\uddea Output","text":"<p>A runnable sample of the code can be found in <code>choose_deviation_model.py</code></p> <pre><code>Loaded 251 prices\nBest model for moving constant bands is median with a rating of 0.6666666666666666\n</code></pre>"},{"location":"howto/choose-deviation-model/#next-steps","title":"\u2705 Next Steps","text":"<ul> <li>Programmatically choose a period</li> <li>Programmatically choose a <code>constant_model_type</code></li> <li>Programmatically choose a deviation multiplier</li> <li>Combine all selections</li> <li>Introduce the notion of punishment to the rating system (e.g., penalize false signals/whipsaws)</li> </ul>"},{"location":"howto/choose-period/","title":"How to determine the best period for a PyTechnicalIndicators function","text":"<p>This guide shows how to programmatically determine the best period for your indicator using the Python package PyTechnicalIndicators.</p> <p>The rating model is overly simplified and should be refined to suit your needs before usage.</p>"},{"location":"howto/choose-period/#goal","title":"\ud83c\udfaf Goal","text":"<ul> <li>Determine the best period for the RSI from a year of data</li> </ul> <p>This guide assumes you can load price data from a CSV file (see the \"Get data from CSV\" section below).</p>"},{"location":"howto/choose-period/#requirements","title":"\ud83d\udce6 Requirements","text":"<p>Install PyTechnicalIndicators:</p> <pre><code>pip install pytechnicalindicators\n</code></pre>"},{"location":"howto/choose-period/#step-by-step","title":"\ud83d\udcbb Step-by-Step","text":""},{"location":"howto/choose-period/#1-get-data-from-csv","title":"1. Get data from CSV","text":"<p>This example expects a CSV file with either:</p> <ul> <li>a header containing a \"close\" column (case-insensitive), or</li> <li>a single column of prices (no header)</li> </ul> <p>Example loader:</p> <pre><code>import csv\n\ndef load_prices_from_csv(path: str) -&gt; list[float]:\n    prices: list[float] = []\n    with open(path, \"r\", newline=\"\") as f:\n        # Try to read as DictReader first (with a header)\n        sample = f.read(4096)\n        f.seek(0)\n        has_header = \",\" in sample and any(ch.isalpha() for ch in sample.splitlines()[0])\n        if has_header:\n            reader = csv.DictReader(f)\n            # Find a 'close' column in a case-insensitive way\n            close_key = None\n            if reader.fieldnames:\n                for k in reader.fieldnames:\n                    if k and k.lower() == \"close\":\n                        close_key = k\n                        break\n            if close_key is None and reader.fieldnames:\n                # Fallback to the first column if 'close' not found\n                close_key = reader.fieldnames[0]\n            for row in reader:\n                try:\n                    prices.append(float(row[close_key]))\n                except (ValueError, TypeError, KeyError):\n                    continue\n        else:\n            # No header: read first column only\n            f.seek(0)\n            reader = csv.reader(f)\n            for row in reader:\n                if not row:\n                    continue\n                try:\n                    prices.append(float(row[0]))\n                except ValueError:\n                    continue\n    return prices\n</code></pre>"},{"location":"howto/choose-period/#2-calculate-the-rsi-for-multiple-periods","title":"2. Calculate the RSI for multiple periods","text":"<p>The default RSI period is 14. We\u2019ll iterate from 2 to 15 to see if a different period performs better (excluding 1 to avoid degenerate windows).</p> <pre><code>from pytechnicalindicators import momentum_indicators as mi\n\nmodel = \"smoothed_moving_average\"  # default for RSI\n# Example:\n# rsi_series = mi.bulk.relative_strength_index(prices, model, period)\n</code></pre>"},{"location":"howto/choose-period/#3-rate-each-different-rsi-to-find-the-best","title":"3. Rate each different RSI to find the best","text":"<p>The logic is overly simple for the purpose of the guide.</p> <ul> <li>If RSI &gt; 70 (overbought) and the next price &lt; current price, the period gets +1</li> <li>If RSI &lt; 30 (oversold) and the next price &gt; current price, the period gets +1</li> </ul> <p>We normalize the score by the number of \"attempts\" (how many times we evaluated a signal).</p> <p>Note: For period p, rsi[0] corresponds to prices index i = p (0-based). We\u2019ll align indices accordingly.</p> <pre><code>def choose_best_rsi_period(prices: list[float], min_p: int = 2, max_p: int = 15) -&gt; tuple[int, float]:\n    from pytechnicalindicators import momentum_indicators as mi\n\n    best_rating = -1.0\n    best_period = min_p\n    model = \"smoothed_moving_average\"\n\n    for p in range(min_p, max_p + 1):\n        rsi = mi.bulk.relative_strength_index(prices, model, p)\n\n        current_rating = 0.0\n        attempts = 0.0\n\n        # rsi[0] aligns with prices index i = p\n        for i in range(p, len(prices) - 1):\n            rsi_val = rsi[i - p]\n\n            # Overbought: expect price to fall next step\n            if rsi_val &gt; 70.0:\n                attempts += 1.0\n                if prices[i + 1] &lt; prices[i]:\n                    current_rating += 1.0\n\n            # Oversold: expect price to rise next step\n            if rsi_val &lt; 30.0:\n                attempts += 1.0\n                if prices[i + 1] &gt; prices[i]:\n                    current_rating += 1.0\n\n        average_rating = (current_rating / attempts) if attempts &gt; 0 else 0.0\n        if average_rating &gt; best_rating:\n            best_rating = average_rating\n            best_period = p\n\n    return best_period, best_rating\n</code></pre>"},{"location":"howto/choose-period/#4-full-example","title":"4. Full example","text":"<pre><code>import sys\n\n# Reuse load_prices_from_csv and choose_best_rsi_period from above\n\ndef main():\n    if len(sys.argv) &lt; 2:\n        print(\"Usage: python choose_period.py &lt;path_to_csv&gt;\")\n        sys.exit(1)\n\n    csv_path = sys.argv[1]\n    prices = load_prices_from_csv(csv_path)\n\n    print(f\"Loaded {len(prices)} prices\")\n\n    if len(prices) &lt; 16:\n        print(\"Not enough data to evaluate RSI periods up to 15.\")\n        sys.exit(1)\n\n    best_period, best_rating = choose_best_rsi_period(prices, min_p=2, max_p=15)\n    print(f\"Best period for RSI is {best_period} with a rating of {best_rating}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"howto/choose-period/#output","title":"\ud83e\uddea Output","text":"<p>A runnable sample of the code can be found in <code>choose_period.py</code></p> <pre><code>Loaded 251 prices\nBest period for RSI is 7 with a rating of 0.5555555555555556\n</code></pre>"},{"location":"howto/choose-period/#next-steps","title":"\u2705 Next Steps","text":"<ul> <li>Programmatically choose a constant model type)</li> <li>Combine period selection and constant model type selection</li> <li>Introduce the notion of punishment to the rating system (e.g., penalize false signals/whipsaws)</li> </ul>"},{"location":"howto/mcginley-dynamic/","title":"How to use McGinley Dynamic in PyTechnicalIndicators","text":"<p>This guide shows how to use the McGinley Dynamic bands with the Python package PyTechnicalIndicators. The same logic can be applied to other McGinley Dynamic functions.</p>"},{"location":"howto/mcginley-dynamic/#goal","title":"\ud83c\udfaf Goal","text":"<ul> <li>Use the McGinley Dynamic bands</li> </ul> <p>This guide assumes you can load price data from a CSV file (see the \"Get data from CSV\" section below).</p>"},{"location":"howto/mcginley-dynamic/#requirements","title":"\ud83d\udce6 Requirements","text":"<p>Install PyTechnicalIndicators:</p> <pre><code>pip install pytechnicalindicators\n</code></pre>"},{"location":"howto/mcginley-dynamic/#step-by-step","title":"\ud83d\udcbb Step-by-Step","text":""},{"location":"howto/mcginley-dynamic/#1-get-data-from-csv","title":"1. Get data from CSV","text":"<p>This example expects a CSV file with either:</p> <ul> <li>a header containing a \"close\" column (case-insensitive), or</li> <li>a single column of prices (no header)</li> </ul> <p>Example loader:</p> <pre><code>import csv\n\ndef load_prices_from_csv(path: str) -&gt; list[float]:\n    prices: list[float] = []\n    with open(path, \"r\", newline=\"\") as f:\n        # Try to read as DictReader first (with a header)\n        sample = f.read(4096)\n        f.seek(0)\n        has_header = \",\" in sample and any(ch.isalpha() for ch in sample.splitlines()[0])\n        if has_header:\n            reader = csv.DictReader(f)\n            # Find a 'close' column in a case-insensitive way\n            close_key = None\n            if reader.fieldnames:\n                for k in reader.fieldnames:\n                    if k and k.lower() == \"close\":\n                        close_key = k\n                        break\n            if close_key is None and reader.fieldnames:\n                # Fallback to the first column if 'close' not found\n                close_key = reader.fieldnames[0]\n            for row in reader:\n                try:\n                    prices.append(float(row[close_key]))\n                except (ValueError, TypeError, KeyError):\n                    continue\n        else:\n            # No header: read first column only\n            f.seek(0)\n            reader = csv.reader(f)\n            for row in reader:\n                if not row:\n                    continue\n                try:\n                    prices.append(float(row[0]))\n                except ValueError:\n                    continue\n    return prices\n</code></pre>"},{"location":"howto/mcginley-dynamic/#2-calculate-the-mcginley-dynamic-bands","title":"2. Calculate the McGinley Dynamic bands","text":"<p>The McGinley Dynamic uses a previously calculated value. If no previous McGinley Dynamic is available, use 0.0 for the first computation.</p> <pre><code>from pytechnicalindicators import candle_indicators as ci\n\n# Example setup\nperiod = 5\ndeviation_model = \"standard\"     # or \"standard_deviation\"\ndeviation_multiplier = 2.0\nprevious_mcginley_dynamic = 0.0  # none available on first run\n\n# prices = load_prices_from_csv(\"data.csv\")\nbands = ci.bulk.mcginley_dynamic_bands(\n    prices,\n    deviation_model,\n    deviation_multiplier,\n    previous_mcginley_dynamic,\n    period,\n)\n\nprint(\"Loaded\", len(prices), \"prices\")\nprint(\"Length of bands\", len(bands))\n# bands is a list of tuples: (lower_band, mcginley_dynamic, upper_band)\n</code></pre>"},{"location":"howto/mcginley-dynamic/#3-use-the-last-value-to-calculate-the-next-mcginley-band","title":"3. Use the last value to calculate the next McGinley band","text":"<p>From step 2, we now have a previous McGinley Dynamic (the middle value of the last tuple). When a new price comes in, compute the next band using the single function. Pass the latest period prices to align with the period used in bulk.</p> <pre><code># Next price comes in\nnew_price = 5689.24\nprices.append(new_price)\n\nlast_mcginley_dynamic = bands[-1][1]  # previous McGinley Dynamic from bulk result\n\n# Use the last 'period' prices for the single calculation\nlatest_window = prices[-period:]\n\nnext_band = ci.single.mcginley_dynamic_bands(\n    latest_window,\n    deviation_model,\n    deviation_multiplier,\n    last_mcginley_dynamic,\n)\n\nlower, mid, upper = next_band\nprint(f\"Lower band {lower}, McGinley dynamic {mid}, upper band {upper}\")\n</code></pre>"},{"location":"howto/mcginley-dynamic/#output","title":"\ud83e\uddea Output","text":"<p>A runnable sample of the code can be found in <code>mcginley_dynamic.py</code></p> <pre><code>Loaded 251 prices\nLength of bands 247\nLower band 5551.313227907162, McGinley dynamic 5665.614575300795, upper band 5779.9159226944275\n</code></pre>"},{"location":"howto/mcginley-dynamic/#next-steps","title":"\u2705 Next Steps","text":"<ul> <li>Programmatically choose a period</li> <li>Programmatically choose a <code>deviation_model</code></li> <li>Programmatically choose a deviation multiplier</li> <li>Combine all selections</li> <li>Introduce the notion of punishment to the rating system (e.g., penalize false signals/whipsaws)</li> </ul>"},{"location":"tutorials/","title":"Tutorials","text":"<p>Learn how to use PyTechnicalIndicators from basic data wrangling to advanced research workflows.</p>"},{"location":"tutorials/#tutorials_1","title":"Tutorials","text":"<ol> <li>Using PyTechnicalIndicators with pandas</li> <li>Visualizing Indicators with Plotly</li> <li>Advanced Usage of PyTechnicalIndicators</li> <li>Connecting to a Market Data API</li> </ol>"},{"location":"tutorials/advanced/","title":"Tutorial 3: Advanced Usage of PyTechnicalIndicators","text":"<p>In this tutorial we go deep on just one indicator: the Relative Strength Index (RSI). We will systematically compare different <code>constant_model_type</code> variants and periods, score their signals, and rank configurations. You can later apply the exact same framework to other indicators (see \u201cExtending Further\u201d).</p> <p>Series so far:</p> <ul> <li>01 - Using PyTechnicalIndicators with pandas</li> <li>02 - Using PyTechnicalIndicators with Plotly</li> <li>03 - Systematically Evaluating RSI Variants (this file)</li> <li>04 - Connecting to an API</li> </ul>"},{"location":"tutorials/advanced/#goal","title":"\ud83c\udfaf Goal","text":"<p>You will learn how to:</p> <ol> <li>Enumerate RSI variants via different <code>constant_model_type</code> values.</li> <li>Iterate across a period grid (e.g., 5\u201330).</li> <li>Generate oversold / overbought signals (long/short candidates).</li> <li>Score each signal using a forward-looking heuristic.</li> <li>Aggregate scores into a ranked table of configurations.</li> <li>Plan how to extend the same pattern to other indicators.</li> </ol>"},{"location":"tutorials/advanced/#why-focus-on-rsi","title":"\ud83e\udde9 Why Focus on RSI?","text":"<p>Keeping scope narrow:</p> <ul> <li>Makes the scoring logic clearer.</li> <li>Prevents tutorial bloat.</li> <li>Allows you to internalize the evaluation pattern before generalizing.</li> </ul>"},{"location":"tutorials/advanced/#variant-dimensions","title":"\ud83d\udd27 Variant Dimensions","text":"<p>We will vary:</p> Dimension Values (Example) <code>constant_model_type</code> <code>simple</code>, <code>smoothed</code>, <code>exponential</code>, <code>median</code>, <code>mode</code>"},{"location":"tutorials/advanced/#data-setup","title":"\ud83d\udcc2 Data Setup","text":"<pre><code>import pandas as pd\nimport pytechnicalindicators as pti\n\ndf = pd.read_csv(\"prices.csv\", parse_dates=[\"Date\"]).sort_values(\"Date\").reset_index(drop=True)\ndf = df.dropna(subset=[\"Open\",\"High\",\"Low\",\"Close\"])\nclose = df[\"Close\"].astype(float).tolist()\n</code></pre>"},{"location":"tutorials/advanced/#define-model-types-and-period","title":"\ud83d\udd27 Define Model Types and Period","text":"<pre><code>CONSTANT_MODELS = [\n    \"simple\",\n    \"smoothed\",\n    \"exponential\",\n    \"median\",\n    \"mode\"\n]\nRSI_PERIOD = 5\nOVERSOLD = 30.0\n</code></pre>"},{"location":"tutorials/advanced/#compute-rsi-variants-and-rate-signals","title":"\ud83e\uddee Compute RSI Variants and Rate Signals","text":"<pre><code>results = []\n\nfor ctype in CONSTANT_MODELS:\n    # Compute RSI for this model type\n    rsi_vals = pti.momentum_indicators.bulk.relative_strength_index(\n        close,\n        constant_model_type=ctype,\n        period=RSI_PERIOD\n    )\n    # The output is aligned to the tail, so index mapping:\n    start_idx = len(close) - len(rsi_vals)\n    rating = 0\n    total_signals = 0\n    for offset, rsi in enumerate(rsi_vals[:-1]):  # skip last (no future bar)\n        idx = start_idx + offset\n        price = close[idx]\n        if rsi &lt; OVERSOLD:\n            total_signals += 1\n            next_price = close[idx + 1]\n            if next_price &gt; price:\n                rating += 1\n    success_rate = rating / total_signals if total_signals &gt; 0 else 0.0\n    results.append({\n        \"model\": ctype,\n        \"period\": RSI_PERIOD,\n        \"signals\": total_signals,\n        \"correct_signals\": rating,\n        \"success_rate\": success_rate\n    })\n</code></pre>"},{"location":"tutorials/advanced/#present-the-results","title":"\ud83d\udcca Present the Results","text":"<pre><code>import pandas as pd\n\nscore_df = pd.DataFrame(results)\nscore_df = score_df.sort_values(\"success_rate\", ascending=False)\n\nprint(\"RSI Model Ratings (RSI &lt; 30, period=5):\")\nprint(score_df[[\"model\", \"period\", \"signals\", \"correct_signals\", \"success_rate\"]])\n\nbest = score_df.iloc[0]\nprint(f\"\\nBest model: {best['model']} (Success Rate: {best['success_rate']:.2%})\")\n</code></pre> <p>Example output:</p> <pre><code>RSI Model Ratings (RSI &lt; 30, period=5):\n         model  period  signals  correct_signals  success_rate\n3       median       5       43               24      0.558140\n0       simple       5       38               20      0.526316\n1     smoothed       5       41               21      0.512195\n4         mode       5       41               21      0.512195\n2  exponential       5       46               22      0.478261\n\nBest model: median (Success Rate: 55.81%)\n\n</code></pre>"},{"location":"tutorials/advanced/#interpreting-results","title":"\ud83e\udde0 Interpreting Results","text":"Column Description model The constant model type tested period RSI period used (fixed here at 5 for comparison) signals Number of \"buy\" signals (RSI &lt; 30) generated correct_signals Number of times the next price was higher (win) success_rate correct_signals / signals <ul> <li>A higher success rate suggests that the model/period pair gives better \"next bar up\" predictions when oversold.</li> <li>If <code>signals</code> is very low, results may not be reliable\u2014try longer history or adjust period.</li> </ul>"},{"location":"tutorials/advanced/#extending-further","title":"\ud83d\udcdd Extending Further","text":"<ul> <li>Try other periods (repeat the loop for different <code>RSI_PERIOD</code> values).</li> <li>Add \"sell\" signal evaluation (<code>RSI &gt; 70</code> and next bar down).</li> <li>Apply similar logic to other indicators (e.g., bands, moving averages).</li> <li>Try longer-forward horizons (e.g., check next N bars for improvement).</li> <li>Visualize where signals occurred on the price chart (see Tutorial 2).</li> </ul>"},{"location":"tutorials/advanced/#putting-it-all-together","title":"\ud83e\udde9 Putting It All Together","text":"<p>A runnable example of the full code can be found in <code>03_advanced_pytechnicalindicators.py</code></p>"},{"location":"tutorials/advanced/#disclaimer","title":"\ud83d\udee1\ufe0f Disclaimer","text":"<p>This is a didactic example, not a trading strategy. Success rate on \"next bar\" is just one toy metric\u2014real research requires out-of-sample testing, risk modeling, and more.</p>"},{"location":"tutorials/advanced/#next-step","title":"\u2705 Next Step","text":"<p>Continue to: 04 - Connecting to an API</p> <p>Happy model testing! \ud83e\udd80\ud83d\udc0d\ud83d\udcc8</p>"},{"location":"tutorials/api-connection/","title":"Tutorial 4: Connecting to a Market Data API","text":"<p>Learn how to fetch fresh OHLCV data from a public API, process it into a DataFrame, and analyze it with PyTechnicalIndicators. This workflow enables automated, up-to-date, and repeatable research pipelines.</p> <p>Series so far:</p> <ul> <li>01 - Using PyTechnicalIndicators with pandas</li> <li>02 - Using PyTechnicalIndicators with Plotly</li> <li>03 - Systematically Evaluating RSI Variants</li> <li>04 - Connecting to a Market Data API (this file)</li> </ul>"},{"location":"tutorials/api-connection/#goal","title":"\ud83c\udfaf Goal","text":"<ul> <li>Fetch OHLCV (Open, High, Low, Close, Volume) data from a free market data API</li> <li>Parse JSON into a pandas DataFrame</li> <li>Clean and align the data for use with PyTechnicalIndicators</li> <li>Run your existing indicator pipeline on fresh data</li> </ul>"},{"location":"tutorials/api-connection/#prerequisites","title":"\ud83d\udce6 Prerequisites","text":"<ul> <li>Python 3.10+</li> <li>pandas</li> <li>requests (for HTTP queries)</li> <li>PyTechnicalIndicators</li> </ul> <pre><code>pip install pandas requests pytechnicalindicators\n</code></pre>"},{"location":"tutorials/api-connection/#using-a-free-market-data-api-binance","title":"\ud83d\udd0d Using a Free Market Data API (Binance)","text":"<p>We'll use Binance's public API, which provides free cryptocurrency OHLCV data with no API key required.</p> <p>Docs: Binance API - Kline/Candlestick Data</p> <p>Example endpoint for daily candles of BTCUSDT:</p> <pre><code>https://api.binance.com/api/v3/klines?symbol=BTCUSDT&amp;interval=1d&amp;limit=365\n</code></pre> <ul> <li>Replace <code>BTCUSDT</code> with any supported crypto symbol.</li> <li><code>interval</code> can be <code>1d</code> (daily), <code>1h</code> (hourly), etc.</li> <li><code>limit</code> controls how many bars.</li> </ul>"},{"location":"tutorials/api-connection/#fetching-data-from-marketdataapp","title":"\ud83e\uddd1\u200d\ud83d\udcbb Fetching Data from marketdata.app","text":"<pre><code>import requests\nimport pandas as pd\n\ndef fetch_marketdata_ohlcv(symbol=\"BTCUSDT\", interval=\"1d\", limit=365):\n    url = \"https://api.binance.com/api/v3/klines\"\n    params = {\"symbol\": symbol, \"interval\": interval, \"limit\": limit}\n    resp = requests.get(url, params=params)\n    resp.raise_for_status()\n    data = resp.json()\n    # Binance returns a list of lists:\n    # [Open time, Open, High, Low, Close, Volume, Close time, ...]\n    df = pd.DataFrame(data, columns=[\n        \"OpenTime\", \"Open\", \"High\", \"Low\", \"Close\", \"Volume\",\n        \"CloseTime\", \"QuoteAssetVolume\", \"NumTrades\", \"TakerBuyBase\", \"TakerBuyQuote\", \"Ignore\"\n    ])\n    df[\"Date\"] = pd.to_datetime(df[\"OpenTime\"], unit=\"ms\")\n    cols = [\"Date\", \"Open\", \"High\", \"Low\", \"Close\", \"Volume\"]\n    df = df[cols].astype({\"Open\": float, \"High\": float, \"Low\": float, \"Close\": float, \"Volume\": float})\n    df = df.sort_values(\"Date\").reset_index(drop=True)\n    return df\n\n# Example usage\ndf = fetch_marketdata_ohlcv(symbol=\"BTCUSDT\", interval=\"1d\", limit=365)\nprint(df.head())\n</code></pre>"},{"location":"tutorials/api-connection/#running-indicators-on-api-data","title":"\u2699\ufe0f Running Indicators on API Data","text":"<p>You can now pass the <code>df</code> to the indicators just as we did in Tutorial 1.</p>"},{"location":"tutorials/api-connection/#visualization","title":"\ud83d\udcca Visualization","text":"<p>Use Plotly as shown in Tutorial 2 to quickly visualize live data with overlays:</p> <p></p>"},{"location":"tutorials/api-connection/#extending-further","title":"\ud83d\udd04 Extending Further","text":"<ul> <li>Loop over multiple symbols and concatenate results for batch analysis.</li> <li>Use your custom indicator pipelines from previous tutorials on this fresh data.</li> <li>Add logic to check for new bars and only update as needed.</li> <li>Save or visualize your results for reporting or algorithmic research.</li> </ul>"},{"location":"tutorials/api-connection/#putting-it-all-together","title":"\ud83e\udde9 Putting It All Together","text":"<p>A runnable example of the full code can be found in <code>04_api_connection</code></p>"},{"location":"tutorials/api-connection/#disclaimer","title":"\ud83d\udee1\ufe0f Disclaimer","text":"<p>Always observe API rate limits and terms of use. This example is for educational purposes; for production, add robust error handling and logging.</p> <p>Happy fetching! \ud83e\udd80\ud83d\udc0d\ud83c\udf10</p>"},{"location":"tutorials/pandas/","title":"Tutorial 1: Using PyTechnicalIndicators with pandas","text":"<p>Leverage Rust-powered speed inside familiar pandas workflows.</p> <p>This tutorial is the first in a series of tutorials:</p> <ul> <li>01 - Using PyTechnicalIndicators with pandas</li> <li>02 - Using PyTechnicalIndicators with Plotly</li> <li>03 - More advanced use cases for PyTechnicalIndicators</li> <li>04 - Connecting to an API</li> </ul>"},{"location":"tutorials/pandas/#goal","title":"\ud83c\udfaf Goal","text":"<p>In this tutorial you will learn how to:</p> <ul> <li>Install and import <code>pytechnicalindicators</code></li> <li>Load OHLCV price data into a pandas <code>DataFrame</code></li> <li>Convert columns to the list inputs expected by the library</li> <li>Call both <code>single</code> (scalar) and <code>bulk</code> (rolling / series) indicator functions</li> <li>Add indicator outputs back into your <code>DataFrame</code></li> <li>Understand parameter and model choices (e.g. different moving average types)</li> <li>Handle common pitfalls (NaNs, alignment, window offsets)</li> </ul>"},{"location":"tutorials/pandas/#prerequisites","title":"\ud83d\udce6 Prerequisites","text":"Requirement Notes Python 3.10+ (Match your environment; verify with <code>python --version</code>) pip / virtualenv Recommended to isolate dependencies pandas For data handling <p>Install basics:</p> <pre><code>python -m venv .venv\nsource .venv/bin/activate  # Windows: .venv\\Scripts\\activate\npip install pandas\n</code></pre> <p>Install PyTechnicalIndicators (assuming published wheel / build locally):</p> <pre><code>pip install pytechnicalindicators\n# OR (from source after cloning)\n# pip install maturin\n# maturin develop\n</code></pre>"},{"location":"tutorials/pandas/#library-structure-quick-recap","title":"\ud83e\uddf1 Library Structure (Quick Recap)","text":"<p>Modules are grouped by analysis area:</p> <ul> <li><code>standard_indicators</code></li> <li><code>momentum_indicators</code></li> <li><code>trend_indicators</code></li> <li><code>strength_indicators</code></li> <li><code>volatility_indicators</code></li> <li><code>candle_indicators</code></li> <li><code>chart_trends</code></li> <li><code>correlation_indicators</code></li> <li><code>other_indicators</code></li> </ul> <p>Each module has two namespaces:</p> <ul> <li><code>single</code>: operates on the entire list (returns one value or a tuple)</li> <li><code>bulk</code>: rolling / windowed computation (returns a list aligned to the trailing end of each window)</li> </ul> <p>Example:</p> <pre><code>from pytechnicalindicators import standard_indicators\n\nstandard_indicators.single.simple_moving_average(prices)\nstandard_indicators.bulk.simple_moving_average(prices, period=20)\n</code></pre>"},{"location":"tutorials/pandas/#getting-some-data","title":"\ud83d\udce5 Getting Some Data","text":"<p>If you already have a CSV point to your CSV, we will be using <code>examples/prices.csv</code> for our tutorials:</p> <pre><code>df = pd.read_csv(\"prices.csv\", parse_dates=[\"Date\"])\ndf = df.sort_values(\"Date\").reset_index(drop=True)\n</code></pre>"},{"location":"tutorials/pandas/#converting-dataframe-columns-to-lists","title":"\ud83d\udd04 Converting DataFrame Columns to Lists","text":"<p>Most functions expect Python <code>list[float]</code> (not Series, not NumPy arrays). Convert cleanly:</p> <pre><code>close = df[\"Close\"].astype(float).tolist()\nhigh  = df[\"High\"].astype(float).tolist()\nlow   = df[\"Low\"].astype(float).tolist()\nopen_ = df[\"Open\"].astype(float).tolist()\n</code></pre> <p>(You can keep naming consistent; <code>open_</code> avoids shadowing Python's built-in <code>open</code>.)</p>"},{"location":"tutorials/pandas/#example-1-simple-moving-average-sma","title":"\u2705 Example 1: Simple Moving Average (SMA)","text":"<p>API Reference</p>"},{"location":"tutorials/pandas/#single-all-data-as-one-window","title":"Single (all data as one window)","text":"<pre><code>from pytechnicalindicators import import moving_average as ma\n\nsma_all = ma.single.moving_average(close, moving_average_type=\"simple\")\nprint(\"Full-series SMA:\", sma_all)\n</code></pre>"},{"location":"tutorials/pandas/#bulk-rolling-window","title":"Bulk (rolling window)","text":"<pre><code>period = 20\nsma_series = ma.bulk.moving_average(close, period=period, moving_average_type=\"simple\")\n# Align back to DataFrame: last len(sma_series) rows correspond to rolling results\ndf.loc[df.index[-len(sma_series):], f\"SMA_{period}\"] = sma_series\n</code></pre> <p>Tip: The first <code>(period - 1)</code> rows have no value because a full window was not yet available. You can forward fill or leave as NaN depending on downstream needs.</p>"},{"location":"tutorials/pandas/#example-2-moving-constant-bands-generic-bollinger-bands","title":"\u2705 Example 2: Moving Constant Bands (Generic Bollinger Bands)","text":"<p>API Reference</p> <p><code>single</code> version returns a tuple <code>(lower, middle, upper)</code>; <code>bulk</code> returns a list of such tuples.</p> <pre><code>lower, middle, upper = ci.single.moving_constant_bands(\n        close[-20:],\n        constant_model_type=\"exponential_moving_average\",\n        deviation_model=\"standard_deviation\",\n        deviation_multiplier=2.0,\n)\nprint(lower, middle, upper)\n</code></pre> <p>Bulk usage:</p> <pre><code>bands = ci.bulk.moving_constant_bands(\n    close,\n    constant_model_type=\"exponential_moving_average\",\n    deviation_model=\"standard_deviation\",\n    deviation_multiplier=2.0,\n    period=20\n)\n\n# Unpack and assign (align to tail)\nlower_vals, mid_vals, upper_vals = zip(*bands)\ntail_index = df.index[-len(bands):]\ndf.loc[tail_index, \"MCB_Lower\"] = lower_vals\ndf.loc[tail_index, \"MCB_EMA\"] = mid_vals\ndf.loc[tail_index, \"MCB_Upper\"] = upper_vals\n</code></pre>"},{"location":"tutorials/pandas/#example-3-relative-strength-index-rsi","title":"\u2705 Example 3: Relative Strength Index (RSI)","text":"<p>API Reference</p> <pre><code>rsi_values =  mi.bulk.relative_strength_index(\n    close,\n    constant_model_type=\"smoothed_moving_average\",\n    period=20\n)\n\ndf.loc[df.index[-len(rsi_values):], \"RSI\"] = rsi_values\n</code></pre>"},{"location":"tutorials/pandas/#example-4-average-true-range-atr","title":"\u2705 Example 4: Average True Range (ATR)","text":"<p>API Reference</p> <p>Valid constant model strings (case-insensitive aliases): <code>simple</code>, <code>smoothed</code>, <code>exponential</code>, <code>median</code>, <code>mode</code> (Full forms also accepted: <code>simple_moving_average</code>, <code>smoothed_moving_average</code>, etc.)</p> <pre><code>from pytechnicalindicators import other_indicators\n\nmodel = \"exponential_moving_average\"\nperiod = 14\n\natr_series = other_indicators.bulk.average_true_range(\n    close=close,\n    high=high,\n    low=low,\n    constant_model_type=model,\n    period=period\n)\ndf.loc[df.index[-len(atr_series):], f\"ATR_{period}\"] = atr_series\n</code></pre>"},{"location":"tutorials/pandas/#single-vs-bulk-when-to-use-which","title":"\ud83e\uddea Single vs Bulk: When to Use Which?","text":"Use Case Pick One summary value for entire dataset <code>single</code> Rolling feature engineering for models <code>bulk</code> Signal snapshot at latest bar <code>single</code> on a sliced tail Chart overlays / time series indicators <code>bulk</code>"},{"location":"tutorials/pandas/#handling-alignment","title":"\ud83d\udee0\ufe0f Handling Alignment","text":"<p>Bulk outputs are shorter than the original price history when a window (<code>period</code>) is specified. Strategies:</p> <pre><code># Method 1: Right-align (as shown earlier)\ndf.loc[df.index[-len(series):], \"Indicator\"] = series\n\n# Method 2: Pad with NaN at front\nimport numpy as np\npadded = [np.nan] * (len(df) - len(series)) + series\ndf[\"Indicator\"] = padded\n</code></pre>"},{"location":"tutorials/pandas/#missing-data-nans","title":"\ud83e\uddea Missing Data / NaNs","text":"<p>Before extracting lists:</p> <pre><code>df = df.dropna(subset=[\"Open\", \"High\", \"Low\", \"Close\", \"Volume\"])\n</code></pre> <p>If you forward-fill:</p> <pre><code>df[[\"Open\",\"High\",\"Low\",\"Close\",\"Volume\"]] = df[[\"Open\",\"High\",\"Low\",\"Close\",\"Volume\"]].ffill()\n</code></pre> <p>Be cautious: forward-filling can create artificial continuity.</p>"},{"location":"tutorials/pandas/#choosing-constant-deviation-models","title":"\u2699\ufe0f Choosing Constant / Deviation Models","text":"<p>Many functions accept a <code>constant_model_type</code> or <code>deviation_model</code> to alter smoothing or dispersion behavior. Experiment:</p> <p>Consult the project API reference for model-specific effects:</p>"},{"location":"tutorials/pandas/#putting-it-all-together","title":"\ud83e\udde9 Putting It All Together","text":"<p>A runnable example of the full code can be found in <code>01_using_pandas_and_pytechnicalindicators.py</code></p> <pre><code>python3 01_using_pandas_and_pytechnicalindicators.py\n</code></pre> <p>Output:</p> <pre><code>Full-series SMA: 5624.867410358566\n5367.04826935573 5755.587345685254 6144.126422014779\n          Date     Open     High      Low    Close     SMA_20     BB_Lower    BB_Middle     BB_Upper        RSI   ATR_20\n246 2025-03-10  5705.37  5705.37  5564.02  5614.56  5956.2700  5579.906354  5877.649008  6175.391662  33.281207  84.9520\n247 2025-03-11  5603.65  5636.30  5528.41  5572.07  5931.5515  5504.588851  5841.191158  6177.793465  36.744063  88.9195\n248 2025-03-12  5624.84  5642.19  5546.09  5599.30  5908.0915  5451.413841  5811.173289  6170.932737  33.949163  92.0275\n249 2025-03-13  5594.45  5597.78  5504.65  5521.52  5881.5690  5385.361698  5775.695387  6166.029075  33.043555  93.6840\n250 2025-03-14  5563.85  5645.27  5563.85  5638.94  5857.7625  5367.048269  5755.587346  6144.126422  39.573869  94.4570\n</code></pre>"},{"location":"tutorials/pandas/#performance-tips","title":"\ud83d\ude80 Performance Tips","text":"<ul> <li>Convert Series to plain Python lists only once; reuse.</li> <li>Gather all indicators first, then assign to DataFrame to minimize index alignment overhead.</li> <li>For large backtests, consider chunking historical data and streaming features forward.</li> </ul>"},{"location":"tutorials/pandas/#common-pitfalls","title":"\ud83e\uddfe Common Pitfalls","text":"Issue Cause Fix ValueError for model type Misspelled string Use accepted aliases (<code>simple</code>, <code>exponential</code>, etc.) Mismatched lengths when merging Rolling window shrinks output Right-align or pad with NaNs NaNs propagate into indicators Missing OHLC data Clean with <code>dropna</code> or controlled fills Confusing <code>single</code> vs <code>bulk</code> Wrong namespace Use <code>module.single.*</code> or <code>module.bulk.*</code>"},{"location":"tutorials/pandas/#disclaimer","title":"\ud83d\udee1\ufe0f Disclaimer","text":"<p>Educational example only. Not financial advice. Validate results independently before using in production or live trading.</p>"},{"location":"tutorials/pandas/#next-step","title":"\u2705 Next Step","text":"<p>You now know how to integrate PyTechnicalIndicators into a pandas workflow and engineer feature columns efficiently.</p> <p>Next discover how to integrate Plotly charts</p> <p>Happy analyzing! \ud83e\udd80\ud83d\udc0d\ud83d\udcc8</p>"},{"location":"tutorials/plotly/","title":"Tutorial 2: Visualizing Indicators with Plotly","text":"<p>Build on Tutorial 1 by adding rich, interactive technical charts.</p> <p>This tutorial is the second in the series:</p> <ul> <li>01 - Using PyTechnicalIndicators with pandas</li> <li>02 - Using PyTechnicalIndicators with Plotly</li> <li>03 - More advanced use cases for PyTechnicalIndicators</li> <li>04 - Connecting to an API</li> </ul>"},{"location":"tutorials/plotly/#goal","title":"\ud83c\udfaf Goal","text":"<p>Add interactive Plotly charts on top of the engineered indicators from Tutorial 1:</p> <ul> <li>Candlestick chart from CSV OHLCV data</li> <li>Overlay moving average (SMA)</li> <li>Overlay Moving Constant Bands</li> <li>Add RSI in its own panel (with threshold lines)</li> <li>Add ATR in a third panel</li> <li>Optional: interactive toggling of indicators</li> <li>Optional: static export</li> </ul>"},{"location":"tutorials/plotly/#prerequisites","title":"\ud83d\udce6 Prerequisites","text":"<p>You should already have:</p> <ul> <li>A <code>prices.csv</code> file (with at least columns: <code>Date,Open,High,Low,Close</code>)</li> <li>The indicator columns created in Tutorial 1 </li> </ul> <p>Install Plotly (and optional static export helper):</p> <pre><code>pip install plotly \n</code></pre>"},{"location":"tutorials/plotly/#data-indicators-recap","title":"\ud83d\udcc1 Data &amp; Indicators Recap","text":"<p>If you already followed Tutorial 1 and have a DataFrame with:</p> <ul> <li><code>SMA_20</code></li> <li><code>MCB_Lower</code>, <code>MCB_EMA</code>, <code>MCB_Upper</code></li> <li><code>RSI</code></li> <li><code>ATR_20</code></li> </ul> <p>Otherwise, copy the code from tutorial 1</p>"},{"location":"tutorials/plotly/#creating-a-multi-panel-plotly-figure","title":"\ud83d\udcca Creating a Multi-Panel Plotly Figure","text":"<p>Layout plan:</p> <ul> <li>Row 1: Candlestick + SMA + Bands (with shaded area between lower/upper)</li> <li>Row 2: RSI + threshold lines (70 / 30)</li> <li>Row 3: ATR (bar or line)</li> </ul> <pre><code>import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(\n    rows=3,\n    cols=1,\n    shared_xaxes=True,\n    vertical_spacing=0.02,\n    row_heights=[0.6, 0.2, 0.2],\n    subplot_titles=(\"Price &amp; Overlays\", \"RSI\", \"ATR\")\n)\n\n# --- Row 1: Candlestick ---\nfig.add_trace(\n    go.Candlestick(\n        x=df[\"Date\"],\n        open=df[\"Open\"],\n        high=df[\"High\"],\n        low=df[\"Low\"],\n        close=df[\"Close\"],\n        name=\"Price\",\n        increasing_line_color=\"#26a69a\",\n        decreasing_line_color=\"#ef5350\",\n        showlegend=True\n    ),\n    row=1, col=1\n)\n\n# --- Row 1: SMA ---\nsma_col = \"SMA_20\"\nif sma_col in df:\n    fig.add_trace(\n        go.Scatter(\n            x=df[\"Date\"], y=df[sma_col],\n            name=sma_col,\n            line=dict(color=\"orange\", width=1.3),\n            hovertemplate=\"SMA %{y:.2f}&lt;extra&gt;&lt;/extra&gt;\"\n        ),\n        row=1, col=1\n    )\n\n# --- Row 1: Moving Constant Bands (shaded) ---\nif {\"MCB_Lower\",\"MCB_Upper\",\"MCB_Middle\"}.issubset(df.columns):\n    fig.add_trace(\n        go.Scatter(\n            x=df[\"Date\"], y=df[\"MCB_Upper\"],\n            name=\"MCB Upper\",\n            line=dict(color=\"royalblue\", width=1),\n            hovertemplate=\"Upper %{y:.2f}&lt;extra&gt;&lt;/extra&gt;\",\n            opacity=0.7\n        ),\n        row=1, col=1\n    )\n    fig.add_trace(\n        go.Scatter(\n            x=df[\"Date\"], y=df[\"MCB_Lower\"],\n            name=\"MCB Lower\",\n            line=dict(color=\"royalblue\", width=1),\n            fill=\"tonexty\",\n            fillcolor=\"rgba(65,105,225,0.15)\",\n            hovertemplate=\"Lower %{y:.2f}&lt;extra&gt;&lt;/extra&gt;\",\n            opacity=0.7\n        ),\n        row=1, col=1\n    )\n    fig.add_trace(\n        go.Scatter(\n            x=df[\"Date\"], y=df[\"MCB_EMA\"],\n            name=\"MCB Mid\",\n            line=dict(color=\"royalblue\", width=0.8, dash=\"dot\"),\n            hovertemplate=\"Mid %{y:.2f}&lt;extra&gt;&lt;/extra&gt;\",\n            opacity=0.6\n        ),\n        row=1, col=1\n    )\n\n# --- Row 2: RSI ---\nif \"RSI\" in df:\n    fig.add_trace(\n        go.Scatter(\n            x=df[\"Date\"], y=df[\"RSI\"],\n            name=\"RSI (20)\",\n            line=dict(color=\"purple\"),\n            hovertemplate=\"RSI %{y:.2f}&lt;extra&gt;&lt;/extra&gt;\"\n        ),\n        row=2, col=1\n    )\n    # Overbought / Oversold reference lines\n    fig.add_hline(y=70, line_dash=\"dash\", line_color=\"red\", row=2, col=1)\n    fig.add_hline(y=30, line_dash=\"dash\", line_color=\"green\", row=2, col=1)\n\n# --- Row 3: ATR ---\natr_col = \"ATR_20\"\nif atr_col in df:\n    fig.add_trace(\n        go.Bar(\n            x=df[\"Date\"], y=df[atr_col],\n            name=atr_col,\n            marker_color=\"gray\",\n            hovertemplate=\"ATR %{y:.2f}&lt;extra&gt;&lt;/extra&gt;\",\n            opacity=0.7\n        ),\n        row=3, col=1\n    )\n\nfig.update_layout(\n    title=f\"Technical Indicators Dashboard\",\n    legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1),\n    xaxis_rangeslider_visible=False,\n    template=\"plotly_white\",\n    margin=dict(l=40, r=40, t=60, b=40),\n    hovermode=\"x unified\"\n)\n\n# Improve y-axis titles\nfig.update_yaxes(title_text=\"Price\", row=1, col=1)\nfig.update_yaxes(title_text=\"RSI\",   row=2, col=1, range=[0,100])\nfig.update_yaxes(title_text=\"ATR\",   row=3, col=1)\n\nfig.show()\n</code></pre>"},{"location":"tutorials/plotly/#static-export","title":"\ud83d\udcbe Static Export","text":"<p>Install Kaleido (already in prerequisites, requires chromium):</p> <pre><code>pip install -U kaleido\n</code></pre> <p>Then:</p> <pre><code>fig.write_image(\"technical_dashboard.png\", scale=2, width=1400, height=900)\n</code></pre>"},{"location":"tutorials/plotly/#handling-missing-indicator-rows","title":"\ud83e\uddea Handling Missing Indicator Rows","text":"<p>Because rolling indicators start later: - Leave initial NaNs (recommended for honesty) - Or backfill using <code>df[sma_col] = df[sma_col].ffill()</code> (only if justified) - Mask early bars with incomplete overlays using conditional visibility</p>"},{"location":"tutorials/plotly/#styling-tips","title":"\ud83c\udfa8 Styling Tips","text":"Goal Approach Thinner candlestick wicks <code>go.Candlestick(..., whiskerwidth=0.4)</code> Dark theme <code>template=\"plotly_dark\"</code> Dynamic color on RSI Add a second trace highlighting overbought/oversold zones Band opacity tweak Change <code>fillcolor=\"rgba(65,105,225,0.08)\"</code>"},{"location":"tutorials/plotly/#common-visualization-pitfalls","title":"\ud83e\uddfe Common Visualization Pitfalls","text":"Issue Cause Fix Bands misaligned Wrong index slicing Ensure alignment uses <code>df.index[-len(bands):]</code> RSI flatlining Period too long / no volatility Try shorter period or verify data quality ATR bars obscure price ATR added to row=1 Use separate row or secondary y-axis Export failure Missing Kaleido <code>pip install kaleido</code> Date gaps in weekends Exchange calendar Accept or reindex trading days only"},{"location":"tutorials/plotly/#extending-further","title":"\ud83e\uddea Extending Further","text":"<p>Ideas you can try before the next tutorial:</p> <ul> <li>Add volume as a semi-transparent bar behind price (secondary y-axis)</li> <li>Add additional moving averages (e.g., SMA 50 / 200)</li> <li>Shade RSI &gt; 70 and &lt; 30 using shapes:   <code>python   fig.add_shape(type=\"rect\", xref=\"x\", yref=\"y2\",                 x0=df[\"Date\"].min(), x1=df[\"Date\"].max(),                 y0=70, y1=100, fillcolor=\"rgba(255,0,0,0.05)\", line_width=0, row=2, col=1)</code></li> </ul>"},{"location":"tutorials/plotly/#putting-it-all-together","title":"\ud83e\udde9 Putting It All Together","text":"<p>A runnable example of the full code can be found in <code>02_using_plotly_and_pytechnicalindicators.py</code></p> <pre><code>python3 examples/02_using_plotly_and_pytechnicalindicators.py\n</code></pre> <p>Output:</p> <p></p>"},{"location":"tutorials/plotly/#disclaimer","title":"\ud83d\udee1\ufe0f Disclaimer","text":"<p>Educational example only. Not financial advice. Validate indicator logic before using in live or automated systems.</p>"},{"location":"tutorials/plotly/#next-step","title":"\u2705 Next Step","text":"<p>Continue to: 03 - More advanced use cases for PyTechnicalIndicators</p> <p>In the next tutorial we will iterate programmatically over indicator modules, auto-generate features, and discuss batch computations.</p> <p>Happy charting! \ud83e\udd80\ud83d\udc0d\ud83d\udcc8</p>"}]}